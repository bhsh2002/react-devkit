import * as x from "react";
import yt, { createContext as Zd, useState as ut, useCallback as go, useContext as Lo, useEffect as ar, isValidElement as Rs, cloneElement as ks, Children as Mm, useLayoutEffect as Im, useMemo as Jd, useRef as Wn, useDebugValue as Nm } from "react";
import { Paper as ei, Box as xt, Typography as In, Toolbar as Tr, TableContainer as Am, Table as Fm, TableHead as $m, TableRow as Gr, TableCell as Xr, TableSortLabel as jm, TableBody as _m, TablePagination as Vm, CircularProgress as Bo, TextField as Zn, Avatar as Lm, Button as Ir, Autocomplete as ef, FormControlLabel as tf, Switch as nf, Collapse as Bm, Grid as bc, MenuItem as Wm, Alert as Oa, Container as zm, List as Um, ListItem as qm, ListItemButton as Hm, ListItemIcon as Ym, ListItemText as Km, CssBaseline as Gm, AppBar as Xm, IconButton as Qm, Drawer as vc } from "@mui/material";
import { ImageNotSupported as Zm, Search as Jm, Add as ey, Menu as ty } from "@mui/icons-material";
import { Global as ny, ThemeContext as ry, keyframes as Wo, css as rf } from "@emotion/react";
import oy from "@emotion/styled";
import * as sy from "react-dom";
import ds from "react-dom";
function of(e) {
  return e && e.__esModule && Object.prototype.hasOwnProperty.call(e, "default") ? e.default : e;
}
var fs = { exports: {} }, Qr = {};
/**
 * @license React
 * react-jsx-runtime.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var xc;
function iy() {
  if (xc) return Qr;
  xc = 1;
  var e = Symbol.for("react.transitional.element"), t = Symbol.for("react.fragment");
  function n(r, s, i) {
    var a = null;
    if (i !== void 0 && (a = "" + i), s.key !== void 0 && (a = "" + s.key), "key" in s) {
      i = {};
      for (var l in s)
        l !== "key" && (i[l] = s[l]);
    } else i = s;
    return s = i.ref, {
      $$typeof: e,
      type: r,
      key: a,
      ref: s !== void 0 ? s : null,
      props: i
    };
  }
  return Qr.Fragment = t, Qr.jsx = n, Qr.jsxs = n, Qr;
}
var Zr = {};
/**
 * @license React
 * react-jsx-runtime.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var wc;
function ay() {
  return wc || (wc = 1, process.env.NODE_ENV !== "production" && (function() {
    function e(R) {
      if (R == null) return null;
      if (typeof R == "function")
        return R.$$typeof === k ? null : R.displayName || R.name || null;
      if (typeof R == "string") return R;
      switch (R) {
        case m:
          return "Fragment";
        case C:
          return "Profiler";
        case b:
          return "StrictMode";
        case P:
          return "Suspense";
        case M:
          return "SuspenseList";
        case $:
          return "Activity";
      }
      if (typeof R == "object")
        switch (typeof R.tag == "number" && console.error(
          "Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."
        ), R.$$typeof) {
          case p:
            return "Portal";
          case w:
            return R.displayName || "Context";
          case O:
            return (R._context.displayName || "Context") + ".Consumer";
          case S:
            var B = R.render;
            return R = R.displayName, R || (R = B.displayName || B.name || "", R = R !== "" ? "ForwardRef(" + R + ")" : "ForwardRef"), R;
          case F:
            return B = R.displayName || null, B !== null ? B : e(R.type) || "Memo";
          case A:
            B = R._payload, R = R._init;
            try {
              return e(R(B));
            } catch {
            }
        }
      return null;
    }
    function t(R) {
      return "" + R;
    }
    function n(R) {
      try {
        t(R);
        var B = !1;
      } catch {
        B = !0;
      }
      if (B) {
        B = console;
        var H = B.error, K = typeof Symbol == "function" && Symbol.toStringTag && R[Symbol.toStringTag] || R.constructor.name || "Object";
        return H.call(
          B,
          "The provided key is an unsupported type %s. This value must be coerced to a string before using it here.",
          K
        ), t(R);
      }
    }
    function r(R) {
      if (R === m) return "<>";
      if (typeof R == "object" && R !== null && R.$$typeof === A)
        return "<...>";
      try {
        var B = e(R);
        return B ? "<" + B + ">" : "<...>";
      } catch {
        return "<...>";
      }
    }
    function s() {
      var R = v.A;
      return R === null ? null : R.getOwner();
    }
    function i() {
      return Error("react-stack-top-frame");
    }
    function a(R) {
      if (D.call(R, "key")) {
        var B = Object.getOwnPropertyDescriptor(R, "key").get;
        if (B && B.isReactWarning) return !1;
      }
      return R.key !== void 0;
    }
    function l(R, B) {
      function H() {
        N || (N = !0, console.error(
          "%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://react.dev/link/special-props)",
          B
        ));
      }
      H.isReactWarning = !0, Object.defineProperty(R, "key", {
        get: H,
        configurable: !0
      });
    }
    function c() {
      var R = e(this.type);
      return _[R] || (_[R] = !0, console.error(
        "Accessing element.ref was removed in React 19. ref is now a regular prop. It will be removed from the JSX Element type in a future release."
      )), R = this.props.ref, R !== void 0 ? R : null;
    }
    function u(R, B, H, K, te, ee) {
      var J = H.ref;
      return R = {
        $$typeof: h,
        type: R,
        key: B,
        props: H,
        _owner: K
      }, (J !== void 0 ? J : null) !== null ? Object.defineProperty(R, "ref", {
        enumerable: !1,
        get: c
      }) : Object.defineProperty(R, "ref", { enumerable: !1, value: null }), R._store = {}, Object.defineProperty(R._store, "validated", {
        configurable: !1,
        enumerable: !1,
        writable: !0,
        value: 0
      }), Object.defineProperty(R, "_debugInfo", {
        configurable: !1,
        enumerable: !1,
        writable: !0,
        value: null
      }), Object.defineProperty(R, "_debugStack", {
        configurable: !1,
        enumerable: !1,
        writable: !0,
        value: te
      }), Object.defineProperty(R, "_debugTask", {
        configurable: !1,
        enumerable: !1,
        writable: !0,
        value: ee
      }), Object.freeze && (Object.freeze(R.props), Object.freeze(R)), R;
    }
    function d(R, B, H, K, te, ee) {
      var J = B.children;
      if (J !== void 0)
        if (K)
          if (T(J)) {
            for (K = 0; K < J.length; K++)
              f(J[K]);
            Object.freeze && Object.freeze(J);
          } else
            console.error(
              "React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead."
            );
        else f(J);
      if (D.call(B, "key")) {
        J = e(R);
        var ie = Object.keys(B).filter(function(q) {
          return q !== "key";
        });
        K = 0 < ie.length ? "{key: someKey, " + ie.join(": ..., ") + ": ...}" : "{key: someKey}", V[J + K] || (ie = 0 < ie.length ? "{" + ie.join(": ..., ") + ": ...}" : "{}", console.error(
          `A props object containing a "key" prop is being spread into JSX:
  let props = %s;
  <%s {...props} />
React keys must be passed directly to JSX without using spread:
  let props = %s;
  <%s key={someKey} {...props} />`,
          K,
          J,
          ie,
          J
        ), V[J + K] = !0);
      }
      if (J = null, H !== void 0 && (n(H), J = "" + H), a(B) && (n(B.key), J = "" + B.key), "key" in B) {
        H = {};
        for (var re in B)
          re !== "key" && (H[re] = B[re]);
      } else H = B;
      return J && l(
        H,
        typeof R == "function" ? R.displayName || R.name || "Unknown" : R
      ), u(
        R,
        J,
        H,
        s(),
        te,
        ee
      );
    }
    function f(R) {
      y(R) ? R._store && (R._store.validated = 1) : typeof R == "object" && R !== null && R.$$typeof === A && (R._payload.status === "fulfilled" ? y(R._payload.value) && R._payload.value._store && (R._payload.value._store.validated = 1) : R._store && (R._store.validated = 1));
    }
    function y(R) {
      return typeof R == "object" && R !== null && R.$$typeof === h;
    }
    var g = yt, h = Symbol.for("react.transitional.element"), p = Symbol.for("react.portal"), m = Symbol.for("react.fragment"), b = Symbol.for("react.strict_mode"), C = Symbol.for("react.profiler"), O = Symbol.for("react.consumer"), w = Symbol.for("react.context"), S = Symbol.for("react.forward_ref"), P = Symbol.for("react.suspense"), M = Symbol.for("react.suspense_list"), F = Symbol.for("react.memo"), A = Symbol.for("react.lazy"), $ = Symbol.for("react.activity"), k = Symbol.for("react.client.reference"), v = g.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE, D = Object.prototype.hasOwnProperty, T = Array.isArray, I = console.createTask ? console.createTask : function() {
      return null;
    };
    g = {
      react_stack_bottom_frame: function(R) {
        return R();
      }
    };
    var N, _ = {}, G = g.react_stack_bottom_frame.bind(
      g,
      i
    )(), L = I(r(i)), V = {};
    Zr.Fragment = m, Zr.jsx = function(R, B, H) {
      var K = 1e4 > v.recentlyCreatedOwnerStacks++;
      return d(
        R,
        B,
        H,
        !1,
        K ? Error("react-stack-top-frame") : G,
        K ? I(r(R)) : L
      );
    }, Zr.jsxs = function(R, B, H) {
      var K = 1e4 > v.recentlyCreatedOwnerStacks++;
      return d(
        R,
        B,
        H,
        !0,
        K ? Error("react-stack-top-frame") : G,
        K ? I(r(R)) : L
      );
    };
  })()), Zr;
}
var Sc;
function ly() {
  return Sc || (Sc = 1, process.env.NODE_ENV === "production" ? fs.exports = iy() : fs.exports = ay()), fs.exports;
}
var E = ly();
const CM = ({ icon: e, title: t, value: n, color: r, sx: s, onClick: i }) => /* @__PURE__ */ E.jsxs(
  ei,
  {
    sx: {
      p: 3,
      display: "flex",
      alignItems: "center",
      gap: 2,
      height: "100%",
      cursor: i ? "pointer" : "default",
      ...s
    },
    onClick: i,
    elevation: 2,
    children: [
      /* @__PURE__ */ E.jsx(xt, { sx: { color: r || "primary.main", fontSize: 40 }, "data-testid": "statcard-icon", children: e }),
      /* @__PURE__ */ E.jsxs(xt, { children: [
        /* @__PURE__ */ E.jsx(In, { color: "text.secondary", children: t }),
        /* @__PURE__ */ E.jsx(In, { variant: "h5", sx: { fontWeight: "bold" }, children: n })
      ] })
    ]
  }
), cy = () => /* @__PURE__ */ E.jsx(xt, { sx: { p: 4, textAlign: "center" }, children: /* @__PURE__ */ E.jsx(In, { color: "text.secondary", children: "No rows" }) }), uy = () => /* @__PURE__ */ E.jsx(xt, { sx: { display: "flex", justifyContent: "center", alignItems: "center", p: 4 }, children: /* @__PURE__ */ E.jsx(Bo, {}) }), dy = ({
  rows: e = [],
  columns: t = [],
  getRowId: n = (w) => w.id,
  loading: r = !1,
  error: s,
  pagination: i = !1,
  rowCount: a = 0,
  page: l = 1,
  onPageChange: c = () => {
  },
  perPage: u = 10,
  onPerPageChange: d = () => {
  },
  perPageOptions: f = [10, 25, 100],
  sorting: y = !1,
  sortModel: g = [],
  onSortModelChange: h = () => {
  },
  showRowNumber: p = !0,
  slots: m = {},
  slotProps: b = {},
  sx: C,
  height: O = "auto"
}) => {
  const {
    toolbar: w,
    noRowsOverlay: S = cy,
    loadingOverlay: P = uy
  } = m, M = (k) => {
    if (!y) return;
    const v = g.find((T) => T.field === k);
    let D = v ? v.sort === "asc" ? [{ field: k, sort: "desc" }] : [] : [{ field: k, sort: "asc" }];
    h(D);
  }, F = g.length > 0 ? g[0] : null, A = [
    ...p ? [{
      field: "__rowNumber__",
      headerName: "#",
      width: 60,
      align: "center",
      renderCell: ({ index: k }) => (l - 1) * u + k + 1
    }] : [],
    ...t
  ], $ = (k) => k.sticky ? {
    position: "sticky",
    [k.sticky]: 0,
    background: "white",
    zIndex: 1
  } : {};
  return /* @__PURE__ */ E.jsxs(ei, { sx: C, children: [
    w && /* @__PURE__ */ E.jsx(Tr, { children: /* @__PURE__ */ E.jsx(w, { ...b.toolbar || {} }) }),
    /* @__PURE__ */ E.jsx(xt, { sx: { width: "100%", overflowX: "auto" }, children: /* @__PURE__ */ E.jsx(Am, { sx: { height: O }, children: /* @__PURE__ */ E.jsxs(Fm, { stickyHeader: !0, children: [
      /* @__PURE__ */ E.jsx($m, { children: /* @__PURE__ */ E.jsx(Gr, { children: A.map((k) => /* @__PURE__ */ E.jsx(
        Xr,
        {
          align: k.align || "inherit",
          width: k.width,
          sx: { whiteSpace: "nowrap", overflow: "hidden", textOverflow: "ellipsis", ...$(k) },
          sortDirection: F?.field === k.field ? F.sort : !1,
          children: k.sortable && y ? /* @__PURE__ */ E.jsx(
            jm,
            {
              active: F?.field === k.field,
              direction: F?.field === k.field ? F.sort : "asc",
              onClick: () => M(k.field),
              children: k.headerName
            }
          ) : k.headerName
        },
        k.field
      )) }) }),
      /* @__PURE__ */ E.jsx(_m, { children: r ? /* @__PURE__ */ E.jsx(Gr, { children: /* @__PURE__ */ E.jsx(Xr, { colSpan: A.length, sx: { border: "none" }, children: /* @__PURE__ */ E.jsx(P, { ...b.loadingOverlay || {} }) }) }) : s ? /* @__PURE__ */ E.jsx(Gr, { children: /* @__PURE__ */ E.jsx(Xr, { colSpan: A.length, sx: { border: "none", textAlign: "center" }, children: /* @__PURE__ */ E.jsx(In, { color: "error", children: s.message || "An error occurred." }) }) }) : e.length === 0 ? /* @__PURE__ */ E.jsx(Gr, { children: /* @__PURE__ */ E.jsx(Xr, { colSpan: A.length, sx: { border: "none" }, children: /* @__PURE__ */ E.jsx(S, { ...b.noRowsOverlay || {} }) }) }) : e.map((k, v) => /* @__PURE__ */ E.jsx(Gr, { hover: !0, children: A.map((D) => {
        const T = D.field.split(".").reduce((I, N) => I?.[N], k);
        return /* @__PURE__ */ E.jsx(Xr, { align: D.align || "inherit", sx: { whiteSpace: "nowrap", overflow: "hidden", textOverflow: "ellipsis", ...$(D) }, children: D.renderCell ? D.renderCell({ value: T, row: k, id: n(k), index: v }) : T }, D.field);
      }) }, n(k))) })
    ] }) }) }),
    i && !s && e.length > 0 && /* @__PURE__ */ E.jsx(
      Vm,
      {
        component: "div",
        count: a,
        page: l - 1,
        onPageChange: (k, v) => c(v + 1),
        rowsPerPage: u,
        onRowsPerPageChange: (k) => d(parseInt(k.target.value, 10)),
        rowsPerPageOptions: f,
        showFirstButton: !0,
        showLastButton: !0,
        labelRowsPerPage: null,
        labelDisplayedRows: ({ from: k, to: v, count: D }) => `${k} - ${v} | ${D}`,
        sx: { display: "flex", justifyContent: "center" }
      }
    )
  ] });
}, zo = Zd(null), sf = ({ initialValues: e = {}, onSubmit: t, validationSchema: n, children: r, ...s }) => {
  const [i, a] = ut(e || {}), [l, c] = ut({}), u = go((y, g) => {
    a((h) => ({
      ...h,
      [y]: g
    })), l[y] && c((h) => ({
      ...h,
      [y]: void 0
    }));
  }, [l]), d = async (y) => {
    y.preventDefault(), c({});
    try {
      n && await n.validate(i, { abortEarly: !1 }), t && t(i);
    } catch (g) {
      if (g.inner) {
        const h = g.inner.reduce((p, m) => (p[m.path] = m.message, p), {});
        c(h);
      }
    }
  }, f = {
    values: i,
    setFieldValue: u,
    errors: l
  };
  return /* @__PURE__ */ E.jsx(zo.Provider, { value: f, children: /* @__PURE__ */ E.jsx("form", { onSubmit: d, ...s, children: r }) });
}, Ec = ({ name: e, label: t, ...n }) => {
  const r = Lo(zo);
  if (!r)
    throw new Error("TextField must be used within a Form component");
  const { values: s, setFieldValue: i, errors: a } = r, l = a[e], c = (u) => {
    i(e, u.target.value);
  };
  return /* @__PURE__ */ E.jsx(
    Zn,
    {
      name: e,
      label: t,
      value: s[e] || "",
      onChange: c,
      error: !!l,
      helperText: l || "",
      ...n
    }
  );
}, PM = ({ name: e, label: t = "Upload File", initialPreview: n }) => {
  const r = Lo(zo), [s, i] = ut(n || null);
  if (!r)
    throw new Error("FileUploadField must be used within a Form component");
  const { setFieldValue: a, values: l } = r, c = l[e];
  ar(() => {
    n && i(n);
  }, [n]), ar(() => {
    c || i(n || null);
  }, [c, n]);
  const u = (d) => {
    const f = d.target.files[0];
    if (f) {
      a(e, f);
      const y = new FileReader();
      y.onloadend = () => {
        i(y.result);
      }, y.readAsDataURL(f);
    }
  };
  return /* @__PURE__ */ E.jsxs(xt, { sx: { display: "flex", flexDirection: "column", alignItems: "center", gap: 2 }, children: [
    /* @__PURE__ */ E.jsx(Lm, { src: s, sx: { width: 100, height: 100 }, children: !s && /* @__PURE__ */ E.jsx(Zm, { sx: { width: "70%", height: "70%" } }) }),
    /* @__PURE__ */ E.jsxs(Ir, { variant: "outlined", component: "label", children: [
      t,
      /* @__PURE__ */ E.jsx("input", { type: "file", hidden: !0, accept: "image/*", onChange: u, "data-testid": "file-upload-input" })
    ] })
  ] });
}, TM = ({
  name: e,
  label: t,
  fetchOptions: n,
  getOptionLabel: r = (a) => a.label,
  multiple: s = !1,
  ...i
}) => {
  const a = Lo(zo);
  if (!a)
    throw new Error("AutocompleteField must be used within a Form component");
  const { values: l, setFieldValue: c, errors: u } = a, [d, f] = ut([]), [y, g] = ut(!1), [h, p] = ut("");
  ar(() => {
    let C = !0;
    return g(!0), n(h).then((O) => {
      C && f(O || []);
    }).catch(() => {
      C && f([]);
    }).finally(() => {
      C && g(!1);
    }), () => {
      C = !1;
    };
  }, [h, n]);
  const m = (C, O) => {
    c(e, O);
  }, b = u?.[e];
  return /* @__PURE__ */ E.jsx(
    ef,
    {
      multiple: s,
      options: d,
      loading: y,
      getOptionLabel: r,
      value: l[e] || (s ? [] : null),
      onChange: m,
      onInputChange: (C, O) => {
        p(O);
      },
      renderInput: (C) => /* @__PURE__ */ E.jsx(
        Zn,
        {
          ...C,
          label: t,
          error: !!b,
          helperText: b,
          InputProps: {
            ...C.InputProps,
            endAdornment: /* @__PURE__ */ E.jsxs(E.Fragment, { children: [
              y ? /* @__PURE__ */ E.jsx(Bo, { color: "inherit", size: 20 }) : null,
              C.InputProps.endAdornment
            ] })
          }
        }
      ),
      ...i
    }
  );
}, RM = ({ name: e, label: t, ...n }) => {
  const r = Lo(zo);
  if (!r)
    throw new Error("SwitchField must be used within a Form component");
  const { values: s, setFieldValue: i } = r, a = (l) => {
    i(e, l.target.checked);
  };
  return /* @__PURE__ */ E.jsx(
    tf,
    {
      control: /* @__PURE__ */ E.jsx(
        nf,
        {
          checked: !!s[e],
          onChange: a,
          name: e,
          ...n
        }
      ),
      label: t
    }
  );
};
function j() {
  return j = Object.assign ? Object.assign.bind() : function(e) {
    for (var t = 1; t < arguments.length; t++) {
      var n = arguments[t];
      for (var r in n) ({}).hasOwnProperty.call(n, r) && (e[r] = n[r]);
    }
    return e;
  }, j.apply(null, arguments);
}
function Ee(e, t) {
  if (e == null) return {};
  var n = {};
  for (var r in e) if ({}.hasOwnProperty.call(e, r)) {
    if (t.indexOf(r) !== -1) continue;
    n[r] = e[r];
  }
  return n;
}
var ps = { exports: {} }, hs = { exports: {} }, $e = {};
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var Oc;
function fy() {
  if (Oc) return $e;
  Oc = 1;
  var e = typeof Symbol == "function" && Symbol.for, t = e ? Symbol.for("react.element") : 60103, n = e ? Symbol.for("react.portal") : 60106, r = e ? Symbol.for("react.fragment") : 60107, s = e ? Symbol.for("react.strict_mode") : 60108, i = e ? Symbol.for("react.profiler") : 60114, a = e ? Symbol.for("react.provider") : 60109, l = e ? Symbol.for("react.context") : 60110, c = e ? Symbol.for("react.async_mode") : 60111, u = e ? Symbol.for("react.concurrent_mode") : 60111, d = e ? Symbol.for("react.forward_ref") : 60112, f = e ? Symbol.for("react.suspense") : 60113, y = e ? Symbol.for("react.suspense_list") : 60120, g = e ? Symbol.for("react.memo") : 60115, h = e ? Symbol.for("react.lazy") : 60116, p = e ? Symbol.for("react.block") : 60121, m = e ? Symbol.for("react.fundamental") : 60117, b = e ? Symbol.for("react.responder") : 60118, C = e ? Symbol.for("react.scope") : 60119;
  function O(S) {
    if (typeof S == "object" && S !== null) {
      var P = S.$$typeof;
      switch (P) {
        case t:
          switch (S = S.type, S) {
            case c:
            case u:
            case r:
            case i:
            case s:
            case f:
              return S;
            default:
              switch (S = S && S.$$typeof, S) {
                case l:
                case d:
                case h:
                case g:
                case a:
                  return S;
                default:
                  return P;
              }
          }
        case n:
          return P;
      }
    }
  }
  function w(S) {
    return O(S) === u;
  }
  return $e.AsyncMode = c, $e.ConcurrentMode = u, $e.ContextConsumer = l, $e.ContextProvider = a, $e.Element = t, $e.ForwardRef = d, $e.Fragment = r, $e.Lazy = h, $e.Memo = g, $e.Portal = n, $e.Profiler = i, $e.StrictMode = s, $e.Suspense = f, $e.isAsyncMode = function(S) {
    return w(S) || O(S) === c;
  }, $e.isConcurrentMode = w, $e.isContextConsumer = function(S) {
    return O(S) === l;
  }, $e.isContextProvider = function(S) {
    return O(S) === a;
  }, $e.isElement = function(S) {
    return typeof S == "object" && S !== null && S.$$typeof === t;
  }, $e.isForwardRef = function(S) {
    return O(S) === d;
  }, $e.isFragment = function(S) {
    return O(S) === r;
  }, $e.isLazy = function(S) {
    return O(S) === h;
  }, $e.isMemo = function(S) {
    return O(S) === g;
  }, $e.isPortal = function(S) {
    return O(S) === n;
  }, $e.isProfiler = function(S) {
    return O(S) === i;
  }, $e.isStrictMode = function(S) {
    return O(S) === s;
  }, $e.isSuspense = function(S) {
    return O(S) === f;
  }, $e.isValidElementType = function(S) {
    return typeof S == "string" || typeof S == "function" || S === r || S === u || S === i || S === s || S === f || S === y || typeof S == "object" && S !== null && (S.$$typeof === h || S.$$typeof === g || S.$$typeof === a || S.$$typeof === l || S.$$typeof === d || S.$$typeof === m || S.$$typeof === b || S.$$typeof === C || S.$$typeof === p);
  }, $e.typeOf = O, $e;
}
var je = {};
/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var Cc;
function py() {
  return Cc || (Cc = 1, process.env.NODE_ENV !== "production" && (function() {
    var e = typeof Symbol == "function" && Symbol.for, t = e ? Symbol.for("react.element") : 60103, n = e ? Symbol.for("react.portal") : 60106, r = e ? Symbol.for("react.fragment") : 60107, s = e ? Symbol.for("react.strict_mode") : 60108, i = e ? Symbol.for("react.profiler") : 60114, a = e ? Symbol.for("react.provider") : 60109, l = e ? Symbol.for("react.context") : 60110, c = e ? Symbol.for("react.async_mode") : 60111, u = e ? Symbol.for("react.concurrent_mode") : 60111, d = e ? Symbol.for("react.forward_ref") : 60112, f = e ? Symbol.for("react.suspense") : 60113, y = e ? Symbol.for("react.suspense_list") : 60120, g = e ? Symbol.for("react.memo") : 60115, h = e ? Symbol.for("react.lazy") : 60116, p = e ? Symbol.for("react.block") : 60121, m = e ? Symbol.for("react.fundamental") : 60117, b = e ? Symbol.for("react.responder") : 60118, C = e ? Symbol.for("react.scope") : 60119;
    function O(z) {
      return typeof z == "string" || typeof z == "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
      z === r || z === u || z === i || z === s || z === f || z === y || typeof z == "object" && z !== null && (z.$$typeof === h || z.$$typeof === g || z.$$typeof === a || z.$$typeof === l || z.$$typeof === d || z.$$typeof === m || z.$$typeof === b || z.$$typeof === C || z.$$typeof === p);
    }
    function w(z) {
      if (typeof z == "object" && z !== null) {
        var ne = z.$$typeof;
        switch (ne) {
          case t:
            var Y = z.type;
            switch (Y) {
              case c:
              case u:
              case r:
              case i:
              case s:
              case f:
                return Y;
              default:
                var ae = Y && Y.$$typeof;
                switch (ae) {
                  case l:
                  case d:
                  case h:
                  case g:
                  case a:
                    return ae;
                  default:
                    return ne;
                }
            }
          case n:
            return ne;
        }
      }
    }
    var S = c, P = u, M = l, F = a, A = t, $ = d, k = r, v = h, D = g, T = n, I = i, N = s, _ = f, G = !1;
    function L(z) {
      return G || (G = !0, console.warn("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.")), V(z) || w(z) === c;
    }
    function V(z) {
      return w(z) === u;
    }
    function R(z) {
      return w(z) === l;
    }
    function B(z) {
      return w(z) === a;
    }
    function H(z) {
      return typeof z == "object" && z !== null && z.$$typeof === t;
    }
    function K(z) {
      return w(z) === d;
    }
    function te(z) {
      return w(z) === r;
    }
    function ee(z) {
      return w(z) === h;
    }
    function J(z) {
      return w(z) === g;
    }
    function ie(z) {
      return w(z) === n;
    }
    function re(z) {
      return w(z) === i;
    }
    function q(z) {
      return w(z) === s;
    }
    function X(z) {
      return w(z) === f;
    }
    je.AsyncMode = S, je.ConcurrentMode = P, je.ContextConsumer = M, je.ContextProvider = F, je.Element = A, je.ForwardRef = $, je.Fragment = k, je.Lazy = v, je.Memo = D, je.Portal = T, je.Profiler = I, je.StrictMode = N, je.Suspense = _, je.isAsyncMode = L, je.isConcurrentMode = V, je.isContextConsumer = R, je.isContextProvider = B, je.isElement = H, je.isForwardRef = K, je.isFragment = te, je.isLazy = ee, je.isMemo = J, je.isPortal = ie, je.isProfiler = re, je.isStrictMode = q, je.isSuspense = X, je.isValidElementType = O, je.typeOf = w;
  })()), je;
}
var Pc;
function af() {
  return Pc || (Pc = 1, process.env.NODE_ENV === "production" ? hs.exports = fy() : hs.exports = py()), hs.exports;
}
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
var qi, Tc;
function hy() {
  if (Tc) return qi;
  Tc = 1;
  var e = Object.getOwnPropertySymbols, t = Object.prototype.hasOwnProperty, n = Object.prototype.propertyIsEnumerable;
  function r(i) {
    if (i == null)
      throw new TypeError("Object.assign cannot be called with null or undefined");
    return Object(i);
  }
  function s() {
    try {
      if (!Object.assign)
        return !1;
      var i = new String("abc");
      if (i[5] = "de", Object.getOwnPropertyNames(i)[0] === "5")
        return !1;
      for (var a = {}, l = 0; l < 10; l++)
        a["_" + String.fromCharCode(l)] = l;
      var c = Object.getOwnPropertyNames(a).map(function(d) {
        return a[d];
      });
      if (c.join("") !== "0123456789")
        return !1;
      var u = {};
      return "abcdefghijklmnopqrst".split("").forEach(function(d) {
        u[d] = d;
      }), Object.keys(Object.assign({}, u)).join("") === "abcdefghijklmnopqrst";
    } catch {
      return !1;
    }
  }
  return qi = s() ? Object.assign : function(i, a) {
    for (var l, c = r(i), u, d = 1; d < arguments.length; d++) {
      l = Object(arguments[d]);
      for (var f in l)
        t.call(l, f) && (c[f] = l[f]);
      if (e) {
        u = e(l);
        for (var y = 0; y < u.length; y++)
          n.call(l, u[y]) && (c[u[y]] = l[u[y]]);
      }
    }
    return c;
  }, qi;
}
var Hi, Rc;
function nl() {
  if (Rc) return Hi;
  Rc = 1;
  var e = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
  return Hi = e, Hi;
}
var Yi, kc;
function lf() {
  return kc || (kc = 1, Yi = Function.call.bind(Object.prototype.hasOwnProperty)), Yi;
}
var Ki, Dc;
function my() {
  if (Dc) return Ki;
  Dc = 1;
  var e = function() {
  };
  if (process.env.NODE_ENV !== "production") {
    var t = /* @__PURE__ */ nl(), n = {}, r = /* @__PURE__ */ lf();
    e = function(i) {
      var a = "Warning: " + i;
      typeof console < "u" && console.error(a);
      try {
        throw new Error(a);
      } catch {
      }
    };
  }
  function s(i, a, l, c, u) {
    if (process.env.NODE_ENV !== "production") {
      for (var d in i)
        if (r(i, d)) {
          var f;
          try {
            if (typeof i[d] != "function") {
              var y = Error(
                (c || "React class") + ": " + l + " type `" + d + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof i[d] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
              );
              throw y.name = "Invariant Violation", y;
            }
            f = i[d](a, d, c, l, null, t);
          } catch (h) {
            f = h;
          }
          if (f && !(f instanceof Error) && e(
            (c || "React class") + ": type specification of " + l + " `" + d + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof f + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
          ), f instanceof Error && !(f.message in n)) {
            n[f.message] = !0;
            var g = u ? u() : "";
            e(
              "Failed " + l + " type: " + f.message + (g ?? "")
            );
          }
        }
    }
  }
  return s.resetWarningCache = function() {
    process.env.NODE_ENV !== "production" && (n = {});
  }, Ki = s, Ki;
}
var Gi, Mc;
function yy() {
  if (Mc) return Gi;
  Mc = 1;
  var e = af(), t = hy(), n = /* @__PURE__ */ nl(), r = /* @__PURE__ */ lf(), s = /* @__PURE__ */ my(), i = function() {
  };
  process.env.NODE_ENV !== "production" && (i = function(l) {
    var c = "Warning: " + l;
    typeof console < "u" && console.error(c);
    try {
      throw new Error(c);
    } catch {
    }
  });
  function a() {
    return null;
  }
  return Gi = function(l, c) {
    var u = typeof Symbol == "function" && Symbol.iterator, d = "@@iterator";
    function f(V) {
      var R = V && (u && V[u] || V[d]);
      if (typeof R == "function")
        return R;
    }
    var y = "<<anonymous>>", g = {
      array: b("array"),
      bigint: b("bigint"),
      bool: b("boolean"),
      func: b("function"),
      number: b("number"),
      object: b("object"),
      string: b("string"),
      symbol: b("symbol"),
      any: C(),
      arrayOf: O,
      element: w(),
      elementType: S(),
      instanceOf: P,
      node: $(),
      objectOf: F,
      oneOf: M,
      oneOfType: A,
      shape: v,
      exact: D
    };
    function h(V, R) {
      return V === R ? V !== 0 || 1 / V === 1 / R : V !== V && R !== R;
    }
    function p(V, R) {
      this.message = V, this.data = R && typeof R == "object" ? R : {}, this.stack = "";
    }
    p.prototype = Error.prototype;
    function m(V) {
      if (process.env.NODE_ENV !== "production")
        var R = {}, B = 0;
      function H(te, ee, J, ie, re, q, X) {
        if (ie = ie || y, q = q || J, X !== n) {
          if (c) {
            var z = new Error(
              "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
            );
            throw z.name = "Invariant Violation", z;
          } else if (process.env.NODE_ENV !== "production" && typeof console < "u") {
            var ne = ie + ":" + J;
            !R[ne] && // Avoid spamming the console because they are often not actionable except for lib authors
            B < 3 && (i(
              "You are manually calling a React.PropTypes validation function for the `" + q + "` prop on `" + ie + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
            ), R[ne] = !0, B++);
          }
        }
        return ee[J] == null ? te ? ee[J] === null ? new p("The " + re + " `" + q + "` is marked as required " + ("in `" + ie + "`, but its value is `null`.")) : new p("The " + re + " `" + q + "` is marked as required in " + ("`" + ie + "`, but its value is `undefined`.")) : null : V(ee, J, ie, re, q);
      }
      var K = H.bind(null, !1);
      return K.isRequired = H.bind(null, !0), K;
    }
    function b(V) {
      function R(B, H, K, te, ee, J) {
        var ie = B[H], re = N(ie);
        if (re !== V) {
          var q = _(ie);
          return new p(
            "Invalid " + te + " `" + ee + "` of type " + ("`" + q + "` supplied to `" + K + "`, expected ") + ("`" + V + "`."),
            { expectedType: V }
          );
        }
        return null;
      }
      return m(R);
    }
    function C() {
      return m(a);
    }
    function O(V) {
      function R(B, H, K, te, ee) {
        if (typeof V != "function")
          return new p("Property `" + ee + "` of component `" + K + "` has invalid PropType notation inside arrayOf.");
        var J = B[H];
        if (!Array.isArray(J)) {
          var ie = N(J);
          return new p("Invalid " + te + " `" + ee + "` of type " + ("`" + ie + "` supplied to `" + K + "`, expected an array."));
        }
        for (var re = 0; re < J.length; re++) {
          var q = V(J, re, K, te, ee + "[" + re + "]", n);
          if (q instanceof Error)
            return q;
        }
        return null;
      }
      return m(R);
    }
    function w() {
      function V(R, B, H, K, te) {
        var ee = R[B];
        if (!l(ee)) {
          var J = N(ee);
          return new p("Invalid " + K + " `" + te + "` of type " + ("`" + J + "` supplied to `" + H + "`, expected a single ReactElement."));
        }
        return null;
      }
      return m(V);
    }
    function S() {
      function V(R, B, H, K, te) {
        var ee = R[B];
        if (!e.isValidElementType(ee)) {
          var J = N(ee);
          return new p("Invalid " + K + " `" + te + "` of type " + ("`" + J + "` supplied to `" + H + "`, expected a single ReactElement type."));
        }
        return null;
      }
      return m(V);
    }
    function P(V) {
      function R(B, H, K, te, ee) {
        if (!(B[H] instanceof V)) {
          var J = V.name || y, ie = L(B[H]);
          return new p("Invalid " + te + " `" + ee + "` of type " + ("`" + ie + "` supplied to `" + K + "`, expected ") + ("instance of `" + J + "`."));
        }
        return null;
      }
      return m(R);
    }
    function M(V) {
      if (!Array.isArray(V))
        return process.env.NODE_ENV !== "production" && (arguments.length > 1 ? i(
          "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
        ) : i("Invalid argument supplied to oneOf, expected an array.")), a;
      function R(B, H, K, te, ee) {
        for (var J = B[H], ie = 0; ie < V.length; ie++)
          if (h(J, V[ie]))
            return null;
        var re = JSON.stringify(V, function(X, z) {
          var ne = _(z);
          return ne === "symbol" ? String(z) : z;
        });
        return new p("Invalid " + te + " `" + ee + "` of value `" + String(J) + "` " + ("supplied to `" + K + "`, expected one of " + re + "."));
      }
      return m(R);
    }
    function F(V) {
      function R(B, H, K, te, ee) {
        if (typeof V != "function")
          return new p("Property `" + ee + "` of component `" + K + "` has invalid PropType notation inside objectOf.");
        var J = B[H], ie = N(J);
        if (ie !== "object")
          return new p("Invalid " + te + " `" + ee + "` of type " + ("`" + ie + "` supplied to `" + K + "`, expected an object."));
        for (var re in J)
          if (r(J, re)) {
            var q = V(J, re, K, te, ee + "." + re, n);
            if (q instanceof Error)
              return q;
          }
        return null;
      }
      return m(R);
    }
    function A(V) {
      if (!Array.isArray(V))
        return process.env.NODE_ENV !== "production" && i("Invalid argument supplied to oneOfType, expected an instance of array."), a;
      for (var R = 0; R < V.length; R++) {
        var B = V[R];
        if (typeof B != "function")
          return i(
            "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + G(B) + " at index " + R + "."
          ), a;
      }
      function H(K, te, ee, J, ie) {
        for (var re = [], q = 0; q < V.length; q++) {
          var X = V[q], z = X(K, te, ee, J, ie, n);
          if (z == null)
            return null;
          z.data && r(z.data, "expectedType") && re.push(z.data.expectedType);
        }
        var ne = re.length > 0 ? ", expected one of type [" + re.join(", ") + "]" : "";
        return new p("Invalid " + J + " `" + ie + "` supplied to " + ("`" + ee + "`" + ne + "."));
      }
      return m(H);
    }
    function $() {
      function V(R, B, H, K, te) {
        return T(R[B]) ? null : new p("Invalid " + K + " `" + te + "` supplied to " + ("`" + H + "`, expected a ReactNode."));
      }
      return m(V);
    }
    function k(V, R, B, H, K) {
      return new p(
        (V || "React class") + ": " + R + " type `" + B + "." + H + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + K + "`."
      );
    }
    function v(V) {
      function R(B, H, K, te, ee) {
        var J = B[H], ie = N(J);
        if (ie !== "object")
          return new p("Invalid " + te + " `" + ee + "` of type `" + ie + "` " + ("supplied to `" + K + "`, expected `object`."));
        for (var re in V) {
          var q = V[re];
          if (typeof q != "function")
            return k(K, te, ee, re, _(q));
          var X = q(J, re, K, te, ee + "." + re, n);
          if (X)
            return X;
        }
        return null;
      }
      return m(R);
    }
    function D(V) {
      function R(B, H, K, te, ee) {
        var J = B[H], ie = N(J);
        if (ie !== "object")
          return new p("Invalid " + te + " `" + ee + "` of type `" + ie + "` " + ("supplied to `" + K + "`, expected `object`."));
        var re = t({}, B[H], V);
        for (var q in re) {
          var X = V[q];
          if (r(V, q) && typeof X != "function")
            return k(K, te, ee, q, _(X));
          if (!X)
            return new p(
              "Invalid " + te + " `" + ee + "` key `" + q + "` supplied to `" + K + "`.\nBad object: " + JSON.stringify(B[H], null, "  ") + `
Valid keys: ` + JSON.stringify(Object.keys(V), null, "  ")
            );
          var z = X(J, q, K, te, ee + "." + q, n);
          if (z)
            return z;
        }
        return null;
      }
      return m(R);
    }
    function T(V) {
      switch (typeof V) {
        case "number":
        case "string":
        case "undefined":
          return !0;
        case "boolean":
          return !V;
        case "object":
          if (Array.isArray(V))
            return V.every(T);
          if (V === null || l(V))
            return !0;
          var R = f(V);
          if (R) {
            var B = R.call(V), H;
            if (R !== V.entries) {
              for (; !(H = B.next()).done; )
                if (!T(H.value))
                  return !1;
            } else
              for (; !(H = B.next()).done; ) {
                var K = H.value;
                if (K && !T(K[1]))
                  return !1;
              }
          } else
            return !1;
          return !0;
        default:
          return !1;
      }
    }
    function I(V, R) {
      return V === "symbol" ? !0 : R ? R["@@toStringTag"] === "Symbol" || typeof Symbol == "function" && R instanceof Symbol : !1;
    }
    function N(V) {
      var R = typeof V;
      return Array.isArray(V) ? "array" : V instanceof RegExp ? "object" : I(R, V) ? "symbol" : R;
    }
    function _(V) {
      if (typeof V > "u" || V === null)
        return "" + V;
      var R = N(V);
      if (R === "object") {
        if (V instanceof Date)
          return "date";
        if (V instanceof RegExp)
          return "regexp";
      }
      return R;
    }
    function G(V) {
      var R = _(V);
      switch (R) {
        case "array":
        case "object":
          return "an " + R;
        case "boolean":
        case "date":
        case "regexp":
          return "a " + R;
        default:
          return R;
      }
    }
    function L(V) {
      return !V.constructor || !V.constructor.name ? y : V.constructor.name;
    }
    return g.checkPropTypes = s, g.resetWarningCache = s.resetWarningCache, g.PropTypes = g, g;
  }, Gi;
}
var Xi, Ic;
function gy() {
  if (Ic) return Xi;
  Ic = 1;
  var e = /* @__PURE__ */ nl();
  function t() {
  }
  function n() {
  }
  return n.resetWarningCache = t, Xi = function() {
    function r(a, l, c, u, d, f) {
      if (f !== e) {
        var y = new Error(
          "Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types"
        );
        throw y.name = "Invariant Violation", y;
      }
    }
    r.isRequired = r;
    function s() {
      return r;
    }
    var i = {
      array: r,
      bigint: r,
      bool: r,
      func: r,
      number: r,
      object: r,
      string: r,
      symbol: r,
      any: r,
      arrayOf: s,
      element: r,
      elementType: r,
      instanceOf: s,
      node: r,
      objectOf: s,
      oneOf: s,
      oneOfType: s,
      shape: s,
      exact: s,
      checkPropTypes: n,
      resetWarningCache: t
    };
    return i.PropTypes = i, i;
  }, Xi;
}
var Nc;
function by() {
  if (Nc) return ps.exports;
  if (Nc = 1, process.env.NODE_ENV !== "production") {
    var e = af(), t = !0;
    ps.exports = /* @__PURE__ */ yy()(e.isElement, t);
  } else
    ps.exports = /* @__PURE__ */ gy()();
  return ps.exports;
}
var vy = /* @__PURE__ */ by();
const o = /* @__PURE__ */ of(vy), dt = typeof window < "u" ? x.useLayoutEffect : x.useEffect;
function cf(e) {
  var t, n, r = "";
  if (typeof e == "string" || typeof e == "number") r += e;
  else if (typeof e == "object") if (Array.isArray(e)) {
    var s = e.length;
    for (t = 0; t < s; t++) e[t] && (n = cf(e[t])) && (r && (r += " "), r += n);
  } else for (n in e) e[n] && (r && (r += " "), r += n);
  return r;
}
function pe() {
  for (var e, t, n = 0, r = "", s = arguments.length; n < s; n++) (e = arguments[n]) && (t = cf(e)) && (r && (r += " "), r += t);
  return r;
}
function Po(e, t, n = !1) {
  const r = {
    ...t
  };
  for (const s in e)
    if (Object.prototype.hasOwnProperty.call(e, s)) {
      const i = s;
      if (i === "components" || i === "slots")
        r[i] = {
          ...e[i],
          ...r[i]
        };
      else if (i === "componentsProps" || i === "slotProps") {
        const a = e[i], l = t[i];
        if (!l)
          r[i] = a || {};
        else if (!a)
          r[i] = l;
        else {
          r[i] = {
            ...l
          };
          for (const c in a)
            if (Object.prototype.hasOwnProperty.call(a, c)) {
              const u = c;
              r[i][u] = Po(a[u], l[u], n);
            }
        }
      } else i === "className" && n && t.className ? r.className = pe(e?.className, t?.className) : i === "style" && n && t.style ? r.style = {
        ...e?.style,
        ...t?.style
      } : r[i] === void 0 && (r[i] = e[i]);
    }
  return r;
}
function uf(e) {
  const {
    theme: t,
    name: n,
    props: r
  } = e;
  return !t || !t.components || !t.components[n] || !t.components[n].defaultProps ? r : Po(t.components[n].defaultProps, r);
}
var ms = { exports: {} }, ze = {};
/**
 * @license React
 * react-is.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var Ac;
function xy() {
  if (Ac) return ze;
  Ac = 1;
  var e = Symbol.for("react.transitional.element"), t = Symbol.for("react.portal"), n = Symbol.for("react.fragment"), r = Symbol.for("react.strict_mode"), s = Symbol.for("react.profiler"), i = Symbol.for("react.consumer"), a = Symbol.for("react.context"), l = Symbol.for("react.forward_ref"), c = Symbol.for("react.suspense"), u = Symbol.for("react.suspense_list"), d = Symbol.for("react.memo"), f = Symbol.for("react.lazy"), y = Symbol.for("react.view_transition"), g = Symbol.for("react.client.reference");
  function h(p) {
    if (typeof p == "object" && p !== null) {
      var m = p.$$typeof;
      switch (m) {
        case e:
          switch (p = p.type, p) {
            case n:
            case s:
            case r:
            case c:
            case u:
            case y:
              return p;
            default:
              switch (p = p && p.$$typeof, p) {
                case a:
                case l:
                case f:
                case d:
                  return p;
                case i:
                  return p;
                default:
                  return m;
              }
          }
        case t:
          return m;
      }
    }
  }
  return ze.ContextConsumer = i, ze.ContextProvider = a, ze.Element = e, ze.ForwardRef = l, ze.Fragment = n, ze.Lazy = f, ze.Memo = d, ze.Portal = t, ze.Profiler = s, ze.StrictMode = r, ze.Suspense = c, ze.SuspenseList = u, ze.isContextConsumer = function(p) {
    return h(p) === i;
  }, ze.isContextProvider = function(p) {
    return h(p) === a;
  }, ze.isElement = function(p) {
    return typeof p == "object" && p !== null && p.$$typeof === e;
  }, ze.isForwardRef = function(p) {
    return h(p) === l;
  }, ze.isFragment = function(p) {
    return h(p) === n;
  }, ze.isLazy = function(p) {
    return h(p) === f;
  }, ze.isMemo = function(p) {
    return h(p) === d;
  }, ze.isPortal = function(p) {
    return h(p) === t;
  }, ze.isProfiler = function(p) {
    return h(p) === s;
  }, ze.isStrictMode = function(p) {
    return h(p) === r;
  }, ze.isSuspense = function(p) {
    return h(p) === c;
  }, ze.isSuspenseList = function(p) {
    return h(p) === u;
  }, ze.isValidElementType = function(p) {
    return typeof p == "string" || typeof p == "function" || p === n || p === s || p === r || p === c || p === u || typeof p == "object" && p !== null && (p.$$typeof === f || p.$$typeof === d || p.$$typeof === a || p.$$typeof === i || p.$$typeof === l || p.$$typeof === g || p.getModuleId !== void 0);
  }, ze.typeOf = h, ze;
}
var Ue = {};
/**
 * @license React
 * react-is.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var Fc;
function wy() {
  return Fc || (Fc = 1, process.env.NODE_ENV !== "production" && (function() {
    function e(p) {
      if (typeof p == "object" && p !== null) {
        var m = p.$$typeof;
        switch (m) {
          case t:
            switch (p = p.type, p) {
              case r:
              case i:
              case s:
              case u:
              case d:
              case g:
                return p;
              default:
                switch (p = p && p.$$typeof, p) {
                  case l:
                  case c:
                  case y:
                  case f:
                    return p;
                  case a:
                    return p;
                  default:
                    return m;
                }
            }
          case n:
            return m;
        }
      }
    }
    var t = Symbol.for("react.transitional.element"), n = Symbol.for("react.portal"), r = Symbol.for("react.fragment"), s = Symbol.for("react.strict_mode"), i = Symbol.for("react.profiler"), a = Symbol.for("react.consumer"), l = Symbol.for("react.context"), c = Symbol.for("react.forward_ref"), u = Symbol.for("react.suspense"), d = Symbol.for("react.suspense_list"), f = Symbol.for("react.memo"), y = Symbol.for("react.lazy"), g = Symbol.for("react.view_transition"), h = Symbol.for("react.client.reference");
    Ue.ContextConsumer = a, Ue.ContextProvider = l, Ue.Element = t, Ue.ForwardRef = c, Ue.Fragment = r, Ue.Lazy = y, Ue.Memo = f, Ue.Portal = n, Ue.Profiler = i, Ue.StrictMode = s, Ue.Suspense = u, Ue.SuspenseList = d, Ue.isContextConsumer = function(p) {
      return e(p) === a;
    }, Ue.isContextProvider = function(p) {
      return e(p) === l;
    }, Ue.isElement = function(p) {
      return typeof p == "object" && p !== null && p.$$typeof === t;
    }, Ue.isForwardRef = function(p) {
      return e(p) === c;
    }, Ue.isFragment = function(p) {
      return e(p) === r;
    }, Ue.isLazy = function(p) {
      return e(p) === y;
    }, Ue.isMemo = function(p) {
      return e(p) === f;
    }, Ue.isPortal = function(p) {
      return e(p) === n;
    }, Ue.isProfiler = function(p) {
      return e(p) === i;
    }, Ue.isStrictMode = function(p) {
      return e(p) === s;
    }, Ue.isSuspense = function(p) {
      return e(p) === u;
    }, Ue.isSuspenseList = function(p) {
      return e(p) === d;
    }, Ue.isValidElementType = function(p) {
      return typeof p == "string" || typeof p == "function" || p === r || p === i || p === s || p === u || p === d || typeof p == "object" && p !== null && (p.$$typeof === y || p.$$typeof === f || p.$$typeof === l || p.$$typeof === a || p.$$typeof === c || p.$$typeof === h || p.getModuleId !== void 0);
    }, Ue.typeOf = e;
  })()), Ue;
}
var $c;
function Sy() {
  return $c || ($c = 1, process.env.NODE_ENV === "production" ? ms.exports = /* @__PURE__ */ xy() : ms.exports = /* @__PURE__ */ wy()), ms.exports;
}
var lr = /* @__PURE__ */ Sy();
function Jt(e) {
  if (typeof e != "object" || e === null)
    return !1;
  const t = Object.getPrototypeOf(e);
  return (t === null || t === Object.prototype || Object.getPrototypeOf(t) === null) && !(Symbol.toStringTag in e) && !(Symbol.iterator in e);
}
function df(e) {
  if (/* @__PURE__ */ x.isValidElement(e) || lr.isValidElementType(e) || !Jt(e))
    return e;
  const t = {};
  return Object.keys(e).forEach((n) => {
    t[n] = df(e[n]);
  }), t;
}
function wt(e, t, n = {
  clone: !0
}) {
  const r = n.clone ? {
    ...e
  } : e;
  return Jt(e) && Jt(t) && Object.keys(t).forEach((s) => {
    /* @__PURE__ */ x.isValidElement(t[s]) || lr.isValidElementType(t[s]) ? r[s] = t[s] : Jt(t[s]) && // Avoid prototype pollution
    Object.prototype.hasOwnProperty.call(e, s) && Jt(e[s]) ? r[s] = wt(e[s], t[s], n) : n.clone ? r[s] = Jt(t[s]) ? df(t[s]) : t[s] : r[s] = t[s];
  }), r;
}
const Ey = (e) => {
  const t = Object.keys(e).map((n) => ({
    key: n,
    val: e[n]
  })) || [];
  return t.sort((n, r) => n.val - r.val), t.reduce((n, r) => ({
    ...n,
    [r.key]: r.val
  }), {});
};
function Oy(e) {
  const {
    // The breakpoint **start** at this value.
    // For instance with the first breakpoint xs: [xs, sm).
    values: t = {
      xs: 0,
      // phone
      sm: 600,
      // tablet
      md: 900,
      // small laptop
      lg: 1200,
      // desktop
      xl: 1536
      // large screen
    },
    unit: n = "px",
    step: r = 5,
    ...s
  } = e, i = Ey(t), a = Object.keys(i);
  function l(y) {
    return `@media (min-width:${typeof t[y] == "number" ? t[y] : y}${n})`;
  }
  function c(y) {
    return `@media (max-width:${(typeof t[y] == "number" ? t[y] : y) - r / 100}${n})`;
  }
  function u(y, g) {
    const h = a.indexOf(g);
    return `@media (min-width:${typeof t[y] == "number" ? t[y] : y}${n}) and (max-width:${(h !== -1 && typeof t[a[h]] == "number" ? t[a[h]] : g) - r / 100}${n})`;
  }
  function d(y) {
    return a.indexOf(y) + 1 < a.length ? u(y, a[a.indexOf(y) + 1]) : l(y);
  }
  function f(y) {
    const g = a.indexOf(y);
    return g === 0 ? l(a[1]) : g === a.length - 1 ? c(a[g]) : u(y, a[a.indexOf(y) + 1]).replace("@media", "@media not all and");
  }
  return {
    keys: a,
    values: i,
    up: l,
    down: c,
    between: u,
    only: d,
    not: f,
    unit: n,
    ...s
  };
}
function sn(e, ...t) {
  const n = new URL(`https://mui.com/production-error/?code=${e}`);
  return t.forEach((r) => n.searchParams.append("args[]", r)), `Minified MUI error #${e}; visit ${n} for the full message.`;
}
function jc(e, t) {
  if (!e.containerQueries)
    return t;
  const n = Object.keys(t).filter((r) => r.startsWith("@container")).sort((r, s) => {
    const i = /min-width:\s*([0-9.]+)/;
    return +(r.match(i)?.[1] || 0) - +(s.match(i)?.[1] || 0);
  });
  return n.length ? n.reduce((r, s) => {
    const i = t[s];
    return delete r[s], r[s] = i, r;
  }, {
    ...t
  }) : t;
}
function Cy(e, t) {
  return t === "@" || t.startsWith("@") && (e.some((n) => t.startsWith(`@${n}`)) || !!t.match(/^@\d/));
}
function Py(e, t) {
  const n = t.match(/^@([^/]+)?\/?(.+)?$/);
  if (!n) {
    if (process.env.NODE_ENV !== "production")
      throw new Error(process.env.NODE_ENV !== "production" ? `MUI: The provided shorthand ${`(${t})`} is invalid. The format should be \`@<breakpoint | number>\` or \`@<breakpoint | number>/<container>\`.
For example, \`@sm\` or \`@600\` or \`@40rem/sidebar\`.` : sn(18, `(${t})`));
    return null;
  }
  const [, r, s] = n, i = Number.isNaN(+r) ? r || 0 : +r;
  return e.containerQueries(s).up(i);
}
function Ty(e) {
  const t = (i, a) => i.replace("@media", a ? `@container ${a}` : "@container");
  function n(i, a) {
    i.up = (...l) => t(e.breakpoints.up(...l), a), i.down = (...l) => t(e.breakpoints.down(...l), a), i.between = (...l) => t(e.breakpoints.between(...l), a), i.only = (...l) => t(e.breakpoints.only(...l), a), i.not = (...l) => {
      const c = t(e.breakpoints.not(...l), a);
      return c.includes("not all and") ? c.replace("not all and ", "").replace("min-width:", "width<").replace("max-width:", "width>").replace("and", "or") : c;
    };
  }
  const r = {}, s = (i) => (n(r, i), r);
  return n(s), {
    ...e,
    containerQueries: s
  };
}
const Ry = {
  borderRadius: 4
}, jn = process.env.NODE_ENV !== "production" ? o.oneOfType([o.number, o.string, o.object, o.array]) : {};
function bo(e, t) {
  return t ? wt(e, t, {
    clone: !1
    // No need to clone deep, it's way faster.
  }) : e;
}
const ti = {
  xs: 0,
  // phone
  sm: 600,
  // tablet
  md: 900,
  // small laptop
  lg: 1200,
  // desktop
  xl: 1536
  // large screen
}, _c = {
  // Sorted ASC by size. That's important.
  // It can't be configured as it's used statically for propTypes.
  keys: ["xs", "sm", "md", "lg", "xl"],
  up: (e) => `@media (min-width:${ti[e]}px)`
}, ky = {
  containerQueries: (e) => ({
    up: (t) => {
      let n = typeof t == "number" ? t : ti[t] || t;
      return typeof n == "number" && (n = `${n}px`), e ? `@container ${e} (min-width:${n})` : `@container (min-width:${n})`;
    }
  })
};
function yn(e, t, n) {
  const r = e.theme || {};
  if (Array.isArray(t)) {
    const i = r.breakpoints || _c;
    return t.reduce((a, l, c) => (a[i.up(i.keys[c])] = n(t[c]), a), {});
  }
  if (typeof t == "object") {
    const i = r.breakpoints || _c;
    return Object.keys(t).reduce((a, l) => {
      if (Cy(i.keys, l)) {
        const c = Py(r.containerQueries ? r : ky, l);
        c && (a[c] = n(t[l], l));
      } else if (Object.keys(i.values || ti).includes(l)) {
        const c = i.up(l);
        a[c] = n(t[l], l);
      } else {
        const c = l;
        a[c] = t[c];
      }
      return a;
    }, {});
  }
  return n(t);
}
function Dy(e = {}) {
  return e.keys?.reduce((n, r) => {
    const s = e.up(r);
    return n[s] = {}, n;
  }, {}) || {};
}
function Vc(e, t) {
  return e.reduce((n, r) => {
    const s = n[r];
    return (!s || Object.keys(s).length === 0) && delete n[r], n;
  }, t);
}
function le(e) {
  if (typeof e != "string")
    throw new Error(process.env.NODE_ENV !== "production" ? "MUI: `capitalize(string)` expects a string argument." : sn(7));
  return e.charAt(0).toUpperCase() + e.slice(1);
}
function ni(e, t, n = !0) {
  if (!t || typeof t != "string")
    return null;
  if (e && e.vars && n) {
    const r = `vars.${t}`.split(".").reduce((s, i) => s && s[i] ? s[i] : null, e);
    if (r != null)
      return r;
  }
  return t.split(".").reduce((r, s) => r && r[s] != null ? r[s] : null, e);
}
function _s(e, t, n, r = n) {
  let s;
  return typeof e == "function" ? s = e(n) : Array.isArray(e) ? s = e[n] || r : s = ni(e, n) || r, t && (s = t(s, r, e)), s;
}
function at(e) {
  const {
    prop: t,
    cssProperty: n = e.prop,
    themeKey: r,
    transform: s
  } = e, i = (a) => {
    if (a[t] == null)
      return null;
    const l = a[t], c = a.theme, u = ni(c, r) || {};
    return yn(a, l, (f) => {
      let y = _s(u, s, f);
      return f === y && typeof f == "string" && (y = _s(u, s, `${t}${f === "default" ? "" : le(f)}`, f)), n === !1 ? y : {
        [n]: y
      };
    });
  };
  return i.propTypes = process.env.NODE_ENV !== "production" ? {
    [t]: jn
  } : {}, i.filterProps = [t], i;
}
function My(e) {
  const t = {};
  return (n) => (t[n] === void 0 && (t[n] = e(n)), t[n]);
}
const Iy = {
  m: "margin",
  p: "padding"
}, Ny = {
  t: "Top",
  r: "Right",
  b: "Bottom",
  l: "Left",
  x: ["Left", "Right"],
  y: ["Top", "Bottom"]
}, Lc = {
  marginX: "mx",
  marginY: "my",
  paddingX: "px",
  paddingY: "py"
}, Ay = My((e) => {
  if (e.length > 2)
    if (Lc[e])
      e = Lc[e];
    else
      return [e];
  const [t, n] = e.split(""), r = Iy[t], s = Ny[n] || "";
  return Array.isArray(s) ? s.map((i) => r + i) : [r + s];
}), ri = ["m", "mt", "mr", "mb", "ml", "mx", "my", "margin", "marginTop", "marginRight", "marginBottom", "marginLeft", "marginX", "marginY", "marginInline", "marginInlineStart", "marginInlineEnd", "marginBlock", "marginBlockStart", "marginBlockEnd"], oi = ["p", "pt", "pr", "pb", "pl", "px", "py", "padding", "paddingTop", "paddingRight", "paddingBottom", "paddingLeft", "paddingX", "paddingY", "paddingInline", "paddingInlineStart", "paddingInlineEnd", "paddingBlock", "paddingBlockStart", "paddingBlockEnd"], Fy = [...ri, ...oi];
function Uo(e, t, n, r) {
  const s = ni(e, t, !0) ?? n;
  return typeof s == "number" || typeof s == "string" ? (i) => typeof i == "string" ? i : (process.env.NODE_ENV !== "production" && typeof i != "number" && console.error(`MUI: Expected ${r} argument to be a number or a string, got ${i}.`), typeof s == "string" ? s.startsWith("var(") && i === 0 ? 0 : s.startsWith("var(") && i === 1 ? s : `calc(${i} * ${s})` : s * i) : Array.isArray(s) ? (i) => {
    if (typeof i == "string")
      return i;
    const a = Math.abs(i);
    process.env.NODE_ENV !== "production" && (Number.isInteger(a) ? a > s.length - 1 && console.error([`MUI: The value provided (${a}) overflows.`, `The supported values are: ${JSON.stringify(s)}.`, `${a} > ${s.length - 1}, you need to add the missing values.`].join(`
`)) : console.error([`MUI: The \`theme.${t}\` array type cannot be combined with non integer values.You should either use an integer value that can be used as index, or define the \`theme.${t}\` as a number.`].join(`
`)));
    const l = s[a];
    return i >= 0 ? l : typeof l == "number" ? -l : typeof l == "string" && l.startsWith("var(") ? `calc(-1 * ${l})` : `-${l}`;
  } : typeof s == "function" ? s : (process.env.NODE_ENV !== "production" && console.error([`MUI: The \`theme.${t}\` value (${s}) is invalid.`, "It should be a number, an array or a function."].join(`
`)), () => {
  });
}
function rl(e) {
  return Uo(e, "spacing", 8, "spacing");
}
function qo(e, t) {
  return typeof t == "string" || t == null ? t : e(t);
}
function $y(e, t) {
  return (n) => e.reduce((r, s) => (r[s] = qo(t, n), r), {});
}
function jy(e, t, n, r) {
  if (!t.includes(n))
    return null;
  const s = Ay(n), i = $y(s, r), a = e[n];
  return yn(e, a, i);
}
function ff(e, t) {
  const n = rl(e.theme);
  return Object.keys(e).map((r) => jy(e, t, r, n)).reduce(bo, {});
}
function tt(e) {
  return ff(e, ri);
}
tt.propTypes = process.env.NODE_ENV !== "production" ? ri.reduce((e, t) => (e[t] = jn, e), {}) : {};
tt.filterProps = ri;
function nt(e) {
  return ff(e, oi);
}
nt.propTypes = process.env.NODE_ENV !== "production" ? oi.reduce((e, t) => (e[t] = jn, e), {}) : {};
nt.filterProps = oi;
process.env.NODE_ENV !== "production" && Fy.reduce((e, t) => (e[t] = jn, e), {});
function pf(e = 8, t = rl({
  spacing: e
})) {
  if (e.mui)
    return e;
  const n = (...r) => (process.env.NODE_ENV !== "production" && (r.length <= 4 || console.error(`MUI: Too many arguments provided, expected between 0 and 4, got ${r.length}`)), (r.length === 0 ? [1] : r).map((i) => {
    const a = t(i);
    return typeof a == "number" ? `${a}px` : a;
  }).join(" "));
  return n.mui = !0, n;
}
function si(...e) {
  const t = e.reduce((r, s) => (s.filterProps.forEach((i) => {
    r[i] = s;
  }), r), {}), n = (r) => Object.keys(r).reduce((s, i) => t[i] ? bo(s, t[i](r)) : s, {});
  return n.propTypes = process.env.NODE_ENV !== "production" ? e.reduce((r, s) => Object.assign(r, s.propTypes), {}) : {}, n.filterProps = e.reduce((r, s) => r.concat(s.filterProps), []), n;
}
function Ft(e) {
  return typeof e != "number" ? e : `${e}px solid`;
}
function Lt(e, t) {
  return at({
    prop: e,
    themeKey: "borders",
    transform: t
  });
}
const _y = Lt("border", Ft), Vy = Lt("borderTop", Ft), Ly = Lt("borderRight", Ft), By = Lt("borderBottom", Ft), Wy = Lt("borderLeft", Ft), zy = Lt("borderColor"), Uy = Lt("borderTopColor"), qy = Lt("borderRightColor"), Hy = Lt("borderBottomColor"), Yy = Lt("borderLeftColor"), Ky = Lt("outline", Ft), Gy = Lt("outlineColor"), ii = (e) => {
  if (e.borderRadius !== void 0 && e.borderRadius !== null) {
    const t = Uo(e.theme, "shape.borderRadius", 4, "borderRadius"), n = (r) => ({
      borderRadius: qo(t, r)
    });
    return yn(e, e.borderRadius, n);
  }
  return null;
};
ii.propTypes = process.env.NODE_ENV !== "production" ? {
  borderRadius: jn
} : {};
ii.filterProps = ["borderRadius"];
si(_y, Vy, Ly, By, Wy, zy, Uy, qy, Hy, Yy, ii, Ky, Gy);
const ai = (e) => {
  if (e.gap !== void 0 && e.gap !== null) {
    const t = Uo(e.theme, "spacing", 8, "gap"), n = (r) => ({
      gap: qo(t, r)
    });
    return yn(e, e.gap, n);
  }
  return null;
};
ai.propTypes = process.env.NODE_ENV !== "production" ? {
  gap: jn
} : {};
ai.filterProps = ["gap"];
const li = (e) => {
  if (e.columnGap !== void 0 && e.columnGap !== null) {
    const t = Uo(e.theme, "spacing", 8, "columnGap"), n = (r) => ({
      columnGap: qo(t, r)
    });
    return yn(e, e.columnGap, n);
  }
  return null;
};
li.propTypes = process.env.NODE_ENV !== "production" ? {
  columnGap: jn
} : {};
li.filterProps = ["columnGap"];
const ci = (e) => {
  if (e.rowGap !== void 0 && e.rowGap !== null) {
    const t = Uo(e.theme, "spacing", 8, "rowGap"), n = (r) => ({
      rowGap: qo(t, r)
    });
    return yn(e, e.rowGap, n);
  }
  return null;
};
ci.propTypes = process.env.NODE_ENV !== "production" ? {
  rowGap: jn
} : {};
ci.filterProps = ["rowGap"];
const Xy = at({
  prop: "gridColumn"
}), Qy = at({
  prop: "gridRow"
}), Zy = at({
  prop: "gridAutoFlow"
}), Jy = at({
  prop: "gridAutoColumns"
}), eg = at({
  prop: "gridAutoRows"
}), tg = at({
  prop: "gridTemplateColumns"
}), ng = at({
  prop: "gridTemplateRows"
}), rg = at({
  prop: "gridTemplateAreas"
}), og = at({
  prop: "gridArea"
});
si(ai, li, ci, Xy, Qy, Zy, Jy, eg, tg, ng, rg, og);
function Rr(e, t) {
  return t === "grey" ? t : e;
}
const sg = at({
  prop: "color",
  themeKey: "palette",
  transform: Rr
}), ig = at({
  prop: "bgcolor",
  cssProperty: "backgroundColor",
  themeKey: "palette",
  transform: Rr
}), ag = at({
  prop: "backgroundColor",
  themeKey: "palette",
  transform: Rr
});
si(sg, ig, ag);
function Dt(e) {
  return e <= 1 && e !== 0 ? `${e * 100}%` : e;
}
const lg = at({
  prop: "width",
  transform: Dt
}), ol = (e) => {
  if (e.maxWidth !== void 0 && e.maxWidth !== null) {
    const t = (n) => {
      const r = e.theme?.breakpoints?.values?.[n] || ti[n];
      return r ? e.theme?.breakpoints?.unit !== "px" ? {
        maxWidth: `${r}${e.theme.breakpoints.unit}`
      } : {
        maxWidth: r
      } : {
        maxWidth: Dt(n)
      };
    };
    return yn(e, e.maxWidth, t);
  }
  return null;
};
ol.filterProps = ["maxWidth"];
const cg = at({
  prop: "minWidth",
  transform: Dt
}), ug = at({
  prop: "height",
  transform: Dt
}), dg = at({
  prop: "maxHeight",
  transform: Dt
}), fg = at({
  prop: "minHeight",
  transform: Dt
});
at({
  prop: "size",
  cssProperty: "width",
  transform: Dt
});
at({
  prop: "size",
  cssProperty: "height",
  transform: Dt
});
const pg = at({
  prop: "boxSizing"
});
si(lg, ol, cg, ug, dg, fg, pg);
const Ho = {
  // borders
  border: {
    themeKey: "borders",
    transform: Ft
  },
  borderTop: {
    themeKey: "borders",
    transform: Ft
  },
  borderRight: {
    themeKey: "borders",
    transform: Ft
  },
  borderBottom: {
    themeKey: "borders",
    transform: Ft
  },
  borderLeft: {
    themeKey: "borders",
    transform: Ft
  },
  borderColor: {
    themeKey: "palette"
  },
  borderTopColor: {
    themeKey: "palette"
  },
  borderRightColor: {
    themeKey: "palette"
  },
  borderBottomColor: {
    themeKey: "palette"
  },
  borderLeftColor: {
    themeKey: "palette"
  },
  outline: {
    themeKey: "borders",
    transform: Ft
  },
  outlineColor: {
    themeKey: "palette"
  },
  borderRadius: {
    themeKey: "shape.borderRadius",
    style: ii
  },
  // palette
  color: {
    themeKey: "palette",
    transform: Rr
  },
  bgcolor: {
    themeKey: "palette",
    cssProperty: "backgroundColor",
    transform: Rr
  },
  backgroundColor: {
    themeKey: "palette",
    transform: Rr
  },
  // spacing
  p: {
    style: nt
  },
  pt: {
    style: nt
  },
  pr: {
    style: nt
  },
  pb: {
    style: nt
  },
  pl: {
    style: nt
  },
  px: {
    style: nt
  },
  py: {
    style: nt
  },
  padding: {
    style: nt
  },
  paddingTop: {
    style: nt
  },
  paddingRight: {
    style: nt
  },
  paddingBottom: {
    style: nt
  },
  paddingLeft: {
    style: nt
  },
  paddingX: {
    style: nt
  },
  paddingY: {
    style: nt
  },
  paddingInline: {
    style: nt
  },
  paddingInlineStart: {
    style: nt
  },
  paddingInlineEnd: {
    style: nt
  },
  paddingBlock: {
    style: nt
  },
  paddingBlockStart: {
    style: nt
  },
  paddingBlockEnd: {
    style: nt
  },
  m: {
    style: tt
  },
  mt: {
    style: tt
  },
  mr: {
    style: tt
  },
  mb: {
    style: tt
  },
  ml: {
    style: tt
  },
  mx: {
    style: tt
  },
  my: {
    style: tt
  },
  margin: {
    style: tt
  },
  marginTop: {
    style: tt
  },
  marginRight: {
    style: tt
  },
  marginBottom: {
    style: tt
  },
  marginLeft: {
    style: tt
  },
  marginX: {
    style: tt
  },
  marginY: {
    style: tt
  },
  marginInline: {
    style: tt
  },
  marginInlineStart: {
    style: tt
  },
  marginInlineEnd: {
    style: tt
  },
  marginBlock: {
    style: tt
  },
  marginBlockStart: {
    style: tt
  },
  marginBlockEnd: {
    style: tt
  },
  // display
  displayPrint: {
    cssProperty: !1,
    transform: (e) => ({
      "@media print": {
        display: e
      }
    })
  },
  display: {},
  overflow: {},
  textOverflow: {},
  visibility: {},
  whiteSpace: {},
  // flexbox
  flexBasis: {},
  flexDirection: {},
  flexWrap: {},
  justifyContent: {},
  alignItems: {},
  alignContent: {},
  order: {},
  flex: {},
  flexGrow: {},
  flexShrink: {},
  alignSelf: {},
  justifyItems: {},
  justifySelf: {},
  // grid
  gap: {
    style: ai
  },
  rowGap: {
    style: ci
  },
  columnGap: {
    style: li
  },
  gridColumn: {},
  gridRow: {},
  gridAutoFlow: {},
  gridAutoColumns: {},
  gridAutoRows: {},
  gridTemplateColumns: {},
  gridTemplateRows: {},
  gridTemplateAreas: {},
  gridArea: {},
  // positions
  position: {},
  zIndex: {
    themeKey: "zIndex"
  },
  top: {},
  right: {},
  bottom: {},
  left: {},
  // shadows
  boxShadow: {
    themeKey: "shadows"
  },
  // sizing
  width: {
    transform: Dt
  },
  maxWidth: {
    style: ol
  },
  minWidth: {
    transform: Dt
  },
  height: {
    transform: Dt
  },
  maxHeight: {
    transform: Dt
  },
  minHeight: {
    transform: Dt
  },
  boxSizing: {},
  // typography
  font: {
    themeKey: "font"
  },
  fontFamily: {
    themeKey: "typography"
  },
  fontSize: {
    themeKey: "typography"
  },
  fontStyle: {
    themeKey: "typography"
  },
  fontWeight: {
    themeKey: "typography"
  },
  letterSpacing: {},
  textTransform: {},
  lineHeight: {},
  textAlign: {},
  typography: {
    cssProperty: !1,
    themeKey: "typography"
  }
};
function hg(...e) {
  const t = e.reduce((r, s) => r.concat(Object.keys(s)), []), n = new Set(t);
  return e.every((r) => n.size === Object.keys(r).length);
}
function mg(e, t) {
  return typeof e == "function" ? e(t) : e;
}
function yg() {
  function e(n, r, s, i) {
    const a = {
      [n]: r,
      theme: s
    }, l = i[n];
    if (!l)
      return {
        [n]: r
      };
    const {
      cssProperty: c = n,
      themeKey: u,
      transform: d,
      style: f
    } = l;
    if (r == null)
      return null;
    if (u === "typography" && r === "inherit")
      return {
        [n]: r
      };
    const y = ni(s, u) || {};
    return f ? f(a) : yn(a, r, (h) => {
      let p = _s(y, d, h);
      return h === p && typeof h == "string" && (p = _s(y, d, `${n}${h === "default" ? "" : le(h)}`, h)), c === !1 ? p : {
        [c]: p
      };
    });
  }
  function t(n) {
    const {
      sx: r,
      theme: s = {},
      nested: i
    } = n || {};
    if (!r)
      return null;
    const a = s.unstable_sxConfig ?? Ho;
    function l(c) {
      let u = c;
      if (typeof c == "function")
        u = c(s);
      else if (typeof c != "object")
        return c;
      if (!u)
        return null;
      const d = Dy(s.breakpoints), f = Object.keys(d);
      let y = d;
      return Object.keys(u).forEach((g) => {
        const h = mg(u[g], s);
        if (h != null)
          if (typeof h == "object")
            if (a[g])
              y = bo(y, e(g, h, s, a));
            else {
              const p = yn({
                theme: s
              }, h, (m) => ({
                [g]: m
              }));
              hg(p, h) ? y[g] = t({
                sx: h,
                theme: s,
                nested: !0
              }) : y = bo(y, p);
            }
          else
            y = bo(y, e(g, h, s, a));
      }), !i && s.modularCssLayers ? {
        "@layer sx": jc(s, Vc(f, y))
      } : jc(s, Vc(f, y));
    }
    return Array.isArray(r) ? r.map(l) : l(r);
  }
  return t;
}
const Nr = yg();
Nr.filterProps = ["sx"];
function gg(e, t) {
  const n = this;
  if (n.vars) {
    if (!n.colorSchemes?.[e] || typeof n.getColorSchemeSelector != "function")
      return {};
    let r = n.getColorSchemeSelector(e);
    return r === "&" ? t : ((r.includes("data-") || r.includes(".")) && (r = `*:where(${r.replace(/\s*&$/, "")}) &`), {
      [r]: t
    });
  }
  return n.palette.mode === e ? t : {};
}
function sl(e = {}, ...t) {
  const {
    breakpoints: n = {},
    palette: r = {},
    spacing: s,
    shape: i = {},
    ...a
  } = e, l = Oy(n), c = pf(s);
  let u = wt({
    breakpoints: l,
    direction: "ltr",
    components: {},
    // Inject component definitions.
    palette: {
      mode: "light",
      ...r
    },
    spacing: c,
    shape: {
      ...Ry,
      ...i
    }
  }, a);
  return u = Ty(u), u.applyStyles = gg, u = t.reduce((d, f) => wt(d, f), u), u.unstable_sxConfig = {
    ...Ho,
    ...a?.unstable_sxConfig
  }, u.unstable_sx = function(f) {
    return Nr({
      sx: f,
      theme: this
    });
  }, u;
}
function bg(e) {
  for (var t = 0, n, r = 0, s = e.length; s >= 4; ++r, s -= 4)
    n = e.charCodeAt(r) & 255 | (e.charCodeAt(++r) & 255) << 8 | (e.charCodeAt(++r) & 255) << 16 | (e.charCodeAt(++r) & 255) << 24, n = /* Math.imul(k, m): */
    (n & 65535) * 1540483477 + ((n >>> 16) * 59797 << 16), n ^= /* k >>> r: */
    n >>> 24, t = /* Math.imul(k, m): */
    (n & 65535) * 1540483477 + ((n >>> 16) * 59797 << 16) ^ /* Math.imul(h, m): */
    (t & 65535) * 1540483477 + ((t >>> 16) * 59797 << 16);
  switch (s) {
    case 3:
      t ^= (e.charCodeAt(r + 2) & 255) << 16;
    case 2:
      t ^= (e.charCodeAt(r + 1) & 255) << 8;
    case 1:
      t ^= e.charCodeAt(r) & 255, t = /* Math.imul(h, m): */
      (t & 65535) * 1540483477 + ((t >>> 16) * 59797 << 16);
  }
  return t ^= t >>> 13, t = /* Math.imul(h, m): */
  (t & 65535) * 1540483477 + ((t >>> 16) * 59797 << 16), ((t ^ t >>> 15) >>> 0).toString(36);
}
var vg = {
  animationIterationCount: 1,
  aspectRatio: 1,
  borderImageOutset: 1,
  borderImageSlice: 1,
  borderImageWidth: 1,
  boxFlex: 1,
  boxFlexGroup: 1,
  boxOrdinalGroup: 1,
  columnCount: 1,
  columns: 1,
  flex: 1,
  flexGrow: 1,
  flexPositive: 1,
  flexShrink: 1,
  flexNegative: 1,
  flexOrder: 1,
  gridRow: 1,
  gridRowEnd: 1,
  gridRowSpan: 1,
  gridRowStart: 1,
  gridColumn: 1,
  gridColumnEnd: 1,
  gridColumnSpan: 1,
  gridColumnStart: 1,
  msGridRow: 1,
  msGridRowSpan: 1,
  msGridColumn: 1,
  msGridColumnSpan: 1,
  fontWeight: 1,
  lineHeight: 1,
  opacity: 1,
  order: 1,
  orphans: 1,
  scale: 1,
  tabSize: 1,
  widows: 1,
  zIndex: 1,
  zoom: 1,
  WebkitLineClamp: 1,
  // SVG-related properties
  fillOpacity: 1,
  floodOpacity: 1,
  stopOpacity: 1,
  strokeDasharray: 1,
  strokeDashoffset: 1,
  strokeMiterlimit: 1,
  strokeOpacity: 1,
  strokeWidth: 1
};
function xg(e) {
  var t = /* @__PURE__ */ Object.create(null);
  return function(n) {
    return t[n] === void 0 && (t[n] = e(n)), t[n];
  };
}
var wg = /[A-Z]|^ms/g, Sg = /_EMO_([^_]+?)_([^]*?)_EMO_/g, hf = function(t) {
  return t.charCodeAt(1) === 45;
}, Bc = function(t) {
  return t != null && typeof t != "boolean";
}, Qi = /* @__PURE__ */ xg(function(e) {
  return hf(e) ? e : e.replace(wg, "-$&").toLowerCase();
}), Wc = function(t, n) {
  switch (t) {
    case "animation":
    case "animationName":
      if (typeof n == "string")
        return n.replace(Sg, function(r, s, i) {
          return Tn = {
            name: s,
            styles: i,
            next: Tn
          }, s;
        });
  }
  return vg[t] !== 1 && !hf(t) && typeof n == "number" && n !== 0 ? n + "px" : n;
};
function Vs(e, t, n) {
  if (n == null)
    return "";
  var r = n;
  if (r.__emotion_styles !== void 0)
    return r;
  switch (typeof n) {
    case "boolean":
      return "";
    case "object": {
      var s = n;
      if (s.anim === 1)
        return Tn = {
          name: s.name,
          styles: s.styles,
          next: Tn
        }, s.name;
      var i = n;
      if (i.styles !== void 0) {
        var a = i.next;
        if (a !== void 0)
          for (; a !== void 0; )
            Tn = {
              name: a.name,
              styles: a.styles,
              next: Tn
            }, a = a.next;
        var l = i.styles + ";";
        return l;
      }
      return Eg(e, t, n);
    }
  }
  var c = n;
  return c;
}
function Eg(e, t, n) {
  var r = "";
  if (Array.isArray(n))
    for (var s = 0; s < n.length; s++)
      r += Vs(e, t, n[s]) + ";";
  else
    for (var i in n) {
      var a = n[i];
      if (typeof a != "object") {
        var l = a;
        Bc(l) && (r += Qi(i) + ":" + Wc(i, l) + ";");
      } else if (Array.isArray(a) && typeof a[0] == "string" && t == null)
        for (var c = 0; c < a.length; c++)
          Bc(a[c]) && (r += Qi(i) + ":" + Wc(i, a[c]) + ";");
      else {
        var u = Vs(e, t, a);
        switch (i) {
          case "animation":
          case "animationName": {
            r += Qi(i) + ":" + u + ";";
            break;
          }
          default:
            r += i + "{" + u + "}";
        }
      }
    }
  return r;
}
var zc = /label:\s*([^\s;{]+)\s*(;|$)/g, Tn;
function Og(e, t, n) {
  if (e.length === 1 && typeof e[0] == "object" && e[0] !== null && e[0].styles !== void 0)
    return e[0];
  var r = !0, s = "";
  Tn = void 0;
  var i = e[0];
  if (i == null || i.raw === void 0)
    r = !1, s += Vs(n, t, i);
  else {
    var a = i;
    s += a[0];
  }
  for (var l = 1; l < e.length; l++)
    if (s += Vs(n, t, e[l]), r) {
      var c = i;
      s += c[l];
    }
  zc.lastIndex = 0;
  for (var u = "", d; (d = zc.exec(s)) !== null; )
    u += "-" + d[1];
  var f = bg(s) + u;
  return {
    name: f,
    styles: s,
    next: Tn
  };
}
function Cg(e) {
  return e == null || Object.keys(e).length === 0;
}
function mf(e) {
  const {
    styles: t,
    defaultTheme: n = {}
  } = e, r = typeof t == "function" ? (s) => t(Cg(s) ? n : s) : t;
  return /* @__PURE__ */ E.jsx(ny, {
    styles: r
  });
}
process.env.NODE_ENV !== "production" && (mf.propTypes = {
  defaultTheme: o.object,
  styles: o.oneOfType([o.array, o.string, o.object, o.func])
});
/**
 * @mui/styled-engine v7.3.3
 *
 * @license MIT
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
function Pg(e, t) {
  const n = oy(e, t);
  return process.env.NODE_ENV !== "production" ? (...r) => {
    const s = typeof e == "string" ? `"${e}"` : "component";
    return r.length === 0 ? console.error([`MUI: Seems like you called \`styled(${s})()\` without a \`style\` argument.`, 'You must provide a `styles` argument: `styled("div")(styleYouForgotToPass)`.'].join(`
`)) : r.some((i) => i === void 0) && console.error(`MUI: the styled(${s})(...args) API requires all its args to be defined.`), n(...r);
  } : n;
}
function Tg(e, t) {
  Array.isArray(e.__emotion_styles) && (e.__emotion_styles = t(e.__emotion_styles));
}
const Uc = [];
function kn(e) {
  return Uc[0] = e, Og(Uc);
}
function Rg(e) {
  return Object.keys(e).length === 0;
}
function yf(e = null) {
  const t = x.useContext(ry);
  return !t || Rg(t) ? e : t;
}
const kg = sl();
function il(e = kg) {
  return yf(e);
}
function Dg({
  props: e,
  name: t,
  defaultTheme: n,
  themeId: r
}) {
  let s = il(n);
  return s = s[r] || s, uf({
    theme: s,
    name: t,
    props: e
  });
}
function Mg(e, t, n, r, s) {
  const [i, a] = x.useState(() => s && n ? n(e).matches : r ? r(e).matches : t);
  return dt(() => {
    if (!n)
      return;
    const l = n(e), c = () => {
      a(l.matches);
    };
    return c(), l.addEventListener("change", c), () => {
      l.removeEventListener("change", c);
    };
  }, [e, n]), i;
}
const Ig = {
  ...x
}, gf = Ig.useSyncExternalStore;
function Ng(e, t, n, r, s) {
  const i = x.useCallback(() => t, [t]), a = x.useMemo(() => {
    if (s && n)
      return () => n(e).matches;
    if (r !== null) {
      const {
        matches: d
      } = r(e);
      return () => d;
    }
    return i;
  }, [i, e, r, s, n]), [l, c] = x.useMemo(() => {
    if (n === null)
      return [i, () => () => {
      }];
    const d = n(e);
    return [() => d.matches, (f) => (d.addEventListener("change", f), () => {
      d.removeEventListener("change", f);
    })];
  }, [i, n, e]);
  return gf(c, l, a);
}
function bf(e = {}) {
  const {
    themeId: t
  } = e;
  return function(r, s = {}) {
    let i = yf();
    i && t && (i = i[t] || i);
    const a = typeof window < "u" && typeof window.matchMedia < "u", {
      defaultMatches: l = !1,
      matchMedia: c = a ? window.matchMedia : null,
      ssrMatchMedia: u = null,
      noSsr: d = !1
    } = uf({
      name: "MuiUseMediaQuery",
      props: s,
      theme: i
    });
    process.env.NODE_ENV !== "production" && typeof r == "function" && i === null && console.error(["MUI: The `query` argument provided is invalid.", "You are providing a function without a theme in the context.", "One of the parent elements needs to use a ThemeProvider."].join(`
`));
    let f = typeof r == "function" ? r(i) : r;
    f = f.replace(/^@media( ?)/m, ""), f.includes("print") && console.warn(["MUI: You have provided a `print` query to the `useMediaQuery` hook.", "Using the print media query to modify print styles can lead to unexpected results.", "Consider using the `displayPrint` field in the `sx` prop instead.", "More information about `displayPrint` on our docs: https://mui.com/system/display/#display-in-print."].join(`
`));
    const g = (gf !== void 0 ? Ng : Mg)(f, l, c, u, d);
    return process.env.NODE_ENV !== "production" && x.useDebugValue({
      query: f,
      match: g
    }), g;
  };
}
bf();
const Yo = "$$material", vf = bf({
  themeId: Yo
});
function Zi(e) {
  const t = kn(e);
  return e !== t && t.styles ? (t.styles.match(/^@layer\s+[^{]*$/) || (t.styles = `@layer global{${t.styles}}`), t) : e;
}
function xf({
  styles: e,
  themeId: t,
  defaultTheme: n = {}
}) {
  const r = il(n), s = t && r[t] || r;
  let i = typeof e == "function" ? e(s) : e;
  return s.modularCssLayers && (Array.isArray(i) ? i = i.map((a) => Zi(typeof a == "function" ? a(s) : a)) : i = Zi(i)), /* @__PURE__ */ E.jsx(mf, {
    styles: i
  });
}
process.env.NODE_ENV !== "production" && (xf.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  defaultTheme: o.object,
  /**
   * @ignore
   */
  styles: o.oneOfType([o.array, o.func, o.number, o.object, o.string, o.bool]),
  /**
   * @ignore
   */
  themeId: o.string
});
const Ag = (e) => {
  const t = {
    systemProps: {},
    otherProps: {}
  }, n = e?.theme?.unstable_sxConfig ?? Ho;
  return Object.keys(e).forEach((r) => {
    n[r] ? t.systemProps[r] = e[r] : t.otherProps[r] = e[r];
  }), t;
};
function Fg(e) {
  const {
    sx: t,
    ...n
  } = e, {
    systemProps: r,
    otherProps: s
  } = Ag(n);
  let i;
  return Array.isArray(t) ? i = [r, ...t] : typeof t == "function" ? i = (...a) => {
    const l = t(...a);
    return Jt(l) ? {
      ...r,
      ...l
    } : r;
  } : i = {
    ...r,
    ...t
  }, {
    ...s,
    sx: i
  };
}
const qc = (e) => e, $g = () => {
  let e = qc;
  return {
    configure(t) {
      e = t;
    },
    generate(t) {
      return e(t);
    },
    reset() {
      e = qc;
    }
  };
}, jg = $g(), _g = {
  active: "active",
  checked: "checked",
  completed: "completed",
  disabled: "disabled",
  error: "error",
  expanded: "expanded",
  focused: "focused",
  focusVisible: "focusVisible",
  open: "open",
  readOnly: "readOnly",
  required: "required",
  selected: "selected"
};
function we(e, t, n = "Mui") {
  const r = _g[t];
  return r ? `${n}-${r}` : `${jg.generate(e)}-${t}`;
}
function xe(e, t, n = "Mui") {
  const r = {};
  return t.forEach((s) => {
    r[s] = we(e, s, n);
  }), r;
}
function wf(e, t = "") {
  return e.displayName || e.name || t;
}
function Hc(e, t, n) {
  const r = wf(t);
  return e.displayName || (r !== "" ? `${n}(${r})` : n);
}
function Vg(e) {
  if (e != null) {
    if (typeof e == "string")
      return e;
    if (typeof e == "function")
      return wf(e, "Component");
    if (typeof e == "object")
      switch (e.$$typeof) {
        case lr.ForwardRef:
          return Hc(e, e.render, "ForwardRef");
        case lr.Memo:
          return Hc(e, e.type, "memo");
        default:
          return;
      }
  }
}
function Sf(e) {
  const {
    variants: t,
    ...n
  } = e, r = {
    variants: t,
    style: kn(n),
    isProcessed: !0
  };
  return r.style === n || t && t.forEach((s) => {
    typeof s.style != "function" && (s.style = kn(s.style));
  }), r;
}
const Lg = sl();
function rn(e) {
  return e !== "ownerState" && e !== "theme" && e !== "sx" && e !== "as";
}
function Jn(e, t) {
  return t && e && typeof e == "object" && e.styles && !e.styles.startsWith("@layer") && (e.styles = `@layer ${t}{${String(e.styles)}}`), e;
}
function Bg(e) {
  return e ? (t, n) => n[e] : null;
}
function Wg(e, t, n) {
  e.theme = Hg(e.theme) ? n : e.theme[t] || e.theme;
}
function Ds(e, t, n) {
  const r = typeof t == "function" ? t(e) : t;
  if (Array.isArray(r))
    return r.flatMap((s) => Ds(e, s, n));
  if (Array.isArray(r?.variants)) {
    let s;
    if (r.isProcessed)
      s = n ? Jn(r.style, n) : r.style;
    else {
      const {
        variants: i,
        ...a
      } = r;
      s = n ? Jn(kn(a), n) : a;
    }
    return Ef(e, r.variants, [s], n);
  }
  return r?.isProcessed ? n ? Jn(kn(r.style), n) : r.style : n ? Jn(kn(r), n) : r;
}
function Ef(e, t, n = [], r = void 0) {
  let s;
  e: for (let i = 0; i < t.length; i += 1) {
    const a = t[i];
    if (typeof a.props == "function") {
      if (s ??= {
        ...e,
        ...e.ownerState,
        ownerState: e.ownerState
      }, !a.props(s))
        continue;
    } else
      for (const l in a.props)
        if (e[l] !== a.props[l] && e.ownerState?.[l] !== a.props[l])
          continue e;
    typeof a.style == "function" ? (s ??= {
      ...e,
      ...e.ownerState,
      ownerState: e.ownerState
    }, n.push(r ? Jn(kn(a.style(s)), r) : a.style(s))) : n.push(r ? Jn(kn(a.style), r) : a.style);
  }
  return n;
}
function zg(e = {}) {
  const {
    themeId: t,
    defaultTheme: n = Lg,
    rootShouldForwardProp: r = rn,
    slotShouldForwardProp: s = rn
  } = e;
  function i(l) {
    Wg(l, t, n);
  }
  return (l, c = {}) => {
    Tg(l, (P) => P.filter((M) => M !== Nr));
    const {
      name: u,
      slot: d,
      skipVariantsResolver: f,
      skipSx: y,
      // TODO v6: remove `lowercaseFirstLetter()` in the next major release
      // For more details: https://github.com/mui/material-ui/pull/37908
      overridesResolver: g = Bg(Of(d)),
      ...h
    } = c, p = u && u.startsWith("Mui") || d ? "components" : "custom", m = f !== void 0 ? f : (
      // TODO v6: remove `Root` in the next major release
      // For more details: https://github.com/mui/material-ui/pull/37908
      d && d !== "Root" && d !== "root" || !1
    ), b = y || !1;
    let C = rn;
    d === "Root" || d === "root" ? C = r : d ? C = s : Yg(l) && (C = void 0);
    const O = Pg(l, {
      shouldForwardProp: C,
      label: qg(u, d),
      ...h
    }), w = (P) => {
      if (P.__emotion_real === P)
        return P;
      if (typeof P == "function")
        return function(F) {
          return Ds(F, P, F.theme.modularCssLayers ? p : void 0);
        };
      if (Jt(P)) {
        const M = Sf(P);
        return function(A) {
          return M.variants ? Ds(A, M, A.theme.modularCssLayers ? p : void 0) : A.theme.modularCssLayers ? Jn(M.style, p) : M.style;
        };
      }
      return P;
    }, S = (...P) => {
      const M = [], F = P.map(w), A = [];
      if (M.push(i), u && g && A.push(function(D) {
        const I = D.theme.components?.[u]?.styleOverrides;
        if (!I)
          return null;
        const N = {};
        for (const _ in I)
          N[_] = Ds(D, I[_], D.theme.modularCssLayers ? "theme" : void 0);
        return g(D, N);
      }), u && !m && A.push(function(D) {
        const I = D.theme?.components?.[u]?.variants;
        return I ? Ef(D, I, [], D.theme.modularCssLayers ? "theme" : void 0) : null;
      }), b || A.push(Nr), Array.isArray(F[0])) {
        const v = F.shift(), D = new Array(M.length).fill(""), T = new Array(A.length).fill("");
        let I;
        I = [...D, ...v, ...T], I.raw = [...D, ...v.raw, ...T], M.unshift(I);
      }
      const $ = [...M, ...F, ...A], k = O(...$);
      return l.muiName && (k.muiName = l.muiName), process.env.NODE_ENV !== "production" && (k.displayName = Ug(u, d, l)), k;
    };
    return O.withConfig && (S.withConfig = O.withConfig), S;
  };
}
function Ug(e, t, n) {
  return e ? `${e}${le(t || "")}` : `Styled(${Vg(n)})`;
}
function qg(e, t) {
  let n;
  return process.env.NODE_ENV !== "production" && e && (n = `${e}-${Of(t || "Root")}`), n;
}
function Hg(e) {
  for (const t in e)
    return !1;
  return !0;
}
function Yg(e) {
  return typeof e == "string" && // 96 is one less than the char code
  // for "a" so this is checking that
  // it's a lowercase character
  e.charCodeAt(0) > 96;
}
function Of(e) {
  return e && e.charAt(0).toLowerCase() + e.slice(1);
}
function Kg(e, t = Number.MIN_SAFE_INTEGER, n = Number.MAX_SAFE_INTEGER) {
  return Math.max(t, Math.min(e, n));
}
function al(e, t = 0, n = 1) {
  return process.env.NODE_ENV !== "production" && (e < t || e > n) && console.error(`MUI: The value provided ${e} is out of range [${t}, ${n}].`), Kg(e, t, n);
}
function Gg(e) {
  e = e.slice(1);
  const t = new RegExp(`.{1,${e.length >= 6 ? 2 : 1}}`, "g");
  let n = e.match(t);
  return n && n[0].length === 1 && (n = n.map((r) => r + r)), process.env.NODE_ENV !== "production" && e.length !== e.trim().length && console.error(`MUI: The color: "${e}" is invalid. Make sure the color input doesn't contain leading/trailing space.`), n ? `rgb${n.length === 4 ? "a" : ""}(${n.map((r, s) => s < 3 ? parseInt(r, 16) : Math.round(parseInt(r, 16) / 255 * 1e3) / 1e3).join(", ")})` : "";
}
function Nn(e) {
  if (e.type)
    return e;
  if (e.charAt(0) === "#")
    return Nn(Gg(e));
  const t = e.indexOf("("), n = e.substring(0, t);
  if (!["rgb", "rgba", "hsl", "hsla", "color"].includes(n))
    throw new Error(process.env.NODE_ENV !== "production" ? `MUI: Unsupported \`${e}\` color.
The following formats are supported: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().` : sn(9, e));
  let r = e.substring(t + 1, e.length - 1), s;
  if (n === "color") {
    if (r = r.split(" "), s = r.shift(), r.length === 4 && r[3].charAt(0) === "/" && (r[3] = r[3].slice(1)), !["srgb", "display-p3", "a98-rgb", "prophoto-rgb", "rec-2020"].includes(s))
      throw new Error(process.env.NODE_ENV !== "production" ? `MUI: unsupported \`${s}\` color space.
The following color spaces are supported: srgb, display-p3, a98-rgb, prophoto-rgb, rec-2020.` : sn(10, s));
  } else
    r = r.split(",");
  return r = r.map((i) => parseFloat(i)), {
    type: n,
    values: r,
    colorSpace: s
  };
}
const Xg = (e) => {
  const t = Nn(e);
  return t.values.slice(0, 3).map((n, r) => t.type.includes("hsl") && r !== 0 ? `${n}%` : n).join(" ");
}, po = (e, t) => {
  try {
    return Xg(e);
  } catch {
    return t && process.env.NODE_ENV !== "production" && console.warn(t), e;
  }
};
function ui(e) {
  const {
    type: t,
    colorSpace: n
  } = e;
  let {
    values: r
  } = e;
  return t.includes("rgb") ? r = r.map((s, i) => i < 3 ? parseInt(s, 10) : s) : t.includes("hsl") && (r[1] = `${r[1]}%`, r[2] = `${r[2]}%`), t.includes("color") ? r = `${n} ${r.join(" ")}` : r = `${r.join(", ")}`, `${t}(${r})`;
}
function Cf(e) {
  e = Nn(e);
  const {
    values: t
  } = e, n = t[0], r = t[1] / 100, s = t[2] / 100, i = r * Math.min(s, 1 - s), a = (u, d = (u + n / 30) % 12) => s - i * Math.max(Math.min(d - 3, 9 - d, 1), -1);
  let l = "rgb";
  const c = [Math.round(a(0) * 255), Math.round(a(8) * 255), Math.round(a(4) * 255)];
  return e.type === "hsla" && (l += "a", c.push(t[3])), ui({
    type: l,
    values: c
  });
}
function Ca(e) {
  e = Nn(e);
  let t = e.type === "hsl" || e.type === "hsla" ? Nn(Cf(e)).values : e.values;
  return t = t.map((n) => (e.type !== "color" && (n /= 255), n <= 0.03928 ? n / 12.92 : ((n + 0.055) / 1.055) ** 2.4)), Number((0.2126 * t[0] + 0.7152 * t[1] + 0.0722 * t[2]).toFixed(3));
}
function Yc(e, t) {
  const n = Ca(e), r = Ca(t);
  return (Math.max(n, r) + 0.05) / (Math.min(n, r) + 0.05);
}
function an(e, t) {
  return e = Nn(e), t = al(t), (e.type === "rgb" || e.type === "hsl") && (e.type += "a"), e.type === "color" ? e.values[3] = `/${t}` : e.values[3] = t, ui(e);
}
function zn(e, t, n) {
  try {
    return an(e, t);
  } catch {
    return n && process.env.NODE_ENV !== "production" && console.warn(n), e;
  }
}
function di(e, t) {
  if (e = Nn(e), t = al(t), e.type.includes("hsl"))
    e.values[2] *= 1 - t;
  else if (e.type.includes("rgb") || e.type.includes("color"))
    for (let n = 0; n < 3; n += 1)
      e.values[n] *= 1 - t;
  return ui(e);
}
function Le(e, t, n) {
  try {
    return di(e, t);
  } catch {
    return n && process.env.NODE_ENV !== "production" && console.warn(n), e;
  }
}
function fi(e, t) {
  if (e = Nn(e), t = al(t), e.type.includes("hsl"))
    e.values[2] += (100 - e.values[2]) * t;
  else if (e.type.includes("rgb"))
    for (let n = 0; n < 3; n += 1)
      e.values[n] += (255 - e.values[n]) * t;
  else if (e.type.includes("color"))
    for (let n = 0; n < 3; n += 1)
      e.values[n] += (1 - e.values[n]) * t;
  return ui(e);
}
function Be(e, t, n) {
  try {
    return fi(e, t);
  } catch {
    return n && process.env.NODE_ENV !== "production" && console.warn(n), e;
  }
}
function Qg(e, t = 0.15) {
  return Ca(e) > 0.5 ? di(e, t) : fi(e, t);
}
function ys(e, t, n) {
  try {
    return Qg(e, t);
  } catch {
    return e;
  }
}
const Zg = "exact-prop: ​";
function Pf(e) {
  return process.env.NODE_ENV === "production" ? e : {
    ...e,
    [Zg]: (t) => {
      const n = Object.keys(t).filter((r) => !e.hasOwnProperty(r));
      return n.length > 0 ? new Error(`The following props are not supported: ${n.map((r) => `\`${r}\``).join(", ")}. Please remove them.`) : null;
    }
  };
}
const Jg = /* @__PURE__ */ x.createContext();
process.env.NODE_ENV !== "production" && (o.node, o.bool);
const Ut = () => x.useContext(Jg) ?? !1, eb = /* @__PURE__ */ x.createContext(void 0);
process.env.NODE_ENV !== "production" && (o.node, o.object);
function tb(e) {
  const {
    theme: t,
    name: n,
    props: r
  } = e;
  if (!t || !t.components || !t.components[n])
    return r;
  const s = t.components[n];
  return s.defaultProps ? Po(s.defaultProps, r, t.components.mergeClassNameAndStyle) : !s.styleOverrides && !s.variants ? Po(s, r, t.components.mergeClassNameAndStyle) : r;
}
function nb({
  props: e,
  name: t
}) {
  const n = x.useContext(eb);
  return tb({
    props: e,
    name: t,
    theme: {
      components: n
    }
  });
}
let Kc = 0;
function rb(e) {
  const [t, n] = x.useState(e), r = e || t;
  return x.useEffect(() => {
    t == null && (Kc += 1, n(`mui-${Kc}`));
  }, [t]), r;
}
const ob = {
  ...x
}, Gc = ob.useId;
function _n(e) {
  if (Gc !== void 0) {
    const t = Gc();
    return e ?? t;
  }
  return rb(e);
}
const Xc = {
  theme: void 0
};
function sb(e) {
  let t, n;
  return function(s) {
    let i = t;
    return (i === void 0 || s.theme !== n) && (Xc.theme = s.theme, i = Sf(e(Xc)), t = i, n = s.theme), i;
  };
}
function ib(e = "") {
  function t(...r) {
    if (!r.length)
      return "";
    const s = r[0];
    return typeof s == "string" && !s.match(/(#|\(|\)|(-?(\d*\.)?\d+)(px|em|%|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc))|^(-?(\d*\.)?\d+)$|(\d+ \d+ \d+)/) ? `, var(--${e ? `${e}-` : ""}${s}${t(...r.slice(1))})` : `, ${s}`;
  }
  return (r, ...s) => `var(--${e ? `${e}-` : ""}${r}${t(...s)})`;
}
const Qc = (e, t, n, r = []) => {
  let s = e;
  t.forEach((i, a) => {
    a === t.length - 1 ? Array.isArray(s) ? s[Number(i)] = n : s && typeof s == "object" && (s[i] = n) : s && typeof s == "object" && (s[i] || (s[i] = r.includes(i) ? [] : {}), s = s[i]);
  });
}, ab = (e, t, n) => {
  function r(s, i = [], a = []) {
    Object.entries(s).forEach(([l, c]) => {
      (!n || n && !n([...i, l])) && c != null && (typeof c == "object" && Object.keys(c).length > 0 ? r(c, [...i, l], Array.isArray(c) ? [...a, l] : a) : t([...i, l], c, a));
    });
  }
  r(e);
}, lb = (e, t) => typeof t == "number" ? ["lineHeight", "fontWeight", "opacity", "zIndex"].some((r) => e.includes(r)) || e[e.length - 1].toLowerCase().includes("opacity") ? t : `${t}px` : t;
function Ji(e, t) {
  const {
    prefix: n,
    shouldSkipGeneratingVar: r
  } = t || {}, s = {}, i = {}, a = {};
  return ab(
    e,
    (l, c, u) => {
      if ((typeof c == "string" || typeof c == "number") && (!r || !r(l, c))) {
        const d = `--${n ? `${n}-` : ""}${l.join("-")}`, f = lb(l, c);
        Object.assign(s, {
          [d]: f
        }), Qc(i, l, `var(${d})`, u), Qc(a, l, `var(${d}, ${f})`, u);
      }
    },
    (l) => l[0] === "vars"
    // skip 'vars/*' paths
  ), {
    css: s,
    vars: i,
    varsWithDefaults: a
  };
}
function cb(e, t = {}) {
  const {
    getSelector: n = b,
    disableCssColorScheme: r,
    colorSchemeSelector: s,
    enableContrastVars: i
  } = t, {
    colorSchemes: a = {},
    components: l,
    defaultColorScheme: c = "light",
    ...u
  } = e, {
    vars: d,
    css: f,
    varsWithDefaults: y
  } = Ji(u, t);
  let g = y;
  const h = {}, {
    [c]: p,
    ...m
  } = a;
  if (Object.entries(m || {}).forEach(([w, S]) => {
    const {
      vars: P,
      css: M,
      varsWithDefaults: F
    } = Ji(S, t);
    g = wt(g, F), h[w] = {
      css: M,
      vars: P
    };
  }), p) {
    const {
      css: w,
      vars: S,
      varsWithDefaults: P
    } = Ji(p, t);
    g = wt(g, P), h[c] = {
      css: w,
      vars: S
    };
  }
  function b(w, S) {
    let P = s;
    if (s === "class" && (P = ".%s"), s === "data" && (P = "[data-%s]"), s?.startsWith("data-") && !s.includes("%s") && (P = `[${s}="%s"]`), w) {
      if (P === "media")
        return e.defaultColorScheme === w ? ":root" : {
          [`@media (prefers-color-scheme: ${a[w]?.palette?.mode || w})`]: {
            ":root": S
          }
        };
      if (P)
        return e.defaultColorScheme === w ? `:root, ${P.replace("%s", String(w))}` : P.replace("%s", String(w));
    }
    return ":root";
  }
  return {
    vars: g,
    generateThemeVars: () => {
      let w = {
        ...d
      };
      return Object.entries(h).forEach(([, {
        vars: S
      }]) => {
        w = wt(w, S);
      }), w;
    },
    generateStyleSheets: () => {
      const w = [], S = e.defaultColorScheme || "light";
      function P(A, $) {
        Object.keys($).length && w.push(typeof A == "string" ? {
          [A]: {
            ...$
          }
        } : A);
      }
      P(n(void 0, {
        ...f
      }), f);
      const {
        [S]: M,
        ...F
      } = h;
      if (M) {
        const {
          css: A
        } = M, $ = a[S]?.palette?.mode, k = !r && $ ? {
          colorScheme: $,
          ...A
        } : {
          ...A
        };
        P(n(S, {
          ...k
        }), k);
      }
      return Object.entries(F).forEach(([A, {
        css: $
      }]) => {
        const k = a[A]?.palette?.mode, v = !r && k ? {
          colorScheme: k,
          ...$
        } : {
          ...$
        };
        P(n(A, {
          ...v
        }), v);
      }), i && w.push({
        ":root": {
          // use double underscore to indicate that these are private variables
          "--__l-threshold": "0.7",
          "--__l": "clamp(0, (l / var(--__l-threshold) - 1) * -infinity, 1)",
          "--__a": "clamp(0.87, (l / var(--__l-threshold) - 1) * -infinity, 1)"
          // 0.87 is the default alpha value for black text.
        }
      }), w;
    }
  };
}
function ub(e) {
  return function(n) {
    return e === "media" ? (process.env.NODE_ENV !== "production" && n !== "light" && n !== "dark" && console.error(`MUI: @media (prefers-color-scheme) supports only 'light' or 'dark', but receive '${n}'.`), `@media (prefers-color-scheme: ${n})`) : e ? e.startsWith("data-") && !e.includes("%s") ? `[${e}="${n}"] &` : e === "class" ? `.${n} &` : e === "data" ? `[data-${n}] &` : `${e.replace("%s", n)} &` : "&";
  };
}
function be(e, t, n = void 0) {
  const r = {};
  for (const s in e) {
    const i = e[s];
    let a = "", l = !0;
    for (let c = 0; c < i.length; c += 1) {
      const u = i[c];
      u && (a += (l === !0 ? "" : " ") + t(u), l = !1, n && n[u] && (a += " " + n[u]));
    }
    r[s] = a;
  }
  return r;
}
function vo(e, t) {
  return /* @__PURE__ */ x.isValidElement(e) && t.indexOf(
    // For server components `muiName` is available in element.type._payload.value.muiName
    // relevant info - https://github.com/facebook/react/blob/2807d781a08db8e9873687fccc25c0f12b4fb3d4/packages/react/src/ReactLazy.js#L45
    // eslint-disable-next-line no-underscore-dangle
    e.type.muiName ?? e.type?._payload?.value?.muiName
  ) !== -1;
}
const To = {
  black: "#000",
  white: "#fff"
}, db = {
  50: "#fafafa",
  100: "#f5f5f5",
  200: "#eeeeee",
  300: "#e0e0e0",
  400: "#bdbdbd",
  500: "#9e9e9e",
  600: "#757575",
  700: "#616161",
  800: "#424242",
  900: "#212121",
  A100: "#f5f5f5",
  A200: "#eeeeee",
  A400: "#bdbdbd",
  A700: "#616161"
}, hr = {
  50: "#f3e5f5",
  200: "#ce93d8",
  300: "#ba68c8",
  400: "#ab47bc",
  500: "#9c27b0",
  700: "#7b1fa2"
}, mr = {
  300: "#e57373",
  400: "#ef5350",
  500: "#f44336",
  700: "#d32f2f",
  800: "#c62828"
}, Jr = {
  300: "#ffb74d",
  400: "#ffa726",
  500: "#ff9800",
  700: "#f57c00",
  900: "#e65100"
}, yr = {
  50: "#e3f2fd",
  200: "#90caf9",
  400: "#42a5f5",
  700: "#1976d2",
  800: "#1565c0"
}, gr = {
  300: "#4fc3f7",
  400: "#29b6f6",
  500: "#03a9f4",
  700: "#0288d1",
  900: "#01579b"
}, br = {
  300: "#81c784",
  400: "#66bb6a",
  500: "#4caf50",
  700: "#388e3c",
  800: "#2e7d32",
  900: "#1b5e20"
};
function Tf() {
  return {
    // The colors used to style the text.
    text: {
      // The most important text.
      primary: "rgba(0, 0, 0, 0.87)",
      // Secondary text.
      secondary: "rgba(0, 0, 0, 0.6)",
      // Disabled text have even lower visual prominence.
      disabled: "rgba(0, 0, 0, 0.38)"
    },
    // The color used to divide different elements.
    divider: "rgba(0, 0, 0, 0.12)",
    // The background colors used to style the surfaces.
    // Consistency between these values is important.
    background: {
      paper: To.white,
      default: To.white
    },
    // The colors used to style the action elements.
    action: {
      // The color of an active action like an icon button.
      active: "rgba(0, 0, 0, 0.54)",
      // The color of an hovered action.
      hover: "rgba(0, 0, 0, 0.04)",
      hoverOpacity: 0.04,
      // The color of a selected action.
      selected: "rgba(0, 0, 0, 0.08)",
      selectedOpacity: 0.08,
      // The color of a disabled action.
      disabled: "rgba(0, 0, 0, 0.26)",
      // The background color of a disabled action.
      disabledBackground: "rgba(0, 0, 0, 0.12)",
      disabledOpacity: 0.38,
      focus: "rgba(0, 0, 0, 0.12)",
      focusOpacity: 0.12,
      activatedOpacity: 0.12
    }
  };
}
const Rf = Tf();
function kf() {
  return {
    text: {
      primary: To.white,
      secondary: "rgba(255, 255, 255, 0.7)",
      disabled: "rgba(255, 255, 255, 0.5)",
      icon: "rgba(255, 255, 255, 0.5)"
    },
    divider: "rgba(255, 255, 255, 0.12)",
    background: {
      paper: "#121212",
      default: "#121212"
    },
    action: {
      active: To.white,
      hover: "rgba(255, 255, 255, 0.08)",
      hoverOpacity: 0.08,
      selected: "rgba(255, 255, 255, 0.16)",
      selectedOpacity: 0.16,
      disabled: "rgba(255, 255, 255, 0.3)",
      disabledBackground: "rgba(255, 255, 255, 0.12)",
      disabledOpacity: 0.38,
      focus: "rgba(255, 255, 255, 0.12)",
      focusOpacity: 0.12,
      activatedOpacity: 0.24
    }
  };
}
const Pa = kf();
function Zc(e, t, n, r) {
  const s = r.light || r, i = r.dark || r * 1.5;
  e[t] || (e.hasOwnProperty(n) ? e[t] = e[n] : t === "light" ? e.light = fi(e.main, s) : t === "dark" && (e.dark = di(e.main, i)));
}
function Jc(e, t, n, r, s) {
  const i = s.light || s, a = s.dark || s * 1.5;
  t[n] || (t.hasOwnProperty(r) ? t[n] = t[r] : n === "light" ? t.light = `color-mix(in ${e}, ${t.main}, #fff ${(i * 100).toFixed(0)}%)` : n === "dark" && (t.dark = `color-mix(in ${e}, ${t.main}, #000 ${(a * 100).toFixed(0)}%)`));
}
function fb(e = "light") {
  return e === "dark" ? {
    main: yr[200],
    light: yr[50],
    dark: yr[400]
  } : {
    main: yr[700],
    light: yr[400],
    dark: yr[800]
  };
}
function pb(e = "light") {
  return e === "dark" ? {
    main: hr[200],
    light: hr[50],
    dark: hr[400]
  } : {
    main: hr[500],
    light: hr[300],
    dark: hr[700]
  };
}
function hb(e = "light") {
  return e === "dark" ? {
    main: mr[500],
    light: mr[300],
    dark: mr[700]
  } : {
    main: mr[700],
    light: mr[400],
    dark: mr[800]
  };
}
function mb(e = "light") {
  return e === "dark" ? {
    main: gr[400],
    light: gr[300],
    dark: gr[700]
  } : {
    main: gr[700],
    light: gr[500],
    dark: gr[900]
  };
}
function yb(e = "light") {
  return e === "dark" ? {
    main: br[400],
    light: br[300],
    dark: br[700]
  } : {
    main: br[800],
    light: br[500],
    dark: br[900]
  };
}
function gb(e = "light") {
  return e === "dark" ? {
    main: Jr[400],
    light: Jr[300],
    dark: Jr[700]
  } : {
    main: "#ed6c02",
    // closest to orange[800] that pass 3:1.
    light: Jr[500],
    dark: Jr[900]
  };
}
function bb(e) {
  return `oklch(from ${e} var(--__l) 0 h / var(--__a))`;
}
function ll(e) {
  const {
    mode: t = "light",
    contrastThreshold: n = 3,
    tonalOffset: r = 0.2,
    colorSpace: s,
    ...i
  } = e, a = e.primary || fb(t), l = e.secondary || pb(t), c = e.error || hb(t), u = e.info || mb(t), d = e.success || yb(t), f = e.warning || gb(t);
  function y(m) {
    if (s)
      return bb(m);
    const b = Yc(m, Pa.text.primary) >= n ? Pa.text.primary : Rf.text.primary;
    if (process.env.NODE_ENV !== "production") {
      const C = Yc(m, b);
      C < 3 && console.error([`MUI: The contrast ratio of ${C}:1 for ${b} on ${m}`, "falls below the WCAG recommended absolute minimum contrast ratio of 3:1.", "https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast"].join(`
`));
    }
    return b;
  }
  const g = ({
    color: m,
    name: b,
    mainShade: C = 500,
    lightShade: O = 300,
    darkShade: w = 700
  }) => {
    if (m = {
      ...m
    }, !m.main && m[C] && (m.main = m[C]), !m.hasOwnProperty("main"))
      throw new Error(process.env.NODE_ENV !== "production" ? `MUI: The color${b ? ` (${b})` : ""} provided to augmentColor(color) is invalid.
The color object needs to have a \`main\` property or a \`${C}\` property.` : sn(11, b ? ` (${b})` : "", C));
    if (typeof m.main != "string")
      throw new Error(process.env.NODE_ENV !== "production" ? `MUI: The color${b ? ` (${b})` : ""} provided to augmentColor(color) is invalid.
\`color.main\` should be a string, but \`${JSON.stringify(m.main)}\` was provided instead.

Did you intend to use one of the following approaches?

import { green } from "@mui/material/colors";

const theme1 = createTheme({ palette: {
  primary: green,
} });

const theme2 = createTheme({ palette: {
  primary: { main: green[500] },
} });` : sn(12, b ? ` (${b})` : "", JSON.stringify(m.main)));
    return s ? (Jc(s, m, "light", O, r), Jc(s, m, "dark", w, r)) : (Zc(m, "light", O, r), Zc(m, "dark", w, r)), m.contrastText || (m.contrastText = y(m.main)), m;
  };
  let h;
  return t === "light" ? h = Tf() : t === "dark" && (h = kf()), process.env.NODE_ENV !== "production" && (h || console.error(`MUI: The palette mode \`${t}\` is not supported.`)), wt({
    // A collection of common colors.
    common: {
      ...To
    },
    // prevent mutable object.
    // The palette mode, can be light or dark.
    mode: t,
    // The colors used to represent primary interface elements for a user.
    primary: g({
      color: a,
      name: "primary"
    }),
    // The colors used to represent secondary interface elements for a user.
    secondary: g({
      color: l,
      name: "secondary",
      mainShade: "A400",
      lightShade: "A200",
      darkShade: "A700"
    }),
    // The colors used to represent interface elements that the user should be made aware of.
    error: g({
      color: c,
      name: "error"
    }),
    // The colors used to represent potentially dangerous actions or important messages.
    warning: g({
      color: f,
      name: "warning"
    }),
    // The colors used to present information to the user that is neutral and not necessarily important.
    info: g({
      color: u,
      name: "info"
    }),
    // The colors used to indicate the successful completion of an action that user triggered.
    success: g({
      color: d,
      name: "success"
    }),
    // The grey colors.
    grey: db,
    // Used by `getContrastText()` to maximize the contrast between
    // the background and the text.
    contrastThreshold: n,
    // Takes a background color and returns the text color that maximizes the contrast.
    getContrastText: y,
    // Generate a rich color object.
    augmentColor: g,
    // Used by the functions below to shift a color's luminance by approximately
    // two indexes within its tonal palette.
    // E.g., shift from Red 500 to Red 300 or Red 700.
    tonalOffset: r,
    // The light and dark mode object.
    ...h
  }, i);
}
function vb(e) {
  const t = {};
  return Object.entries(e).forEach((r) => {
    const [s, i] = r;
    typeof i == "object" && (t[s] = `${i.fontStyle ? `${i.fontStyle} ` : ""}${i.fontVariant ? `${i.fontVariant} ` : ""}${i.fontWeight ? `${i.fontWeight} ` : ""}${i.fontStretch ? `${i.fontStretch} ` : ""}${i.fontSize || ""}${i.lineHeight ? `/${i.lineHeight} ` : ""}${i.fontFamily || ""}`);
  }), t;
}
function xb(e, t) {
  return {
    toolbar: {
      minHeight: 56,
      [e.up("xs")]: {
        "@media (orientation: landscape)": {
          minHeight: 48
        }
      },
      [e.up("sm")]: {
        minHeight: 64
      }
    },
    ...t
  };
}
function wb(e) {
  return Math.round(e * 1e5) / 1e5;
}
const eu = {
  textTransform: "uppercase"
}, tu = '"Roboto", "Helvetica", "Arial", sans-serif';
function Sb(e, t) {
  const {
    fontFamily: n = tu,
    // The default font size of the Material Specification.
    fontSize: r = 14,
    // px
    fontWeightLight: s = 300,
    fontWeightRegular: i = 400,
    fontWeightMedium: a = 500,
    fontWeightBold: l = 700,
    // Tell MUI what's the font-size on the html element.
    // 16px is the default font-size used by browsers.
    htmlFontSize: c = 16,
    // Apply the CSS properties to all the variants.
    allVariants: u,
    pxToRem: d,
    ...f
  } = typeof t == "function" ? t(e) : t;
  process.env.NODE_ENV !== "production" && (typeof r != "number" && console.error("MUI: `fontSize` is required to be a number."), typeof c != "number" && console.error("MUI: `htmlFontSize` is required to be a number."));
  const y = r / 14, g = d || ((m) => `${m / c * y}rem`), h = (m, b, C, O, w) => ({
    fontFamily: n,
    fontWeight: m,
    fontSize: g(b),
    // Unitless following https://meyerweb.com/eric/thoughts/2006/02/08/unitless-line-heights/
    lineHeight: C,
    // The letter spacing was designed for the Roboto font-family. Using the same letter-spacing
    // across font-families can cause issues with the kerning.
    ...n === tu ? {
      letterSpacing: `${wb(O / b)}em`
    } : {},
    ...w,
    ...u
  }), p = {
    h1: h(s, 96, 1.167, -1.5),
    h2: h(s, 60, 1.2, -0.5),
    h3: h(i, 48, 1.167, 0),
    h4: h(i, 34, 1.235, 0.25),
    h5: h(i, 24, 1.334, 0),
    h6: h(a, 20, 1.6, 0.15),
    subtitle1: h(i, 16, 1.75, 0.15),
    subtitle2: h(a, 14, 1.57, 0.1),
    body1: h(i, 16, 1.5, 0.15),
    body2: h(i, 14, 1.43, 0.15),
    button: h(a, 14, 1.75, 0.4, eu),
    caption: h(i, 12, 1.66, 0.4),
    overline: h(i, 12, 2.66, 1, eu),
    // TODO v6: Remove handling of 'inherit' variant from the theme as it is already handled in Material UI's Typography component. Also, remember to remove the associated types.
    inherit: {
      fontFamily: "inherit",
      fontWeight: "inherit",
      fontSize: "inherit",
      lineHeight: "inherit",
      letterSpacing: "inherit"
    }
  };
  return wt({
    htmlFontSize: c,
    pxToRem: g,
    fontFamily: n,
    fontSize: r,
    fontWeightLight: s,
    fontWeightRegular: i,
    fontWeightMedium: a,
    fontWeightBold: l,
    ...p
  }, f, {
    clone: !1
    // No need to clone deep
  });
}
const Eb = 0.2, Ob = 0.14, Cb = 0.12;
function Ke(...e) {
  return [`${e[0]}px ${e[1]}px ${e[2]}px ${e[3]}px rgba(0,0,0,${Eb})`, `${e[4]}px ${e[5]}px ${e[6]}px ${e[7]}px rgba(0,0,0,${Ob})`, `${e[8]}px ${e[9]}px ${e[10]}px ${e[11]}px rgba(0,0,0,${Cb})`].join(",");
}
const Pb = ["none", Ke(0, 2, 1, -1, 0, 1, 1, 0, 0, 1, 3, 0), Ke(0, 3, 1, -2, 0, 2, 2, 0, 0, 1, 5, 0), Ke(0, 3, 3, -2, 0, 3, 4, 0, 0, 1, 8, 0), Ke(0, 2, 4, -1, 0, 4, 5, 0, 0, 1, 10, 0), Ke(0, 3, 5, -1, 0, 5, 8, 0, 0, 1, 14, 0), Ke(0, 3, 5, -1, 0, 6, 10, 0, 0, 1, 18, 0), Ke(0, 4, 5, -2, 0, 7, 10, 1, 0, 2, 16, 1), Ke(0, 5, 5, -3, 0, 8, 10, 1, 0, 3, 14, 2), Ke(0, 5, 6, -3, 0, 9, 12, 1, 0, 3, 16, 2), Ke(0, 6, 6, -3, 0, 10, 14, 1, 0, 4, 18, 3), Ke(0, 6, 7, -4, 0, 11, 15, 1, 0, 4, 20, 3), Ke(0, 7, 8, -4, 0, 12, 17, 2, 0, 5, 22, 4), Ke(0, 7, 8, -4, 0, 13, 19, 2, 0, 5, 24, 4), Ke(0, 7, 9, -4, 0, 14, 21, 2, 0, 5, 26, 4), Ke(0, 8, 9, -5, 0, 15, 22, 2, 0, 6, 28, 5), Ke(0, 8, 10, -5, 0, 16, 24, 2, 0, 6, 30, 5), Ke(0, 8, 11, -5, 0, 17, 26, 2, 0, 6, 32, 5), Ke(0, 9, 11, -5, 0, 18, 28, 2, 0, 7, 34, 6), Ke(0, 9, 12, -6, 0, 19, 29, 2, 0, 7, 36, 6), Ke(0, 10, 13, -6, 0, 20, 31, 3, 0, 8, 38, 7), Ke(0, 10, 13, -6, 0, 21, 33, 3, 0, 8, 40, 7), Ke(0, 10, 14, -6, 0, 22, 35, 3, 0, 8, 42, 7), Ke(0, 11, 14, -7, 0, 23, 36, 3, 0, 9, 44, 8), Ke(0, 11, 15, -7, 0, 24, 38, 3, 0, 9, 46, 8)], Tb = {
  // This is the most common easing curve.
  easeInOut: "cubic-bezier(0.4, 0, 0.2, 1)",
  // Objects enter the screen at full velocity from off-screen and
  // slowly decelerate to a resting point.
  easeOut: "cubic-bezier(0.0, 0, 0.2, 1)",
  // Objects leave the screen at full velocity. They do not decelerate when off-screen.
  easeIn: "cubic-bezier(0.4, 0, 1, 1)",
  // The sharp curve is used by objects that may return to the screen at any time.
  sharp: "cubic-bezier(0.4, 0, 0.6, 1)"
}, Rb = {
  shortest: 150,
  shorter: 200,
  short: 250,
  // most basic recommended timing
  standard: 300,
  // this is to be used in complex animations
  complex: 375,
  // recommended when something is entering screen
  enteringScreen: 225,
  // recommended when something is leaving screen
  leavingScreen: 195
};
function nu(e) {
  return `${Math.round(e)}ms`;
}
function kb(e) {
  if (!e)
    return 0;
  const t = e / 36;
  return Math.min(Math.round((4 + 15 * t ** 0.25 + t / 5) * 10), 3e3);
}
function Db(e) {
  const t = {
    ...Tb,
    ...e.easing
  }, n = {
    ...Rb,
    ...e.duration
  };
  return {
    getAutoHeightDuration: kb,
    create: (s = ["all"], i = {}) => {
      const {
        duration: a = n.standard,
        easing: l = t.easeInOut,
        delay: c = 0,
        ...u
      } = i;
      if (process.env.NODE_ENV !== "production") {
        const d = (y) => typeof y == "string", f = (y) => !Number.isNaN(parseFloat(y));
        !d(s) && !Array.isArray(s) && console.error('MUI: Argument "props" must be a string or Array.'), !f(a) && !d(a) && console.error(`MUI: Argument "duration" must be a number or a string but found ${a}.`), d(l) || console.error('MUI: Argument "easing" must be a string.'), !f(c) && !d(c) && console.error('MUI: Argument "delay" must be a number or a string.'), typeof i != "object" && console.error(["MUI: Secong argument of transition.create must be an object.", "Arguments should be either `create('prop1', options)` or `create(['prop1', 'prop2'], options)`"].join(`
`)), Object.keys(u).length !== 0 && console.error(`MUI: Unrecognized argument(s) [${Object.keys(u).join(",")}].`);
      }
      return (Array.isArray(s) ? s : [s]).map((d) => `${d} ${typeof a == "string" ? a : nu(a)} ${l} ${typeof c == "string" ? c : nu(c)}`).join(",");
    },
    ...e,
    easing: t,
    duration: n
  };
}
const Mb = {
  mobileStepper: 1e3,
  fab: 1050,
  speedDial: 1050,
  appBar: 1100,
  drawer: 1200,
  modal: 1300,
  snackbar: 1400,
  tooltip: 1500
};
function Ib(e) {
  return Jt(e) || typeof e > "u" || typeof e == "string" || typeof e == "boolean" || typeof e == "number" || Array.isArray(e);
}
function Df(e = {}) {
  const t = {
    ...e
  };
  function n(r) {
    const s = Object.entries(r);
    for (let i = 0; i < s.length; i++) {
      const [a, l] = s[i];
      !Ib(l) || a.startsWith("unstable_") ? delete r[a] : Jt(l) && (r[a] = {
        ...l
      }, n(r[a]));
    }
  }
  return n(t), `import { unstable_createBreakpoints as createBreakpoints, createTransitions } from '@mui/material/styles';

const theme = ${JSON.stringify(t, null, 2)};

theme.breakpoints = createBreakpoints(theme.breakpoints || {});
theme.transitions = createTransitions(theme.transitions || {});

export default theme;`;
}
function ru(e) {
  return typeof e == "number" ? `${(e * 100).toFixed(0)}%` : `calc((${e}) * 100%)`;
}
const Nb = (e) => {
  if (!Number.isNaN(+e))
    return +e;
  const t = e.match(/\d*\.?\d+/g);
  if (!t)
    return 0;
  let n = 0;
  for (let r = 0; r < t.length; r += 1)
    n += +t[r];
  return n;
};
function Ab(e) {
  Object.assign(e, {
    alpha(t, n) {
      const r = this || e;
      return r.colorSpace ? `oklch(from ${t} l c h / ${typeof n == "string" ? `calc(${n})` : n})` : r.vars ? `rgba(${t.replace(/var\(--([^,\s)]+)(?:,[^)]+)?\)+/g, "var(--$1Channel)")} / ${typeof n == "string" ? `calc(${n})` : n})` : an(t, Nb(n));
    },
    lighten(t, n) {
      const r = this || e;
      return r.colorSpace ? `color-mix(in ${r.colorSpace}, ${t}, #fff ${ru(n)})` : fi(t, n);
    },
    darken(t, n) {
      const r = this || e;
      return r.colorSpace ? `color-mix(in ${r.colorSpace}, ${t}, #000 ${ru(n)})` : di(t, n);
    }
  });
}
function Ta(e = {}, ...t) {
  const {
    breakpoints: n,
    mixins: r = {},
    spacing: s,
    palette: i = {},
    transitions: a = {},
    typography: l = {},
    shape: c,
    colorSpace: u,
    ...d
  } = e;
  if (e.vars && // The error should throw only for the root theme creation because user is not allowed to use a custom node `vars`.
  // `generateThemeVars` is the closest identifier for checking that the `options` is a result of `createTheme` with CSS variables so that user can create new theme for nested ThemeProvider.
  e.generateThemeVars === void 0)
    throw new Error(process.env.NODE_ENV !== "production" ? "MUI: `vars` is a private field used for CSS variables support.\nPlease use another name or follow the [docs](https://mui.com/material-ui/customization/css-theme-variables/usage/) to enable the feature." : sn(20));
  const f = ll({
    ...i,
    colorSpace: u
  }), y = sl(e);
  let g = wt(y, {
    mixins: xb(y.breakpoints, r),
    palette: f,
    // Don't use [...shadows] until you've verified its transpiled code is not invoking the iterator protocol.
    shadows: Pb.slice(),
    typography: Sb(f, l),
    transitions: Db(a),
    zIndex: {
      ...Mb
    }
  });
  if (g = wt(g, d), g = t.reduce((h, p) => wt(h, p), g), process.env.NODE_ENV !== "production") {
    const h = ["active", "checked", "completed", "disabled", "error", "expanded", "focused", "focusVisible", "required", "selected"], p = (m, b) => {
      let C;
      for (C in m) {
        const O = m[C];
        if (h.includes(C) && Object.keys(O).length > 0) {
          if (process.env.NODE_ENV !== "production") {
            const w = we("", C);
            console.error([`MUI: The \`${b}\` component increases the CSS specificity of the \`${C}\` internal state.`, "You can not override it like this: ", JSON.stringify(m, null, 2), "", `Instead, you need to use the '&.${w}' syntax:`, JSON.stringify({
              root: {
                [`&.${w}`]: O
              }
            }, null, 2), "", "https://mui.com/r/state-classes-guide"].join(`
`));
          }
          m[C] = {};
        }
      }
    };
    Object.keys(g.components).forEach((m) => {
      const b = g.components[m].styleOverrides;
      b && m.startsWith("Mui") && p(b, m);
    });
  }
  return g.unstable_sxConfig = {
    ...Ho,
    ...d?.unstable_sxConfig
  }, g.unstable_sx = function(p) {
    return Nr({
      sx: p,
      theme: this
    });
  }, g.toRuntimeSource = Df, Ab(g), g;
}
function Ra(e) {
  let t;
  return e < 1 ? t = 5.11916 * e ** 2 : t = 4.5 * Math.log(e + 1) + 2, Math.round(t * 10) / 1e3;
}
const Fb = [...Array(25)].map((e, t) => {
  if (t === 0)
    return "none";
  const n = Ra(t);
  return `linear-gradient(rgba(255 255 255 / ${n}), rgba(255 255 255 / ${n}))`;
});
function Mf(e) {
  return {
    inputPlaceholder: e === "dark" ? 0.5 : 0.42,
    inputUnderline: e === "dark" ? 0.7 : 0.42,
    switchTrackDisabled: e === "dark" ? 0.2 : 0.12,
    switchTrack: e === "dark" ? 0.3 : 0.38
  };
}
function If(e) {
  return e === "dark" ? Fb : [];
}
function $b(e) {
  const {
    palette: t = {
      mode: "light"
    },
    // need to cast to avoid module augmentation test
    opacity: n,
    overlays: r,
    colorSpace: s,
    ...i
  } = e, a = ll({
    ...t,
    colorSpace: s
  });
  return {
    palette: a,
    opacity: {
      ...Mf(a.mode),
      ...n
    },
    overlays: r || If(a.mode),
    ...i
  };
}
function jb(e) {
  return !!e[0].match(/(cssVarPrefix|colorSchemeSelector|modularCssLayers|rootSelector|typography|mixins|breakpoints|direction|transitions)/) || !!e[0].match(/sxConfig$/) || // ends with sxConfig
  e[0] === "palette" && !!e[1]?.match(/(mode|contrastThreshold|tonalOffset)/);
}
const _b = (e) => [...[...Array(25)].map((t, n) => `--${e ? `${e}-` : ""}overlays-${n}`), `--${e ? `${e}-` : ""}palette-AppBar-darkBg`, `--${e ? `${e}-` : ""}palette-AppBar-darkColor`], Vb = (e) => (t, n) => {
  const r = e.rootSelector || ":root", s = e.colorSchemeSelector;
  let i = s;
  if (s === "class" && (i = ".%s"), s === "data" && (i = "[data-%s]"), s?.startsWith("data-") && !s.includes("%s") && (i = `[${s}="%s"]`), e.defaultColorScheme === t) {
    if (t === "dark") {
      const a = {};
      return _b(e.cssVarPrefix).forEach((l) => {
        a[l] = n[l], delete n[l];
      }), i === "media" ? {
        [r]: n,
        "@media (prefers-color-scheme: dark)": {
          [r]: a
        }
      } : i ? {
        [i.replace("%s", t)]: a,
        [`${r}, ${i.replace("%s", t)}`]: n
      } : {
        [r]: {
          ...n,
          ...a
        }
      };
    }
    if (i && i !== "media")
      return `${r}, ${i.replace("%s", String(t))}`;
  } else if (t) {
    if (i === "media")
      return {
        [`@media (prefers-color-scheme: ${String(t)})`]: {
          [r]: n
        }
      };
    if (i)
      return i.replace("%s", String(t));
  }
  return r;
};
function Lb(e, t) {
  t.forEach((n) => {
    e[n] || (e[n] = {});
  });
}
function Z(e, t, n) {
  !e[t] && n && (e[t] = n);
}
function ho(e) {
  return typeof e != "string" || !e.startsWith("hsl") ? e : Cf(e);
}
function fn(e, t) {
  `${t}Channel` in e || (e[`${t}Channel`] = po(ho(e[t]), `MUI: Can't create \`palette.${t}Channel\` because \`palette.${t}\` is not one of these formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().
To suppress this warning, you need to explicitly provide the \`palette.${t}Channel\` as a string (in rgb format, for example "12 12 12") or undefined if you want to remove the channel token.`));
}
function Bb(e) {
  return typeof e == "number" ? `${e}px` : typeof e == "string" || typeof e == "function" || Array.isArray(e) ? e : "8px";
}
const Kt = (e) => {
  try {
    return e();
  } catch {
  }
}, Wb = (e = "mui") => ib(e);
function ea(e, t, n, r, s) {
  if (!n)
    return;
  n = n === !0 ? {} : n;
  const i = s === "dark" ? "dark" : "light";
  if (!r) {
    t[s] = $b({
      ...n,
      palette: {
        mode: i,
        ...n?.palette
      },
      colorSpace: e
    });
    return;
  }
  const {
    palette: a,
    ...l
  } = Ta({
    ...r,
    palette: {
      mode: i,
      ...n?.palette
    },
    colorSpace: e
  });
  return t[s] = {
    ...n,
    palette: a,
    opacity: {
      ...Mf(i),
      ...n?.opacity
    },
    overlays: n?.overlays || If(i)
  }, l;
}
function zb(e = {}, ...t) {
  const {
    colorSchemes: n = {
      light: !0
    },
    defaultColorScheme: r,
    disableCssColorScheme: s = !1,
    cssVarPrefix: i = "mui",
    nativeColor: a = !1,
    shouldSkipGeneratingVar: l = jb,
    colorSchemeSelector: c = n.light && n.dark ? "media" : void 0,
    rootSelector: u = ":root",
    ...d
  } = e, f = Object.keys(n)[0], y = r || (n.light && f !== "light" ? "light" : f), g = Wb(i), {
    [y]: h,
    light: p,
    dark: m,
    ...b
  } = n, C = {
    ...b
  };
  let O = h;
  if ((y === "dark" && !("dark" in n) || y === "light" && !("light" in n)) && (O = !0), !O)
    throw new Error(process.env.NODE_ENV !== "production" ? `MUI: The \`colorSchemes.${y}\` option is either missing or invalid.` : sn(21, y));
  let w;
  a && (w = "oklch");
  const S = ea(w, C, O, d, y);
  p && !C.light && ea(w, C, p, void 0, "light"), m && !C.dark && ea(w, C, m, void 0, "dark");
  let P = {
    defaultColorScheme: y,
    ...S,
    cssVarPrefix: i,
    colorSchemeSelector: c,
    rootSelector: u,
    getCssVar: g,
    colorSchemes: C,
    font: {
      ...vb(S.typography),
      ...S.font
    },
    spacing: Bb(d.spacing)
  };
  Object.keys(P.colorSchemes).forEach((k) => {
    const v = P.colorSchemes[k].palette, D = (I) => {
      const N = I.split("-"), _ = N[1], G = N[2];
      return g(I, v[_][G]);
    };
    v.mode === "light" && (Z(v.common, "background", "#fff"), Z(v.common, "onBackground", "#000")), v.mode === "dark" && (Z(v.common, "background", "#000"), Z(v.common, "onBackground", "#fff"));
    function T(I, N, _) {
      if (w) {
        let G;
        return I === zn && (G = `transparent ${((1 - _) * 100).toFixed(0)}%`), I === Le && (G = `#000 ${(_ * 100).toFixed(0)}%`), I === Be && (G = `#fff ${(_ * 100).toFixed(0)}%`), `color-mix(in ${w}, ${N}, ${G})`;
      }
      return I(N, _);
    }
    if (Lb(v, ["Alert", "AppBar", "Avatar", "Button", "Chip", "FilledInput", "LinearProgress", "Skeleton", "Slider", "SnackbarContent", "SpeedDialAction", "StepConnector", "StepContent", "Switch", "TableCell", "Tooltip"]), v.mode === "light") {
      Z(v.Alert, "errorColor", T(Le, v.error.light, 0.6)), Z(v.Alert, "infoColor", T(Le, v.info.light, 0.6)), Z(v.Alert, "successColor", T(Le, v.success.light, 0.6)), Z(v.Alert, "warningColor", T(Le, v.warning.light, 0.6)), Z(v.Alert, "errorFilledBg", D("palette-error-main")), Z(v.Alert, "infoFilledBg", D("palette-info-main")), Z(v.Alert, "successFilledBg", D("palette-success-main")), Z(v.Alert, "warningFilledBg", D("palette-warning-main")), Z(v.Alert, "errorFilledColor", Kt(() => v.getContrastText(v.error.main))), Z(v.Alert, "infoFilledColor", Kt(() => v.getContrastText(v.info.main))), Z(v.Alert, "successFilledColor", Kt(() => v.getContrastText(v.success.main))), Z(v.Alert, "warningFilledColor", Kt(() => v.getContrastText(v.warning.main))), Z(v.Alert, "errorStandardBg", T(Be, v.error.light, 0.9)), Z(v.Alert, "infoStandardBg", T(Be, v.info.light, 0.9)), Z(v.Alert, "successStandardBg", T(Be, v.success.light, 0.9)), Z(v.Alert, "warningStandardBg", T(Be, v.warning.light, 0.9)), Z(v.Alert, "errorIconColor", D("palette-error-main")), Z(v.Alert, "infoIconColor", D("palette-info-main")), Z(v.Alert, "successIconColor", D("palette-success-main")), Z(v.Alert, "warningIconColor", D("palette-warning-main")), Z(v.AppBar, "defaultBg", D("palette-grey-100")), Z(v.Avatar, "defaultBg", D("palette-grey-400")), Z(v.Button, "inheritContainedBg", D("palette-grey-300")), Z(v.Button, "inheritContainedHoverBg", D("palette-grey-A100")), Z(v.Chip, "defaultBorder", D("palette-grey-400")), Z(v.Chip, "defaultAvatarColor", D("palette-grey-700")), Z(v.Chip, "defaultIconColor", D("palette-grey-700")), Z(v.FilledInput, "bg", "rgba(0, 0, 0, 0.06)"), Z(v.FilledInput, "hoverBg", "rgba(0, 0, 0, 0.09)"), Z(v.FilledInput, "disabledBg", "rgba(0, 0, 0, 0.12)"), Z(v.LinearProgress, "primaryBg", T(Be, v.primary.main, 0.62)), Z(v.LinearProgress, "secondaryBg", T(Be, v.secondary.main, 0.62)), Z(v.LinearProgress, "errorBg", T(Be, v.error.main, 0.62)), Z(v.LinearProgress, "infoBg", T(Be, v.info.main, 0.62)), Z(v.LinearProgress, "successBg", T(Be, v.success.main, 0.62)), Z(v.LinearProgress, "warningBg", T(Be, v.warning.main, 0.62)), Z(v.Skeleton, "bg", w ? T(zn, v.text.primary, 0.11) : `rgba(${D("palette-text-primaryChannel")} / 0.11)`), Z(v.Slider, "primaryTrack", T(Be, v.primary.main, 0.62)), Z(v.Slider, "secondaryTrack", T(Be, v.secondary.main, 0.62)), Z(v.Slider, "errorTrack", T(Be, v.error.main, 0.62)), Z(v.Slider, "infoTrack", T(Be, v.info.main, 0.62)), Z(v.Slider, "successTrack", T(Be, v.success.main, 0.62)), Z(v.Slider, "warningTrack", T(Be, v.warning.main, 0.62));
      const I = w ? T(Le, v.background.default, 0.6825) : ys(v.background.default, 0.8);
      Z(v.SnackbarContent, "bg", I), Z(v.SnackbarContent, "color", Kt(() => w ? Pa.text.primary : v.getContrastText(I))), Z(v.SpeedDialAction, "fabHoverBg", ys(v.background.paper, 0.15)), Z(v.StepConnector, "border", D("palette-grey-400")), Z(v.StepContent, "border", D("palette-grey-400")), Z(v.Switch, "defaultColor", D("palette-common-white")), Z(v.Switch, "defaultDisabledColor", D("palette-grey-100")), Z(v.Switch, "primaryDisabledColor", T(Be, v.primary.main, 0.62)), Z(v.Switch, "secondaryDisabledColor", T(Be, v.secondary.main, 0.62)), Z(v.Switch, "errorDisabledColor", T(Be, v.error.main, 0.62)), Z(v.Switch, "infoDisabledColor", T(Be, v.info.main, 0.62)), Z(v.Switch, "successDisabledColor", T(Be, v.success.main, 0.62)), Z(v.Switch, "warningDisabledColor", T(Be, v.warning.main, 0.62)), Z(v.TableCell, "border", T(Be, T(zn, v.divider, 1), 0.88)), Z(v.Tooltip, "bg", T(zn, v.grey[700], 0.92));
    }
    if (v.mode === "dark") {
      Z(v.Alert, "errorColor", T(Be, v.error.light, 0.6)), Z(v.Alert, "infoColor", T(Be, v.info.light, 0.6)), Z(v.Alert, "successColor", T(Be, v.success.light, 0.6)), Z(v.Alert, "warningColor", T(Be, v.warning.light, 0.6)), Z(v.Alert, "errorFilledBg", D("palette-error-dark")), Z(v.Alert, "infoFilledBg", D("palette-info-dark")), Z(v.Alert, "successFilledBg", D("palette-success-dark")), Z(v.Alert, "warningFilledBg", D("palette-warning-dark")), Z(v.Alert, "errorFilledColor", Kt(() => v.getContrastText(v.error.dark))), Z(v.Alert, "infoFilledColor", Kt(() => v.getContrastText(v.info.dark))), Z(v.Alert, "successFilledColor", Kt(() => v.getContrastText(v.success.dark))), Z(v.Alert, "warningFilledColor", Kt(() => v.getContrastText(v.warning.dark))), Z(v.Alert, "errorStandardBg", T(Le, v.error.light, 0.9)), Z(v.Alert, "infoStandardBg", T(Le, v.info.light, 0.9)), Z(v.Alert, "successStandardBg", T(Le, v.success.light, 0.9)), Z(v.Alert, "warningStandardBg", T(Le, v.warning.light, 0.9)), Z(v.Alert, "errorIconColor", D("palette-error-main")), Z(v.Alert, "infoIconColor", D("palette-info-main")), Z(v.Alert, "successIconColor", D("palette-success-main")), Z(v.Alert, "warningIconColor", D("palette-warning-main")), Z(v.AppBar, "defaultBg", D("palette-grey-900")), Z(v.AppBar, "darkBg", D("palette-background-paper")), Z(v.AppBar, "darkColor", D("palette-text-primary")), Z(v.Avatar, "defaultBg", D("palette-grey-600")), Z(v.Button, "inheritContainedBg", D("palette-grey-800")), Z(v.Button, "inheritContainedHoverBg", D("palette-grey-700")), Z(v.Chip, "defaultBorder", D("palette-grey-700")), Z(v.Chip, "defaultAvatarColor", D("palette-grey-300")), Z(v.Chip, "defaultIconColor", D("palette-grey-300")), Z(v.FilledInput, "bg", "rgba(255, 255, 255, 0.09)"), Z(v.FilledInput, "hoverBg", "rgba(255, 255, 255, 0.13)"), Z(v.FilledInput, "disabledBg", "rgba(255, 255, 255, 0.12)"), Z(v.LinearProgress, "primaryBg", T(Le, v.primary.main, 0.5)), Z(v.LinearProgress, "secondaryBg", T(Le, v.secondary.main, 0.5)), Z(v.LinearProgress, "errorBg", T(Le, v.error.main, 0.5)), Z(v.LinearProgress, "infoBg", T(Le, v.info.main, 0.5)), Z(v.LinearProgress, "successBg", T(Le, v.success.main, 0.5)), Z(v.LinearProgress, "warningBg", T(Le, v.warning.main, 0.5)), Z(v.Skeleton, "bg", w ? T(zn, v.text.primary, 0.13) : `rgba(${D("palette-text-primaryChannel")} / 0.13)`), Z(v.Slider, "primaryTrack", T(Le, v.primary.main, 0.5)), Z(v.Slider, "secondaryTrack", T(Le, v.secondary.main, 0.5)), Z(v.Slider, "errorTrack", T(Le, v.error.main, 0.5)), Z(v.Slider, "infoTrack", T(Le, v.info.main, 0.5)), Z(v.Slider, "successTrack", T(Le, v.success.main, 0.5)), Z(v.Slider, "warningTrack", T(Le, v.warning.main, 0.5));
      const I = w ? T(Be, v.background.default, 0.985) : ys(v.background.default, 0.98);
      Z(v.SnackbarContent, "bg", I), Z(v.SnackbarContent, "color", Kt(() => w ? Rf.text.primary : v.getContrastText(I))), Z(v.SpeedDialAction, "fabHoverBg", ys(v.background.paper, 0.15)), Z(v.StepConnector, "border", D("palette-grey-600")), Z(v.StepContent, "border", D("palette-grey-600")), Z(v.Switch, "defaultColor", D("palette-grey-300")), Z(v.Switch, "defaultDisabledColor", D("palette-grey-600")), Z(v.Switch, "primaryDisabledColor", T(Le, v.primary.main, 0.55)), Z(v.Switch, "secondaryDisabledColor", T(Le, v.secondary.main, 0.55)), Z(v.Switch, "errorDisabledColor", T(Le, v.error.main, 0.55)), Z(v.Switch, "infoDisabledColor", T(Le, v.info.main, 0.55)), Z(v.Switch, "successDisabledColor", T(Le, v.success.main, 0.55)), Z(v.Switch, "warningDisabledColor", T(Le, v.warning.main, 0.55)), Z(v.TableCell, "border", T(Le, T(zn, v.divider, 1), 0.68)), Z(v.Tooltip, "bg", T(zn, v.grey[700], 0.92));
    }
    fn(v.background, "default"), fn(v.background, "paper"), fn(v.common, "background"), fn(v.common, "onBackground"), fn(v, "divider"), Object.keys(v).forEach((I) => {
      const N = v[I];
      I !== "tonalOffset" && N && typeof N == "object" && (N.main && Z(v[I], "mainChannel", po(ho(N.main))), N.light && Z(v[I], "lightChannel", po(ho(N.light))), N.dark && Z(v[I], "darkChannel", po(ho(N.dark))), N.contrastText && Z(v[I], "contrastTextChannel", po(ho(N.contrastText))), I === "text" && (fn(v[I], "primary"), fn(v[I], "secondary")), I === "action" && (N.active && fn(v[I], "active"), N.selected && fn(v[I], "selected")));
    });
  }), P = t.reduce((k, v) => wt(k, v), P);
  const M = {
    prefix: i,
    disableCssColorScheme: s,
    shouldSkipGeneratingVar: l,
    getSelector: Vb(P),
    enableContrastVars: a
  }, {
    vars: F,
    generateThemeVars: A,
    generateStyleSheets: $
  } = cb(P, M);
  return P.vars = F, Object.entries(P.colorSchemes[P.defaultColorScheme]).forEach(([k, v]) => {
    P[k] = v;
  }), P.generateThemeVars = A, P.generateStyleSheets = $, P.generateSpacing = function() {
    return pf(d.spacing, rl(this));
  }, P.getColorSchemeSelector = ub(c), P.spacing = P.generateSpacing(), P.shouldSkipGeneratingVar = l, P.unstable_sxConfig = {
    ...Ho,
    ...d?.unstable_sxConfig
  }, P.unstable_sx = function(v) {
    return Nr({
      sx: v,
      theme: this
    });
  }, P.toRuntimeSource = Df, P;
}
function ou(e, t, n) {
  e.colorSchemes && n && (e.colorSchemes[t] = {
    ...n !== !0 && n,
    palette: ll({
      ...n === !0 ? {} : n.palette,
      mode: t
    })
    // cast type to skip module augmentation test
  });
}
function Ub(e = {}, ...t) {
  const {
    palette: n,
    cssVariables: r = !1,
    colorSchemes: s = n ? void 0 : {
      light: !0
    },
    defaultColorScheme: i = n?.mode,
    ...a
  } = e, l = i || "light", c = s?.[l], u = {
    ...s,
    ...n ? {
      [l]: {
        ...typeof c != "boolean" && c,
        palette: n
      }
    } : void 0
  };
  if (r === !1) {
    if (!("colorSchemes" in e))
      return Ta(e, ...t);
    let d = n;
    "palette" in e || u[l] && (u[l] !== !0 ? d = u[l].palette : l === "dark" && (d = {
      mode: "dark"
    }));
    const f = Ta({
      ...e,
      palette: d
    }, ...t);
    return f.defaultColorScheme = l, f.colorSchemes = u, f.palette.mode === "light" && (f.colorSchemes.light = {
      ...u.light !== !0 && u.light,
      palette: f.palette
    }, ou(f, "dark", u.dark)), f.palette.mode === "dark" && (f.colorSchemes.dark = {
      ...u.dark !== !0 && u.dark,
      palette: f.palette
    }, ou(f, "light", u.light)), f;
  }
  return !n && !("light" in u) && l === "light" && (u.light = !0), zb({
    ...a,
    colorSchemes: u,
    defaultColorScheme: l,
    ...typeof r != "boolean" && r
  }, ...t);
}
const pi = Ub();
function zr() {
  const e = il(pi);
  return process.env.NODE_ENV !== "production" && x.useDebugValue(e), e[Yo] || e;
}
function Ze({
  props: e,
  name: t
}) {
  return Dg({
    props: e,
    name: t,
    defaultTheme: pi,
    themeId: Yo
  });
}
function Nf(e) {
  return e !== "ownerState" && e !== "theme" && e !== "sx" && e !== "as";
}
const qt = (e) => Nf(e) && e !== "classes", Q = zg({
  themeId: Yo,
  defaultTheme: pi,
  rootShouldForwardProp: qt
}), lt = o.oneOfType([o.func, o.object]);
function $t(e, t, n) {
  return typeof e == "function" ? e(t, n) : e;
}
const eo = (e, t) => e.length !== t.length ? !1 : t.every((n) => e.includes(n)), qb = ({
  openTo: e,
  defaultOpenTo: t,
  views: n,
  defaultViews: r
}) => {
  const s = n ?? r;
  let i;
  if (e != null)
    i = e;
  else if (s.includes(t))
    i = t;
  else if (s.length > 0)
    i = s[0];
  else
    throw new Error("MUI X: The `views` prop must contain at least one view.");
  return {
    views: s,
    openTo: i
  };
}, Ls = (e, t, n) => {
  let r = t;
  return r = e.setHours(r, e.getHours(n)), r = e.setMinutes(r, e.getMinutes(n)), r = e.setSeconds(r, e.getSeconds(n)), r = e.setMilliseconds(r, e.getMilliseconds(n)), r;
}, Ro = ({
  date: e,
  disableFuture: t,
  disablePast: n,
  maxDate: r,
  minDate: s,
  isDateDisabled: i,
  adapter: a,
  timezone: l
}) => {
  const c = Ls(a, a.date(void 0, l), e);
  n && a.isBefore(s, c) && (s = c), t && a.isAfter(r, c) && (r = c);
  let u = e, d = e;
  for (a.isBefore(e, s) && (u = s, d = null), a.isAfter(e, r) && (d && (d = r), u = null); u || d; ) {
    if (u && a.isAfter(u, r) && (u = null), d && a.isBefore(d, s) && (d = null), u) {
      if (!i(u))
        return u;
      u = a.addDays(u, 1);
    }
    if (d) {
      if (!i(d))
        return d;
      d = a.addDays(d, -1);
    }
  }
  return null;
}, Hb = (e, t) => e.isValid(t) ? t : null, su = (e, t, n) => t == null || !e.isValid(t) ? n : t, Yb = (e, t, n) => !e.isValid(t) && t != null && !e.isValid(n) && n != null ? !0 : e.isEqual(t, n), cl = (e, t) => {
  const r = [e.startOfYear(t)];
  for (; r.length < 12; ) {
    const s = r[r.length - 1];
    r.push(e.addMonths(s, 1));
  }
  return r;
}, Af = (e, t, n) => n === "date" ? e.startOfDay(e.date(void 0, t)) : e.date(void 0, t), Kb = ["year", "month", "day"], iu = (e) => Kb.includes(e), ul = (e, {
  format: t,
  views: n
}, r) => {
  if (t != null)
    return t;
  const s = e.formats;
  return eo(n, ["year"]) ? s.year : eo(n, ["month"]) ? s.month : eo(n, ["day"]) ? s.dayOfMonth : eo(n, ["month", "year"]) ? `${s.month} ${s.year}` : eo(n, ["day", "month"]) ? `${s.month} ${s.dayOfMonth}` : r ? /en/.test(e.getCurrentLocaleCode()) ? s.normalDateWithWeekday : s.normalDate : s.keyboardDate;
}, Gb = (e, t) => {
  const n = e.startOfWeek(t);
  return [0, 1, 2, 3, 4, 5, 6].map((r) => e.addDays(n, r));
}, Xb = ["hours", "minutes", "seconds"], Qb = (e) => Xb.includes(e), au = (e, t) => t.getHours(e) * 3600 + t.getMinutes(e) * 60 + t.getSeconds(e), Zb = (e, t) => (n, r) => e ? t.isAfter(n, r) : au(n, t) > au(r, t), Zt = {
  year: 1,
  month: 2,
  day: 3,
  hours: 4,
  minutes: 5,
  seconds: 6,
  milliseconds: 7
}, Jb = (e) => Math.max(...e.map((t) => Zt[t.type] ?? 1)), to = (e, t, n) => {
  if (t === Zt.year)
    return e.startOfYear(n);
  if (t === Zt.month)
    return e.startOfMonth(n);
  if (t === Zt.day)
    return e.startOfDay(n);
  let r = n;
  return t < Zt.minutes && (r = e.setMinutes(r, 0)), t < Zt.seconds && (r = e.setSeconds(r, 0)), t < Zt.milliseconds && (r = e.setMilliseconds(r, 0)), r;
}, ev = ({
  props: e,
  adapter: t,
  granularity: n,
  timezone: r,
  getTodayDate: s
}) => {
  let i = s ? s() : to(t, n, Af(t, r));
  e.minDate != null && t.isAfterDay(e.minDate, i) && (i = to(t, n, e.minDate)), e.maxDate != null && t.isBeforeDay(e.maxDate, i) && (i = to(t, n, e.maxDate));
  const a = Zb(e.disableIgnoringDatePartForTimeValidation ?? !1, t);
  return e.minTime != null && a(e.minTime, i) && (i = to(t, n, e.disableIgnoringDatePartForTimeValidation ? e.minTime : Ls(t, i, e.minTime))), e.maxTime != null && a(i, e.maxTime) && (i = to(t, n, e.disableIgnoringDatePartForTimeValidation ? e.maxTime : Ls(t, i, e.maxTime))), i;
}, dl = (e, t) => {
  const n = e.formatTokenMap[t];
  if (n == null)
    throw new Error([`MUI X: The token "${t}" is not supported by the Date and Time Pickers.`, "Please try using another token or open an issue on https://github.com/mui/mui-x/issues/new/choose if you think it should be supported."].join(`
`));
  return typeof n == "string" ? {
    type: n,
    contentType: n === "meridiem" ? "letter" : "digit",
    maxLength: void 0
  } : {
    type: n.sectionType,
    contentType: n.contentType,
    maxLength: n.maxLength
  };
}, hi = (e, t) => {
  const n = [], r = e.date(void 0, "default"), s = e.startOfWeek(r), i = e.endOfWeek(r);
  let a = s;
  for (; e.isBefore(a, i); )
    n.push(a), a = e.addDays(a, 1);
  return n.map((l) => e.formatByString(l, t));
}, Ff = (e, t, n, r) => {
  switch (n) {
    case "month":
      return cl(e, e.date(void 0, t)).map((s) => e.formatByString(s, r));
    case "weekDay":
      return hi(e, r);
    case "meridiem": {
      const s = e.date(void 0, t);
      return [e.startOfDay(s), e.endOfDay(s)].map((i) => e.formatByString(i, r));
    }
    default:
      return [];
  }
}, lu = "s", tv = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"], nv = (e) => {
  const t = e.date(void 0);
  return e.formatByString(e.setSeconds(t, 0), lu) === "0" ? tv : Array.from({
    length: 10
  }).map((r, s) => e.formatByString(e.setSeconds(t, s), lu));
}, cr = (e, t) => {
  if (t[0] === "0")
    return e;
  const n = [];
  let r = "";
  for (let s = 0; s < e.length; s += 1) {
    r += e[s];
    const i = t.indexOf(r);
    i > -1 && (n.push(i.toString()), r = "");
  }
  return n.join("");
}, fl = (e, t) => t[0] === "0" ? e : e.split("").map((n) => t[Number(n)]).join(""), cu = (e, t) => {
  const n = cr(e, t);
  return n !== " " && !Number.isNaN(Number(n));
}, pl = (e, t) => Number(e).toString().padStart(t, "0"), $f = (e, t, n, r, s) => {
  if (process.env.NODE_ENV !== "production" && s.type !== "day" && s.contentType === "digit-with-letter")
    throw new Error([`MUI X: The token "${s.format}" is a digit format with letter in it.'
             This type of format is only supported for 'day' sections`].join(`
`));
  if (s.type === "day" && s.contentType === "digit-with-letter") {
    const a = e.setDate(n.longestMonth, t);
    return e.formatByString(a, s.format);
  }
  let i = t.toString();
  return s.hasLeadingZerosInInput && (i = pl(i, s.maxLength)), fl(i, r);
}, hl = (e, t, n) => {
  let r = e.value || e.placeholder;
  const s = t === "non-input" ? e.hasLeadingZerosInFormat : e.hasLeadingZerosInInput;
  return t === "non-input" && e.hasLeadingZerosInInput && !e.hasLeadingZerosInFormat && (r = Number(cr(r, n)).toString()), ["input-rtl", "input-ltr"].includes(t) && e.contentType === "digit" && !s && r.length === 1 && (r = `${r}‎`), t === "input-rtl" && (r = `⁨${r}⁩`), r;
}, uu = (e, t, n, r) => {
  if (process.env.NODE_ENV !== "production" && dl(e, n).type === "weekDay")
    throw new Error("changeSectionValueFormat doesn't support week day formats");
  return e.formatByString(e.parse(t, n), r);
}, rv = (e, t) => e.formatByString(e.date(void 0, "system"), t).length === 4, jf = (e, t, n, r) => {
  if (t !== "digit")
    return !1;
  const s = e.date(void 0, "default");
  switch (n) {
    // We can't use `changeSectionValueFormat`, because  `adapter.parse('1', 'YYYY')` returns `1971` instead of `1`.
    case "year":
      return e.lib === "dayjs" && r === "YY" ? !0 : e.formatByString(e.setYear(s, 1), r).startsWith("0");
    case "month":
      return e.formatByString(e.startOfYear(s), r).length > 1;
    case "day":
      return e.formatByString(e.startOfMonth(s), r).length > 1;
    case "weekDay":
      return e.formatByString(e.startOfWeek(s), r).length > 1;
    case "hours":
      return e.formatByString(e.setHours(s, 1), r).length > 1;
    case "minutes":
      return e.formatByString(e.setMinutes(s, 1), r).length > 1;
    case "seconds":
      return e.formatByString(e.setSeconds(s, 1), r).length > 1;
    default:
      throw new Error("Invalid section type");
  }
}, ov = (e, t, n) => {
  const r = t.some((c) => c.type === "day"), s = [], i = [];
  for (let c = 0; c < t.length; c += 1) {
    const u = t[c];
    r && u.type === "weekDay" || (s.push(u.format), i.push(hl(u, "non-input", n)));
  }
  const a = s.join(" "), l = i.join(" ");
  return e.parse(l, a);
}, sv = (e) => e.map((t) => `${t.startSeparator}${t.value || t.placeholder}${t.endSeparator}`).join(""), iv = (e, t, n) => {
  const s = e.map((i) => {
    const a = hl(i, n ? "input-rtl" : "input-ltr", t);
    return `${i.startSeparator}${a}${i.endSeparator}`;
  }).join("");
  return n ? `⁦${s}⁩` : s;
}, av = (e, t, n) => {
  const r = e.date(void 0, n), s = e.endOfYear(r), i = e.endOfDay(r), {
    maxDaysInMonth: a,
    longestMonth: l
  } = cl(e, r).reduce((c, u) => {
    const d = e.getDaysInMonth(u);
    return d > c.maxDaysInMonth ? {
      maxDaysInMonth: d,
      longestMonth: u
    } : c;
  }, {
    maxDaysInMonth: 0,
    longestMonth: null
  });
  return {
    year: ({
      format: c
    }) => ({
      minimum: 0,
      maximum: rv(e, c) ? 9999 : 99
    }),
    month: () => ({
      minimum: 1,
      // Assumption: All years have the same amount of months
      maximum: e.getMonth(s) + 1
    }),
    day: ({
      currentDate: c
    }) => ({
      minimum: 1,
      maximum: e.isValid(c) ? e.getDaysInMonth(c) : a,
      longestMonth: l
    }),
    weekDay: ({
      format: c,
      contentType: u
    }) => {
      if (u === "digit") {
        const d = hi(e, c).map(Number);
        return {
          minimum: Math.min(...d),
          maximum: Math.max(...d)
        };
      }
      return {
        minimum: 1,
        maximum: 7
      };
    },
    hours: ({
      format: c
    }) => {
      const u = e.getHours(i);
      return cr(e.formatByString(e.endOfDay(r), c), t) !== u.toString() ? {
        minimum: 1,
        maximum: Number(cr(e.formatByString(e.startOfDay(r), c), t))
      } : {
        minimum: 0,
        maximum: u
      };
    },
    minutes: () => ({
      minimum: 0,
      // Assumption: All years have the same amount of minutes
      maximum: e.getMinutes(i)
    }),
    seconds: () => ({
      minimum: 0,
      // Assumption: All years have the same amount of seconds
      maximum: e.getSeconds(i)
    }),
    meridiem: () => ({
      minimum: 0,
      maximum: 1
    }),
    empty: () => ({
      minimum: 0,
      maximum: 0
    })
  };
};
let du = !1;
const fu = (e, t) => {
  if (process.env.NODE_ENV !== "production" && !du) {
    const n = ["empty"];
    ["date", "date-time"].includes(t) && n.push("weekDay", "day", "month", "year"), ["time", "date-time"].includes(t) && n.push("hours", "minutes", "seconds", "meridiem");
    const r = e.find((s) => !n.includes(s.type));
    r && (console.warn(`MUI X: The field component you are using is not compatible with the "${r.type}" date section.`, `The supported date sections are ["${n.join('", "')}"]\`.`), du = !0);
  }
}, lv = (e, t, n, r) => {
  switch (t.type) {
    case "year":
      return e.setYear(r, e.getYear(n));
    case "month":
      return e.setMonth(r, e.getMonth(n));
    case "weekDay": {
      let s = e.formatByString(n, t.format);
      t.hasLeadingZerosInInput && (s = pl(s, t.maxLength));
      const i = hi(e, t.format), a = i.indexOf(s), c = i.indexOf(t.value) - a;
      return e.addDays(n, c);
    }
    case "day":
      return e.setDate(r, e.getDate(n));
    case "meridiem": {
      const s = e.getHours(n) < 12, i = e.getHours(r);
      return s && i >= 12 ? e.addHours(r, -12) : !s && i < 12 ? e.addHours(r, 12) : r;
    }
    case "hours":
      return e.setHours(r, e.getHours(n));
    case "minutes":
      return e.setMinutes(r, e.getMinutes(n));
    case "seconds":
      return e.setSeconds(r, e.getSeconds(n));
    default:
      return r;
  }
}, pu = {
  year: 1,
  month: 2,
  day: 3,
  weekDay: 4,
  hours: 5,
  minutes: 6,
  seconds: 7,
  meridiem: 8,
  empty: 9
}, hu = (e, t, n, r, s) => (
  // cloning sections before sort to avoid mutating it
  [...n].sort((i, a) => pu[i.type] - pu[a.type]).reduce((i, a) => !s || a.modified ? lv(e, a, t, i) : i, r)
), cv = () => navigator.userAgent.toLowerCase().includes("android"), uv = (e, t) => {
  const n = {};
  if (!t)
    return e.forEach((c, u) => {
      const d = u === 0 ? null : u - 1, f = u === e.length - 1 ? null : u + 1;
      n[u] = {
        leftIndex: d,
        rightIndex: f
      };
    }), {
      neighbors: n,
      startIndex: 0,
      endIndex: e.length - 1
    };
  const r = {}, s = {};
  let i = 0, a = 0, l = e.length - 1;
  for (; l >= 0; ) {
    a = e.findIndex(
      // eslint-disable-next-line @typescript-eslint/no-loop-func
      (c, u) => u >= i && c.endSeparator?.includes(" ") && // Special case where the spaces were not there in the initial input
      c.endSeparator !== " / "
    ), a === -1 && (a = e.length - 1);
    for (let c = a; c >= i; c -= 1)
      s[c] = l, r[l] = c, l -= 1;
    i = a + 1;
  }
  return e.forEach((c, u) => {
    const d = s[u], f = d === 0 ? null : r[d - 1], y = d === e.length - 1 ? null : r[d + 1];
    n[u] = {
      leftIndex: f,
      rightIndex: y
    };
  }), {
    neighbors: n,
    startIndex: r[0],
    endIndex: r[e.length - 1]
  };
}, ka = (e, t) => {
  if (e == null)
    return null;
  if (e === "all")
    return "all";
  if (typeof e == "string") {
    const n = t.findIndex((r) => r.type === e);
    return n === -1 ? null : n;
  }
  return e;
}, dv = ["value", "referenceDate"], ln = {
  emptyValue: null,
  getTodayValue: Af,
  getInitialReferenceValue: (e) => {
    let {
      value: t,
      referenceDate: n
    } = e, r = Ee(e, dv);
    return r.adapter.isValid(t) ? t : n ?? ev(r);
  },
  cleanValue: Hb,
  areValuesEqual: Yb,
  isSameError: (e, t) => e === t,
  hasError: (e) => e != null,
  defaultErrorState: null,
  getTimezone: (e, t) => e.isValid(t) ? e.getTimezone(t) : null,
  setTimezone: (e, t, n) => n == null ? null : e.setTimezone(n, t)
}, fv = {
  updateReferenceValue: (e, t, n) => e.isValid(t) ? t : n,
  getSectionsFromValue: (e, t) => t(e),
  getV7HiddenInputValueFromSections: sv,
  getV6InputValueFromSections: iv,
  parseValueStr: (e, t, n) => n(e.trim(), t),
  getDateFromSection: (e) => e,
  getDateSectionsFromValue: (e) => e,
  updateDateInValue: (e, t, n) => n,
  clearDateSections: (e) => e.map((t) => j({}, t, {
    value: ""
  }))
};
function _f(e) {
  return /* @__PURE__ */ E.jsx(xf, {
    ...e,
    defaultTheme: pi,
    themeId: Yo
  });
}
process.env.NODE_ENV !== "production" && (_f.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The styles you want to apply globally.
   */
  styles: o.oneOfType([o.array, o.func, o.number, o.object, o.string, o.bool])
});
function pv(e) {
  return function(n) {
    return (
      // Pigment CSS `globalCss` support callback with theme inside an object but `GlobalStyles` support theme as a callback value.
      /* @__PURE__ */ E.jsx(_f, {
        styles: typeof e == "function" ? (r) => e({
          theme: r,
          ...n
        }) : e
      })
    );
  };
}
function hv() {
  return Fg;
}
const qe = sb;
process.env.NODE_ENV !== "production" && (o.node, o.object.isRequired);
function Ae(e) {
  return nb(e);
}
function mv(e) {
  return typeof e.main == "string";
}
function yv(e, t = []) {
  if (!mv(e))
    return !1;
  for (const n of t)
    if (!e.hasOwnProperty(n) || typeof e[n] != "string")
      return !1;
  return !0;
}
function Mt(e = []) {
  return ([, t]) => t && yv(t, e);
}
function gv(e) {
  return we("MuiTypography", e);
}
xe("MuiTypography", ["root", "h1", "h2", "h3", "h4", "h5", "h6", "subtitle1", "subtitle2", "body1", "body2", "inherit", "button", "caption", "overline", "alignLeft", "alignRight", "alignCenter", "alignJustify", "noWrap", "gutterBottom", "paragraph"]);
const bv = {
  primary: !0,
  secondary: !0,
  error: !0,
  info: !0,
  success: !0,
  warning: !0,
  textPrimary: !0,
  textSecondary: !0,
  textDisabled: !0
}, vv = hv(), xv = (e) => {
  const {
    align: t,
    gutterBottom: n,
    noWrap: r,
    paragraph: s,
    variant: i,
    classes: a
  } = e, l = {
    root: ["root", i, e.align !== "inherit" && `align${le(t)}`, n && "gutterBottom", r && "noWrap", s && "paragraph"]
  };
  return be(l, gv, a);
}, wv = Q("span", {
  name: "MuiTypography",
  slot: "Root",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e;
    return [t.root, n.variant && t[n.variant], n.align !== "inherit" && t[`align${le(n.align)}`], n.noWrap && t.noWrap, n.gutterBottom && t.gutterBottom, n.paragraph && t.paragraph];
  }
})(qe(({
  theme: e
}) => ({
  margin: 0,
  variants: [{
    props: {
      variant: "inherit"
    },
    style: {
      // Some elements, like <button> on Chrome have default font that doesn't inherit, reset this.
      font: "inherit",
      lineHeight: "inherit",
      letterSpacing: "inherit"
    }
  }, ...Object.entries(e.typography).filter(([t, n]) => t !== "inherit" && n && typeof n == "object").map(([t, n]) => ({
    props: {
      variant: t
    },
    style: n
  })), ...Object.entries(e.palette).filter(Mt()).map(([t]) => ({
    props: {
      color: t
    },
    style: {
      color: (e.vars || e).palette[t].main
    }
  })), ...Object.entries(e.palette?.text || {}).filter(([, t]) => typeof t == "string").map(([t]) => ({
    props: {
      color: `text${le(t)}`
    },
    style: {
      color: (e.vars || e).palette.text[t]
    }
  })), {
    props: ({
      ownerState: t
    }) => t.align !== "inherit",
    style: {
      textAlign: "var(--Typography-textAlign)"
    }
  }, {
    props: ({
      ownerState: t
    }) => t.noWrap,
    style: {
      overflow: "hidden",
      textOverflow: "ellipsis",
      whiteSpace: "nowrap"
    }
  }, {
    props: ({
      ownerState: t
    }) => t.gutterBottom,
    style: {
      marginBottom: "0.35em"
    }
  }, {
    props: ({
      ownerState: t
    }) => t.paragraph,
    style: {
      marginBottom: 16
    }
  }]
}))), mu = {
  h1: "h1",
  h2: "h2",
  h3: "h3",
  h4: "h4",
  h5: "h5",
  h6: "h6",
  subtitle1: "h6",
  subtitle2: "h6",
  body1: "p",
  body2: "p",
  inherit: "p"
}, Vn = /* @__PURE__ */ x.forwardRef(function(t, n) {
  const {
    color: r,
    ...s
  } = Ae({
    props: t,
    name: "MuiTypography"
  }), i = !bv[r], a = vv({
    ...s,
    ...i && {
      color: r
    }
  }), {
    align: l = "inherit",
    className: c,
    component: u,
    gutterBottom: d = !1,
    noWrap: f = !1,
    paragraph: y = !1,
    variant: g = "body1",
    variantMapping: h = mu,
    ...p
  } = a, m = {
    ...a,
    align: l,
    color: r,
    className: c,
    component: u,
    gutterBottom: d,
    noWrap: f,
    paragraph: y,
    variant: g,
    variantMapping: h
  }, b = u || (y ? "p" : h[g] || mu[g]) || "span", C = xv(m);
  return /* @__PURE__ */ E.jsx(wv, {
    as: b,
    ref: n,
    className: pe(C.root, c),
    ...p,
    ownerState: m,
    style: {
      ...l !== "inherit" && {
        "--Typography-textAlign": l
      },
      ...p.style
    }
  });
});
process.env.NODE_ENV !== "production" && (Vn.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Set the text-align on the component.
   * @default 'inherit'
   */
  align: o.oneOf(["center", "inherit", "justify", "left", "right"]),
  /**
   * The content of the component.
   */
  children: o.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: o.object,
  /**
   * @ignore
   */
  className: o.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   */
  color: o.oneOfType([o.oneOf(["primary", "secondary", "success", "error", "info", "warning", "textPrimary", "textSecondary", "textDisabled"]), o.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: o.elementType,
  /**
   * If `true`, the text will have a bottom margin.
   * @default false
   */
  gutterBottom: o.bool,
  /**
   * If `true`, the text will not wrap, but instead will truncate with a text overflow ellipsis.
   *
   * Note that text overflow can only happen with block or inline-block level elements
   * (the element needs to have a width in order to overflow).
   * @default false
   */
  noWrap: o.bool,
  /**
   * If `true`, the element will be a paragraph element.
   * @default false
   * @deprecated Use the `component` prop instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  paragraph: o.bool,
  /**
   * @ignore
   */
  style: o.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: o.oneOfType([o.arrayOf(o.oneOfType([o.func, o.object, o.bool])), o.func, o.object]),
  /**
   * Applies the theme typography styles.
   * @default 'body1'
   */
  variant: o.oneOfType([o.oneOf(["body1", "body2", "button", "caption", "h1", "h2", "h3", "h4", "h5", "h6", "inherit", "overline", "subtitle1", "subtitle2"]), o.string]),
  /**
   * The component maps the variant prop to a range of different HTML element types.
   * For instance, subtitle1 to `<h6>`.
   * If you wish to change that mapping, you can provide your own.
   * Alternatively, you can use the `component` prop.
   * @default {
   *   h1: 'h1',
   *   h2: 'h2',
   *   h3: 'h3',
   *   h4: 'h4',
   *   h5: 'h5',
   *   h6: 'h6',
   *   subtitle1: 'h6',
   *   subtitle2: 'h6',
   *   body1: 'p',
   *   body2: 'p',
   *   inherit: 'p',
   * }
   */
  variantMapping: o.object
});
function Sv(e) {
  return we("MuiPickersToolbar", e);
}
xe("MuiPickersToolbar", ["root", "title", "content"]);
const Ev = ["localeText"], Bs = /* @__PURE__ */ x.createContext(null);
process.env.NODE_ENV !== "production" && (Bs.displayName = "PickerAdapterContext");
const mi = function(t) {
  const {
    localeText: n
  } = t, r = Ee(t, Ev), {
    adapter: s,
    localeText: i
  } = x.useContext(Bs) ?? {
    adapter: void 0,
    localeText: void 0
  }, a = Ze({
    // We don't want to pass the `localeText` prop to the theme, that way it will always return the theme value,
    // We will then merge this theme value with our value manually
    props: r,
    name: "MuiLocalizationProvider"
  }), {
    children: l,
    dateAdapter: c,
    dateFormats: u,
    dateLibInstance: d,
    adapterLocale: f,
    localeText: y
  } = a, g = x.useMemo(() => j({}, y, i, n), [y, i, n]), h = x.useMemo(() => {
    if (!c)
      return s || null;
    const b = new c({
      locale: f,
      formats: u,
      instance: d
    });
    if (!b.isMUIAdapter)
      throw new Error(["MUI X: The date adapter should be imported from `@mui/x-date-pickers` or `@mui/x-date-pickers-pro`, not from `@date-io`", "For example, `import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs'` instead of `import AdapterDayjs from '@date-io/dayjs'`", "More information on the installation documentation: https://mui.com/x/react-date-pickers/quickstart/#installation"].join(`
`));
    return b;
  }, [c, f, u, d, s]), p = x.useMemo(() => h ? {
    minDate: h.date("1900-01-01T00:00:00.000"),
    maxDate: h.date("2099-12-31T00:00:00.000")
  } : null, [h]), m = x.useMemo(() => ({
    utils: h,
    adapter: h,
    defaultDates: p,
    localeText: g
  }), [p, h, g]);
  return /* @__PURE__ */ E.jsx(Bs.Provider, {
    value: m,
    children: l
  });
};
process.env.NODE_ENV !== "production" && (mi.displayName = "LocalizationProvider");
process.env.NODE_ENV !== "production" && (mi.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Locale for the date library you are using
   */
  adapterLocale: o.any,
  children: o.node,
  /**
   * Date library adapter class function.
   * @see See the localization provider {@link https://mui.com/x/react-date-pickers/quickstart/#integrate-provider-and-adapter date adapter setup section} for more details.
   */
  dateAdapter: o.func,
  /**
   * Formats that are used for any child pickers
   */
  dateFormats: o.shape({
    dayOfMonth: o.string,
    dayOfMonthFull: o.string,
    fullDate: o.string,
    fullTime12h: o.string,
    fullTime24h: o.string,
    hours12h: o.string,
    hours24h: o.string,
    keyboardDate: o.string,
    keyboardDateTime12h: o.string,
    keyboardDateTime24h: o.string,
    meridiem: o.string,
    minutes: o.string,
    month: o.string,
    monthShort: o.string,
    normalDate: o.string,
    normalDateWithWeekday: o.string,
    seconds: o.string,
    shortDate: o.string,
    weekday: o.string,
    weekdayShort: o.string,
    year: o.string
  }),
  /**
   * Date library instance you are using, if it has some global overrides
   * ```jsx
   * dateLibInstance={momentTimeZone}
   * ```
   */
  dateLibInstance: o.any,
  /**
   * Locale for components texts
   */
  localeText: o.object
});
const ml = /* @__PURE__ */ x.createContext(() => !0);
process.env.NODE_ENV !== "production" && (ml.displayName = "IsValidValueContext");
function Ov() {
  return x.useContext(ml);
}
const yl = /* @__PURE__ */ x.createContext(null);
process.env.NODE_ENV !== "production" && (yl.displayName = "PickerFieldPrivateContext");
function Vf() {
  return x.useContext(yl);
}
const yi = /* @__PURE__ */ x.createContext(null);
process.env.NODE_ENV !== "production" && (yi.displayName = "PickerContext");
const Ur = () => {
  const e = x.useContext(yi);
  if (e == null)
    throw new Error("MUI X: The `usePickerContext` hook can only be called inside the context of a Picker component");
  return e;
}, gl = /* @__PURE__ */ x.createContext(null);
process.env.NODE_ENV !== "production" && (gl.displayName = "PickerActionsContext");
const bl = /* @__PURE__ */ x.createContext({
  ownerState: {
    isPickerDisabled: !1,
    isPickerReadOnly: !1,
    isPickerValueEmpty: !1,
    isPickerOpen: !1,
    pickerVariant: "desktop",
    pickerOrientation: "portrait"
  },
  rootRefObject: {
    current: null
  },
  labelId: void 0,
  dismissViews: () => {
  },
  hasUIView: !0,
  getCurrentViewMode: () => "UI",
  triggerElement: null,
  viewContainerRole: null,
  defaultActionBarActions: [],
  onPopperExited: void 0
});
process.env.NODE_ENV !== "production" && (bl.displayName = "PickerPrivateContext");
function Lf(e) {
  const {
    contextValue: t,
    actionsContextValue: n,
    privateContextValue: r,
    fieldPrivateContextValue: s,
    isValidContextValue: i,
    localeText: a,
    children: l
  } = e;
  return /* @__PURE__ */ E.jsx(yi.Provider, {
    value: t,
    children: /* @__PURE__ */ E.jsx(gl.Provider, {
      value: n,
      children: /* @__PURE__ */ E.jsx(bl.Provider, {
        value: r,
        children: /* @__PURE__ */ E.jsx(yl.Provider, {
          value: s,
          children: /* @__PURE__ */ E.jsx(ml.Provider, {
            value: i,
            children: /* @__PURE__ */ E.jsx(mi, {
              localeText: a,
              children: l
            })
          })
        })
      })
    })
  });
}
const gt = () => x.useContext(bl);
function Bf() {
  const {
    ownerState: e
  } = gt(), t = Ut();
  return x.useMemo(() => j({}, e, {
    toolbarDirection: t ? "rtl" : "ltr"
  }), [e, t]);
}
const Cv = ["children", "className", "classes", "toolbarTitle", "hidden", "titleId", "classes", "landscapeDirection"], Pv = (e) => be({
  root: ["root"],
  title: ["title"],
  content: ["content"]
}, Sv, e), Tv = Q("div", {
  name: "MuiPickersToolbar",
  slot: "Root"
})(({
  theme: e
}) => ({
  display: "flex",
  flexDirection: "column",
  alignItems: "flex-start",
  justifyContent: "space-between",
  padding: e.spacing(2, 3),
  variants: [{
    props: {
      pickerOrientation: "landscape"
    },
    style: {
      height: "auto",
      maxWidth: 160,
      padding: 16,
      justifyContent: "flex-start",
      flexWrap: "wrap"
    }
  }]
})), Rv = Q("div", {
  name: "MuiPickersToolbar",
  slot: "Content",
  shouldForwardProp: (e) => rn(e) && e !== "landscapeDirection"
})({
  display: "flex",
  flexWrap: "wrap",
  width: "100%",
  flex: 1,
  justifyContent: "space-between",
  alignItems: "center",
  flexDirection: "row",
  variants: [{
    props: {
      pickerOrientation: "landscape"
    },
    style: {
      justifyContent: "flex-start",
      alignItems: "flex-start",
      flexDirection: "column"
    }
  }, {
    props: {
      pickerOrientation: "landscape",
      landscapeDirection: "row"
    },
    style: {
      flexDirection: "row"
    }
  }]
}), Wf = /* @__PURE__ */ x.forwardRef(function(t, n) {
  const r = Ze({
    props: t,
    name: "MuiPickersToolbar"
  }), {
    children: s,
    className: i,
    classes: a,
    toolbarTitle: l,
    hidden: c,
    titleId: u,
    landscapeDirection: d
  } = r, f = Ee(r, Cv), y = Bf(), g = Pv(a);
  return c ? null : /* @__PURE__ */ E.jsxs(Tv, j({
    ref: n,
    className: pe(g.root, i),
    ownerState: y
  }, f, {
    children: [/* @__PURE__ */ E.jsx(Vn, {
      color: "text.secondary",
      variant: "overline",
      id: u,
      className: g.title,
      children: l
    }), /* @__PURE__ */ E.jsx(Rv, {
      className: g.content,
      ownerState: y,
      landscapeDirection: d,
      children: s
    })]
  }));
});
process.env.NODE_ENV !== "production" && (Wf.displayName = "PickersToolbar");
const kv = (e) => ({
  components: {
    MuiLocalizationProvider: {
      defaultProps: {
        localeText: j({}, e)
      }
    }
  }
}), zf = {
  // Calendar navigation
  previousMonth: "Previous month",
  nextMonth: "Next month",
  // View navigation
  openPreviousView: "Open previous view",
  openNextView: "Open next view",
  calendarViewSwitchingButtonAriaLabel: (e) => e === "year" ? "year view is open, switch to calendar view" : "calendar view is open, switch to year view",
  // DateRange labels
  start: "Start",
  end: "End",
  startDate: "Start date",
  startTime: "Start time",
  endDate: "End date",
  endTime: "End time",
  // Action bar
  cancelButtonLabel: "Cancel",
  clearButtonLabel: "Clear",
  okButtonLabel: "OK",
  todayButtonLabel: "Today",
  nextStepButtonLabel: "Next",
  // Toolbar titles
  datePickerToolbarTitle: "Select date",
  dateTimePickerToolbarTitle: "Select date & time",
  timePickerToolbarTitle: "Select time",
  dateRangePickerToolbarTitle: "Select date range",
  timeRangePickerToolbarTitle: "Select time range",
  // Clock labels
  clockLabelText: (e, t) => `Select ${e}. ${t ? `Selected time is ${t}` : "No time selected"}`,
  hoursClockNumberText: (e) => `${e} hours`,
  minutesClockNumberText: (e) => `${e} minutes`,
  secondsClockNumberText: (e) => `${e} seconds`,
  // Digital clock labels
  selectViewText: (e) => `Select ${e}`,
  // Calendar labels
  calendarWeekNumberHeaderLabel: "Week number",
  calendarWeekNumberHeaderText: "#",
  calendarWeekNumberAriaLabelText: (e) => `Week ${e}`,
  calendarWeekNumberText: (e) => `${e}`,
  // Open Picker labels
  openDatePickerDialogue: (e) => e ? `Choose date, selected date is ${e}` : "Choose date",
  openTimePickerDialogue: (e) => e ? `Choose time, selected time is ${e}` : "Choose time",
  openRangePickerDialogue: (e) => e ? `Choose range, selected range is ${e}` : "Choose range",
  fieldClearLabel: "Clear",
  // Table labels
  timeTableLabel: "pick time",
  dateTableLabel: "pick date",
  // Field section placeholders
  fieldYearPlaceholder: (e) => "Y".repeat(e.digitAmount),
  fieldMonthPlaceholder: (e) => e.contentType === "letter" ? "MMMM" : "MM",
  fieldDayPlaceholder: () => "DD",
  fieldWeekDayPlaceholder: (e) => e.contentType === "letter" ? "EEEE" : "EE",
  fieldHoursPlaceholder: () => "hh",
  fieldMinutesPlaceholder: () => "mm",
  fieldSecondsPlaceholder: () => "ss",
  fieldMeridiemPlaceholder: () => "aa",
  // View names
  year: "Year",
  month: "Month",
  day: "Day",
  weekDay: "Week day",
  hours: "Hours",
  minutes: "Minutes",
  seconds: "Seconds",
  meridiem: "Meridiem",
  // Common
  empty: "Empty"
}, Dv = zf;
kv(zf);
const vl = () => {
  const e = x.useContext(Bs);
  if (e === null)
    throw new Error(["MUI X: Can not find the date and time pickers localization context.", "It looks like you forgot to wrap your component in LocalizationProvider.", "This can also happen if you are bundling multiple versions of the `@mui/x-date-pickers` package"].join(`
`));
  if (e.adapter === null)
    throw new Error(["MUI X: Can not find the date and time pickers adapter from its localization context.", "It looks like you forgot to pass a `dateAdapter` to your LocalizationProvider."].join(`
`));
  const t = x.useMemo(() => j({}, Dv, e.localeText), [e.localeText]);
  return x.useMemo(() => j({}, e, {
    localeText: t
  }), [e, t]);
}, He = () => vl().adapter, Ln = () => vl().localeText, Da = ["disablePast", "disableFuture", "minDate", "maxDate", "shouldDisableDate", "shouldDisableMonth", "shouldDisableYear"], Ma = ["disablePast", "disableFuture", "minTime", "maxTime", "shouldDisableTime", "minutesStep", "ampm", "disableIgnoringDatePartForTimeValidation"], Uf = ["minDateTime", "maxDateTime"], Mv = [...Da, ...Ma, ...Uf], qf = (e) => Mv.reduce((t, n) => (e.hasOwnProperty(n) && (t[n] = e[n]), t), {}), Iv = ["value", "defaultValue", "referenceDate", "format", "formatDensity", "onChange", "timezone", "onError", "shouldRespectLeadingZeros", "selectedSections", "onSelectedSectionsChange", "unstableFieldRef", "unstableStartFieldRef", "unstableEndFieldRef", "enableAccessibleFieldDOMStructure", "disabled", "readOnly", "dateSeparator", "autoFocus", "focused"], Hf = (e, t) => x.useMemo(() => {
  const n = j({}, e), r = {}, s = (i) => {
    n.hasOwnProperty(i) && (r[i] = n[i], delete n[i]);
  };
  return Iv.forEach(s), t === "date" ? Da.forEach(s) : t === "time" ? Ma.forEach(s) : t === "date-time" && (Da.forEach(s), Ma.forEach(s), Uf.forEach(s)), {
    forwardedProps: n,
    internalProps: r
  };
}, [e, t]), Nv = ({
  adapter: e,
  format: t
}) => {
  let n = 10, r = t, s = e.expandFormat(t);
  for (; s !== r; )
    if (r = s, s = e.expandFormat(r), n -= 1, n < 0)
      throw new Error("MUI X: The format expansion seems to be in an infinite loop. Please open an issue with the format passed to the component.");
  return s;
}, Av = ({
  adapter: e,
  expandedFormat: t
}) => {
  const n = [], {
    start: r,
    end: s
  } = e.escapedCharacters, i = new RegExp(`(\\${r}[^\\${s}]*\\${s})+`, "g");
  let a = null;
  for (; a = i.exec(t); )
    n.push({
      start: a.index,
      end: i.lastIndex - 1
    });
  return n;
}, Fv = (e, t, n, r) => {
  switch (n.type) {
    case "year":
      return t.fieldYearPlaceholder({
        digitAmount: e.formatByString(e.date(void 0, "default"), r).length,
        format: r
      });
    case "month":
      return t.fieldMonthPlaceholder({
        contentType: n.contentType,
        format: r
      });
    case "day":
      return t.fieldDayPlaceholder({
        format: r
      });
    case "weekDay":
      return t.fieldWeekDayPlaceholder({
        contentType: n.contentType,
        format: r
      });
    case "hours":
      return t.fieldHoursPlaceholder({
        format: r
      });
    case "minutes":
      return t.fieldMinutesPlaceholder({
        format: r
      });
    case "seconds":
      return t.fieldSecondsPlaceholder({
        format: r
      });
    case "meridiem":
      return t.fieldMeridiemPlaceholder({
        format: r
      });
    default:
      return r;
  }
}, $v = ({
  adapter: e,
  date: t,
  shouldRespectLeadingZeros: n,
  localeText: r,
  localizedDigits: s,
  now: i,
  token: a,
  startSeparator: l
}) => {
  if (a === "")
    throw new Error("MUI X: Should not call `commitToken` with an empty token");
  const c = dl(e, a), u = jf(e, c.contentType, c.type, a), d = n ? u : c.contentType === "digit", f = e.isValid(t);
  let y = f ? e.formatByString(t, a) : "", g = null;
  if (d)
    if (u)
      g = y === "" ? e.formatByString(i, a).length : y.length;
    else {
      if (c.maxLength == null)
        throw new Error(`MUI X: The token ${a} should have a 'maxLength' property on it's adapter`);
      g = c.maxLength, f && (y = fl(pl(cr(y, s), g), s));
    }
  return j({}, c, {
    format: a,
    maxLength: g,
    value: y,
    placeholder: Fv(e, r, c, a),
    hasLeadingZerosInFormat: u,
    hasLeadingZerosInInput: d,
    startSeparator: l,
    endSeparator: "",
    modified: !1
  });
}, jv = (e) => {
  const {
    adapter: t,
    expandedFormat: n,
    escapedParts: r
  } = e, s = t.date(void 0), i = [];
  let a = "";
  const l = Object.keys(t.formatTokenMap).sort((g, h) => h.length - g.length), c = /^([a-zA-Z]+)/, u = new RegExp(`^(${l.join("|")})*$`), d = new RegExp(`^(${l.join("|")})`), f = (g) => r.find((h) => h.start <= g && h.end >= g);
  let y = 0;
  for (; y < n.length; ) {
    const g = f(y), h = g != null, p = c.exec(n.slice(y))?.[1];
    if (!h && p != null && u.test(p)) {
      let m = p;
      for (; m.length > 0; ) {
        const b = d.exec(m)[1];
        m = m.slice(b.length), i.push($v(j({}, e, {
          now: s,
          token: b,
          startSeparator: a
        }))), a = "";
      }
      y += p.length;
    } else {
      const m = n[y];
      h && g?.start === y || g?.end === y || (i.length === 0 ? a += m : (i[i.length - 1].endSeparator += m, i[i.length - 1].isEndFormatSeparator = !0)), y += 1;
    }
  }
  return i.length === 0 && a.length > 0 && i.push({
    type: "empty",
    contentType: "letter",
    maxLength: null,
    format: "",
    value: "",
    placeholder: "",
    hasLeadingZerosInFormat: !1,
    hasLeadingZerosInInput: !1,
    startSeparator: a,
    endSeparator: "",
    modified: !1
  }), i;
}, _v = ({
  isRtl: e,
  formatDensity: t,
  sections: n
}) => n.map((r) => {
  const s = (i) => {
    let a = i;
    return e && a !== null && a.includes(" ") && (a = `⁩${a}⁦`), t === "spacious" && ["/", ".", "-"].includes(a) && (a = ` ${a} `), a;
  };
  return r.startSeparator = s(r.startSeparator), r.endSeparator = s(r.endSeparator), r;
}), yu = (e) => {
  let t = Nv(e);
  e.isRtl && e.enableAccessibleFieldDOMStructure && (t = t.split(" ").reverse().join(" "));
  const n = Av(j({}, e, {
    expandedFormat: t
  })), r = jv(j({}, e, {
    expandedFormat: t,
    escapedParts: n
  }));
  return _v(j({}, e, {
    sections: r
  }));
}, xl = () => x.useContext(yi), Vv = () => {
  const e = x.useContext(gl);
  if (e == null)
    throw new Error(["MUI X: The `usePickerActionsContext` can only be called in fields that are used as a slot of a Picker component"].join(`
`));
  return e;
};
function Lv(e) {
  return we("MuiDatePickerToolbar", e);
}
xe("MuiDatePickerToolbar", ["root", "title"]);
const Bv = ["toolbarFormat", "toolbarPlaceholder", "className", "classes"], Wv = (e) => be({
  root: ["root"],
  title: ["title"]
}, Lv, e), zv = Q(Wf, {
  name: "MuiDatePickerToolbar",
  slot: "Root"
})({}), Uv = Q(Vn, {
  name: "MuiDatePickerToolbar",
  slot: "Title"
})({
  variants: [{
    props: {
      pickerOrientation: "landscape"
    },
    style: {
      margin: "auto 16px auto auto"
    }
  }]
}), wl = /* @__PURE__ */ x.forwardRef(function(t, n) {
  const r = Ze({
    props: t,
    name: "MuiDatePickerToolbar"
  }), {
    toolbarFormat: s,
    toolbarPlaceholder: i = "––",
    className: a,
    classes: l
  } = r, c = Ee(r, Bv), u = He(), {
    value: d,
    views: f,
    orientation: y
  } = Ur(), g = Ln(), h = Bf(), p = Wv(l), m = x.useMemo(() => {
    if (!u.isValid(d))
      return i;
    const b = ul(u, {
      format: s,
      views: f
    }, !0);
    return u.formatByString(d, b);
  }, [d, s, i, u, f]);
  return /* @__PURE__ */ E.jsx(zv, j({
    ref: n,
    toolbarTitle: g.datePickerToolbarTitle,
    className: pe(p.root, a)
  }, c, {
    children: /* @__PURE__ */ E.jsx(Uv, {
      variant: "h4",
      align: y === "landscape" ? "left" : "center",
      ownerState: h,
      className: p.title,
      children: m
    })
  }));
});
process.env.NODE_ENV !== "production" && (wl.displayName = "DatePickerToolbar");
process.env.NODE_ENV !== "production" && (wl.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Override or extend the styles applied to the component.
   */
  classes: o.object,
  className: o.string,
  /**
   * If `true`, show the toolbar even in desktop mode.
   * @default `true` for Desktop, `false` for Mobile.
   */
  hidden: o.bool,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: o.oneOfType([o.arrayOf(o.oneOfType([o.func, o.object, o.bool])), o.func, o.object]),
  titleId: o.string,
  /**
   * Toolbar date format.
   */
  toolbarFormat: o.string,
  /**
   * Toolbar value placeholder—it is displayed when the value is empty.
   * @default "––"
   */
  toolbarPlaceholder: o.node
});
const Ko = ({
  props: e,
  value: t,
  timezone: n,
  adapter: r
}) => {
  if (t === null)
    return null;
  const {
    shouldDisableDate: s,
    shouldDisableMonth: i,
    shouldDisableYear: a,
    disablePast: l,
    disableFuture: c,
    minDate: u,
    maxDate: d
  } = e, f = r.date(void 0, n);
  switch (!0) {
    case !r.isValid(t):
      return "invalidDate";
    case !!(s && s(t)):
      return "shouldDisableDate";
    case !!(i && i(t)):
      return "shouldDisableMonth";
    case !!(a && a(t)):
      return "shouldDisableYear";
    case !!(c && r.isAfterDay(t, f)):
      return "disableFuture";
    case !!(l && r.isBeforeDay(t, f)):
      return "disablePast";
    case !!(u && r.isBeforeDay(t, u)):
      return "minDate";
    case !!(d && r.isAfterDay(t, d)):
      return "maxDate";
    default:
      return null;
  }
};
Ko.valueManager = ln;
function de(e) {
  const t = x.useRef(e);
  return dt(() => {
    t.current = e;
  }), x.useRef((...n) => (
    // @ts-expect-error hide `this`
    (0, t.current)(...n)
  )).current;
}
function Yf(e) {
  const {
    props: t,
    validator: n,
    value: r,
    timezone: s,
    onError: i
  } = e, a = He(), l = x.useRef(n.valueManager.defaultErrorState), c = n({
    adapter: a,
    value: r,
    timezone: s,
    props: t
  }), u = n.valueManager.hasError(c);
  x.useEffect(() => {
    i && !n.valueManager.isSameError(c, l.current) && i(c, r), l.current = c;
  }, [n, i, c, r]);
  const d = de((f) => n({
    adapter: a,
    value: f,
    timezone: s,
    props: t
  }));
  return {
    validationError: c,
    hasValidationError: u,
    getValidationErrorForNewValue: d
  };
}
const qv = () => vl().defaultDates, gi = (e) => {
  const t = He(), n = x.useRef(void 0);
  return n.current === void 0 && (n.current = t.date(void 0, e)), n.current;
};
function Hv(e = {}) {
  const {
    enableAccessibleFieldDOMStructure: t = !0
  } = e;
  return x.useMemo(() => ({
    valueType: "date",
    validator: Ko,
    internal_valueManager: ln,
    internal_fieldValueManager: fv,
    internal_enableAccessibleFieldDOMStructure: t,
    internal_useApplyDefaultValuesToFieldInternalProps: Kv,
    internal_useOpenPickerButtonAriaLabel: Yv
  }), [t]);
}
function Yv(e) {
  const t = He(), n = Ln();
  return x.useMemo(() => {
    const r = t.isValid(e) ? t.format(e, "fullDate") : null;
    return n.openDatePickerDialogue(r);
  }, [e, n, t]);
}
function Kv(e) {
  const t = He(), n = Go(e);
  return x.useMemo(() => j({}, e, n, {
    format: e.format ?? t.formats.keyboardDate
  }), [e, n, t]);
}
function Go(e) {
  const t = He(), n = qv();
  return x.useMemo(() => ({
    disablePast: e.disablePast ?? !1,
    disableFuture: e.disableFuture ?? !1,
    minDate: su(t, e.minDate, n.minDate),
    maxDate: su(t, e.maxDate, n.maxDate)
  }), [e.minDate, e.maxDate, e.disableFuture, e.disablePast, t, n]);
}
function Kf(e, t) {
  const n = Ze({
    props: e,
    name: t
  }), r = Go(n), s = x.useMemo(() => n.localeText?.toolbarTitle == null ? n.localeText : j({}, n.localeText, {
    datePickerToolbarTitle: n.localeText.toolbarTitle
  }), [n.localeText]);
  return j({}, n, r, {
    localeText: s
  }, qb({
    views: n.views,
    openTo: n.openTo,
    defaultViews: ["year", "day"],
    defaultOpenTo: "day"
  }), {
    slots: j({
      toolbar: wl
    }, n.slots)
  });
}
function Ne(...e) {
  const t = x.useRef(void 0), n = x.useCallback((r) => {
    const s = e.map((i) => {
      if (i == null)
        return null;
      if (typeof i == "function") {
        const a = i, l = a(r);
        return typeof l == "function" ? l : () => {
          a(null);
        };
      }
      return i.current = r, () => {
        i.current = null;
      };
    });
    return () => {
      s.forEach((i) => i?.());
    };
  }, e);
  return x.useMemo(() => e.every((r) => r == null) ? null : (r) => {
    t.current && (t.current(), t.current = void 0), r != null && (t.current = n(r));
  }, e);
}
function Ar(e) {
  return typeof e == "string";
}
function Gf(e, t, n) {
  return e === void 0 || Ar(e) ? t : {
    ...t,
    ownerState: {
      ...t.ownerState,
      ...n
    }
  };
}
function Xf(e, t = []) {
  if (e === void 0)
    return {};
  const n = {};
  return Object.keys(e).filter((r) => r.match(/^on[A-Z]/) && typeof e[r] == "function" && !t.includes(r)).forEach((r) => {
    n[r] = e[r];
  }), n;
}
function gu(e) {
  if (e === void 0)
    return {};
  const t = {};
  return Object.keys(e).filter((n) => !(n.match(/^on[A-Z]/) && typeof e[n] == "function")).forEach((n) => {
    t[n] = e[n];
  }), t;
}
function Qf(e) {
  const {
    getSlotProps: t,
    additionalProps: n,
    externalSlotProps: r,
    externalForwardedProps: s,
    className: i
  } = e;
  if (!t) {
    const g = pe(n?.className, i, s?.className, r?.className), h = {
      ...n?.style,
      ...s?.style,
      ...r?.style
    }, p = {
      ...n,
      ...s,
      ...r
    };
    return g.length > 0 && (p.className = g), Object.keys(h).length > 0 && (p.style = h), {
      props: p,
      internalRef: void 0
    };
  }
  const a = Xf({
    ...s,
    ...r
  }), l = gu(r), c = gu(s), u = t(a), d = pe(u?.className, n?.className, i, s?.className, r?.className), f = {
    ...u?.style,
    ...n?.style,
    ...s?.style,
    ...r?.style
  }, y = {
    ...u,
    ...n,
    ...c,
    ...l
  };
  return d.length > 0 && (y.className = d), Object.keys(f).length > 0 && (y.style = f), {
    props: y,
    internalRef: u.ref
  };
}
function Ie(e) {
  const {
    elementType: t,
    externalSlotProps: n,
    ownerState: r,
    skipResolvingSlotProps: s = !1,
    ...i
  } = e, a = s ? {} : $t(n, r), {
    props: l,
    internalRef: c
  } = Qf({
    ...i,
    externalSlotProps: a
  }), u = Ne(c, a?.ref, e.additionalProps?.ref);
  return Gf(t, {
    ...l,
    ref: u
  }, r);
}
const bu = {};
function Zf(e, t) {
  const n = x.useRef(bu);
  return n.current === bu && (n.current = e(t)), n;
}
const Gv = [];
function Xv(e) {
  x.useEffect(e, Gv);
}
class Sl {
  static create() {
    return new Sl();
  }
  currentId = null;
  /**
   * Executes `fn` after `delay`, clearing any previously scheduled call.
   */
  start(t, n) {
    this.clear(), this.currentId = setTimeout(() => {
      this.currentId = null, n();
    }, t);
  }
  clear = () => {
    this.currentId !== null && (clearTimeout(this.currentId), this.currentId = null);
  };
  disposeEffect = () => this.clear;
}
function Dn() {
  const e = Zf(Sl.create).current;
  return Xv(e.disposeEffect), e;
}
function wn(e, t) {
  return process.env.NODE_ENV === "production" ? () => null : function(...r) {
    return e(...r) || t(...r);
  };
}
function Qv(e) {
  const {
    prototype: t = {}
  } = e;
  return !!t.isReactComponent;
}
function Jf(e, t, n, r, s) {
  const i = e[t], a = s || t;
  if (i == null || // When server-side rendering React doesn't warn either.
  // This is not an accurate check for SSR.
  // This is only in place for Emotion compat.
  // TODO: Revisit once https://github.com/facebook/react/issues/20047 is resolved.
  typeof window > "u")
    return null;
  let l;
  const c = i.type;
  return typeof c == "function" && !Qv(c) && (l = "Did you accidentally use a plain function component for an element instead?"), l !== void 0 ? new Error(`Invalid ${r} \`${a}\` supplied to \`${n}\`. Expected an element that can hold a ref. ${l} For more information see https://mui.com/r/caveat-with-refs-guide`) : null;
}
const Xo = wn(o.element, Jf);
Xo.isRequired = wn(o.element.isRequired, Jf);
function Qo(e) {
  return parseInt(x.version, 10) >= 19 ? e?.props?.ref || null : e?.ref || null;
}
function Ia(e, t) {
  return Ia = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, r) {
    return n.__proto__ = r, n;
  }, Ia(e, t);
}
function El(e, t) {
  e.prototype = Object.create(t.prototype), e.prototype.constructor = e, Ia(e, t);
}
function Zv(e, t) {
  return e.classList ? !!t && e.classList.contains(t) : (" " + (e.className.baseVal || e.className) + " ").indexOf(" " + t + " ") !== -1;
}
function Jv(e, t) {
  e.classList ? e.classList.add(t) : Zv(e, t) || (typeof e.className == "string" ? e.className = e.className + " " + t : e.setAttribute("class", (e.className && e.className.baseVal || "") + " " + t));
}
function vu(e, t) {
  return e.replace(new RegExp("(^|\\s)" + t + "(?:\\s|$)", "g"), "$1").replace(/\s+/g, " ").replace(/^\s*|\s*$/g, "");
}
function ex(e, t) {
  e.classList ? e.classList.remove(t) : typeof e.className == "string" ? e.className = vu(e.className, t) : e.setAttribute("class", vu(e.className && e.className.baseVal || "", t));
}
const xu = {
  disabled: !1
};
var tx = process.env.NODE_ENV !== "production" ? o.oneOfType([o.number, o.shape({
  enter: o.number,
  exit: o.number,
  appear: o.number
}).isRequired]) : null, nx = process.env.NODE_ENV !== "production" ? o.oneOfType([o.string, o.shape({
  enter: o.string,
  exit: o.string,
  active: o.string
}), o.shape({
  enter: o.string,
  enterDone: o.string,
  enterActive: o.string,
  exit: o.string,
  exitDone: o.string,
  exitActive: o.string
})]) : null;
const Ws = yt.createContext(null);
var ep = function(t) {
  return t.scrollTop;
}, mo = "unmounted", Gn = "exited", Xn = "entering", Or = "entered", Na = "exiting", Bt = /* @__PURE__ */ (function(e) {
  El(t, e);
  function t(r, s) {
    var i;
    i = e.call(this, r, s) || this;
    var a = s, l = a && !a.isMounting ? r.enter : r.appear, c;
    return i.appearStatus = null, r.in ? l ? (c = Gn, i.appearStatus = Xn) : c = Or : r.unmountOnExit || r.mountOnEnter ? c = mo : c = Gn, i.state = {
      status: c
    }, i.nextCallback = null, i;
  }
  t.getDerivedStateFromProps = function(s, i) {
    var a = s.in;
    return a && i.status === mo ? {
      status: Gn
    } : null;
  };
  var n = t.prototype;
  return n.componentDidMount = function() {
    this.updateStatus(!0, this.appearStatus);
  }, n.componentDidUpdate = function(s) {
    var i = null;
    if (s !== this.props) {
      var a = this.state.status;
      this.props.in ? a !== Xn && a !== Or && (i = Xn) : (a === Xn || a === Or) && (i = Na);
    }
    this.updateStatus(!1, i);
  }, n.componentWillUnmount = function() {
    this.cancelNextCallback();
  }, n.getTimeouts = function() {
    var s = this.props.timeout, i, a, l;
    return i = a = l = s, s != null && typeof s != "number" && (i = s.exit, a = s.enter, l = s.appear !== void 0 ? s.appear : a), {
      exit: i,
      enter: a,
      appear: l
    };
  }, n.updateStatus = function(s, i) {
    if (s === void 0 && (s = !1), i !== null)
      if (this.cancelNextCallback(), i === Xn) {
        if (this.props.unmountOnExit || this.props.mountOnEnter) {
          var a = this.props.nodeRef ? this.props.nodeRef.current : ds.findDOMNode(this);
          a && ep(a);
        }
        this.performEnter(s);
      } else
        this.performExit();
    else this.props.unmountOnExit && this.state.status === Gn && this.setState({
      status: mo
    });
  }, n.performEnter = function(s) {
    var i = this, a = this.props.enter, l = this.context ? this.context.isMounting : s, c = this.props.nodeRef ? [l] : [ds.findDOMNode(this), l], u = c[0], d = c[1], f = this.getTimeouts(), y = l ? f.appear : f.enter;
    if (!s && !a || xu.disabled) {
      this.safeSetState({
        status: Or
      }, function() {
        i.props.onEntered(u);
      });
      return;
    }
    this.props.onEnter(u, d), this.safeSetState({
      status: Xn
    }, function() {
      i.props.onEntering(u, d), i.onTransitionEnd(y, function() {
        i.safeSetState({
          status: Or
        }, function() {
          i.props.onEntered(u, d);
        });
      });
    });
  }, n.performExit = function() {
    var s = this, i = this.props.exit, a = this.getTimeouts(), l = this.props.nodeRef ? void 0 : ds.findDOMNode(this);
    if (!i || xu.disabled) {
      this.safeSetState({
        status: Gn
      }, function() {
        s.props.onExited(l);
      });
      return;
    }
    this.props.onExit(l), this.safeSetState({
      status: Na
    }, function() {
      s.props.onExiting(l), s.onTransitionEnd(a.exit, function() {
        s.safeSetState({
          status: Gn
        }, function() {
          s.props.onExited(l);
        });
      });
    });
  }, n.cancelNextCallback = function() {
    this.nextCallback !== null && (this.nextCallback.cancel(), this.nextCallback = null);
  }, n.safeSetState = function(s, i) {
    i = this.setNextCallback(i), this.setState(s, i);
  }, n.setNextCallback = function(s) {
    var i = this, a = !0;
    return this.nextCallback = function(l) {
      a && (a = !1, i.nextCallback = null, s(l));
    }, this.nextCallback.cancel = function() {
      a = !1;
    }, this.nextCallback;
  }, n.onTransitionEnd = function(s, i) {
    this.setNextCallback(i);
    var a = this.props.nodeRef ? this.props.nodeRef.current : ds.findDOMNode(this), l = s == null && !this.props.addEndListener;
    if (!a || l) {
      setTimeout(this.nextCallback, 0);
      return;
    }
    if (this.props.addEndListener) {
      var c = this.props.nodeRef ? [this.nextCallback] : [a, this.nextCallback], u = c[0], d = c[1];
      this.props.addEndListener(u, d);
    }
    s != null && setTimeout(this.nextCallback, s);
  }, n.render = function() {
    var s = this.state.status;
    if (s === mo)
      return null;
    var i = this.props, a = i.children;
    i.in, i.mountOnEnter, i.unmountOnExit, i.appear, i.enter, i.exit, i.timeout, i.addEndListener, i.onEnter, i.onEntering, i.onEntered, i.onExit, i.onExiting, i.onExited, i.nodeRef;
    var l = Ee(i, ["children", "in", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "timeout", "addEndListener", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "nodeRef"]);
    return (
      // allows for nested Transitions
      /* @__PURE__ */ yt.createElement(Ws.Provider, {
        value: null
      }, typeof a == "function" ? a(s, l) : yt.cloneElement(yt.Children.only(a), l))
    );
  }, t;
})(yt.Component);
Bt.contextType = Ws;
Bt.propTypes = process.env.NODE_ENV !== "production" ? {
  /**
   * A React reference to DOM element that need to transition:
   * https://stackoverflow.com/a/51127130/4671932
   *
   *   - When `nodeRef` prop is used, `node` is not passed to callback functions
   *      (e.g. `onEnter`) because user already has direct access to the node.
   *   - When changing `key` prop of `Transition` in a `TransitionGroup` a new
   *     `nodeRef` need to be provided to `Transition` with changed `key` prop
   *     (see
   *     [test/CSSTransition-test.js](https://github.com/reactjs/react-transition-group/blob/13435f897b3ab71f6e19d724f145596f5910581c/test/CSSTransition-test.js#L362-L437)).
   */
  nodeRef: o.shape({
    current: typeof Element > "u" ? o.any : function(e, t, n, r, s, i) {
      var a = e[t];
      return o.instanceOf(a && "ownerDocument" in a ? a.ownerDocument.defaultView.Element : Element)(e, t, n, r, s, i);
    }
  }),
  /**
   * A `function` child can be used instead of a React element. This function is
   * called with the current transition status (`'entering'`, `'entered'`,
   * `'exiting'`, `'exited'`), which can be used to apply context
   * specific props to a component.
   *
   * ```jsx
   * <Transition in={this.state.in} timeout={150}>
   *   {state => (
   *     <MyComponent className={`fade fade-${state}`} />
   *   )}
   * </Transition>
   * ```
   */
  children: o.oneOfType([o.func.isRequired, o.element.isRequired]).isRequired,
  /**
   * Show the component; triggers the enter or exit states
   */
  in: o.bool,
  /**
   * By default the child component is mounted immediately along with
   * the parent `Transition` component. If you want to "lazy mount" the component on the
   * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay
   * mounted, even on "exited", unless you also specify `unmountOnExit`.
   */
  mountOnEnter: o.bool,
  /**
   * By default the child component stays mounted after it reaches the `'exited'` state.
   * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.
   */
  unmountOnExit: o.bool,
  /**
   * By default the child component does not perform the enter transition when
   * it first mounts, regardless of the value of `in`. If you want this
   * behavior, set both `appear` and `in` to `true`.
   *
   * > **Note**: there are no special appear states like `appearing`/`appeared`, this prop
   * > only adds an additional enter transition. However, in the
   * > `<CSSTransition>` component that first enter transition does result in
   * > additional `.appear-*` classes, that way you can choose to style it
   * > differently.
   */
  appear: o.bool,
  /**
   * Enable or disable enter transitions.
   */
  enter: o.bool,
  /**
   * Enable or disable exit transitions.
   */
  exit: o.bool,
  /**
   * The duration of the transition, in milliseconds.
   * Required unless `addEndListener` is provided.
   *
   * You may specify a single timeout for all transitions:
   *
   * ```jsx
   * timeout={500}
   * ```
   *
   * or individually:
   *
   * ```jsx
   * timeout={{
   *  appear: 500,
   *  enter: 300,
   *  exit: 500,
   * }}
   * ```
   *
   * - `appear` defaults to the value of `enter`
   * - `enter` defaults to `0`
   * - `exit` defaults to `0`
   *
   * @type {number | { enter?: number, exit?: number, appear?: number }}
   */
  timeout: function(t) {
    var n = tx;
    t.addEndListener || (n = n.isRequired);
    for (var r = arguments.length, s = new Array(r > 1 ? r - 1 : 0), i = 1; i < r; i++)
      s[i - 1] = arguments[i];
    return n.apply(void 0, [t].concat(s));
  },
  /**
   * Add a custom transition end trigger. Called with the transitioning
   * DOM node and a `done` callback. Allows for more fine grained transition end
   * logic. Timeouts are still used as a fallback if provided.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * ```jsx
   * addEndListener={(node, done) => {
   *   // use the css transitionend event to mark the finish of a transition
   *   node.addEventListener('transitionend', done, false);
   * }}
   * ```
   */
  addEndListener: o.func,
  /**
   * Callback fired before the "entering" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool) -> void
   */
  onEnter: o.func,
  /**
   * Callback fired after the "entering" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool)
   */
  onEntering: o.func,
  /**
   * Callback fired after the "entered" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool) -> void
   */
  onEntered: o.func,
  /**
   * Callback fired before the "exiting" status is applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement) -> void
   */
  onExit: o.func,
  /**
   * Callback fired after the "exiting" status is applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement) -> void
   */
  onExiting: o.func,
  /**
   * Callback fired after the "exited" status is applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed
   *
   * @type Function(node: HtmlElement) -> void
   */
  onExited: o.func
} : {};
function vr() {
}
Bt.defaultProps = {
  in: !1,
  mountOnEnter: !1,
  unmountOnExit: !1,
  appear: !1,
  enter: !0,
  exit: !0,
  onEnter: vr,
  onEntering: vr,
  onEntered: vr,
  onExit: vr,
  onExiting: vr,
  onExited: vr
};
Bt.UNMOUNTED = mo;
Bt.EXITED = Gn;
Bt.ENTERING = Xn;
Bt.ENTERED = Or;
Bt.EXITING = Na;
var rx = function(t, n) {
  return t && n && n.split(" ").forEach(function(r) {
    return Jv(t, r);
  });
}, ta = function(t, n) {
  return t && n && n.split(" ").forEach(function(r) {
    return ex(t, r);
  });
}, Ol = /* @__PURE__ */ (function(e) {
  El(t, e);
  function t() {
    for (var r, s = arguments.length, i = new Array(s), a = 0; a < s; a++)
      i[a] = arguments[a];
    return r = e.call.apply(e, [this].concat(i)) || this, r.appliedClasses = {
      appear: {},
      enter: {},
      exit: {}
    }, r.onEnter = function(l, c) {
      var u = r.resolveArguments(l, c), d = u[0], f = u[1];
      r.removeClasses(d, "exit"), r.addClass(d, f ? "appear" : "enter", "base"), r.props.onEnter && r.props.onEnter(l, c);
    }, r.onEntering = function(l, c) {
      var u = r.resolveArguments(l, c), d = u[0], f = u[1], y = f ? "appear" : "enter";
      r.addClass(d, y, "active"), r.props.onEntering && r.props.onEntering(l, c);
    }, r.onEntered = function(l, c) {
      var u = r.resolveArguments(l, c), d = u[0], f = u[1], y = f ? "appear" : "enter";
      r.removeClasses(d, y), r.addClass(d, y, "done"), r.props.onEntered && r.props.onEntered(l, c);
    }, r.onExit = function(l) {
      var c = r.resolveArguments(l), u = c[0];
      r.removeClasses(u, "appear"), r.removeClasses(u, "enter"), r.addClass(u, "exit", "base"), r.props.onExit && r.props.onExit(l);
    }, r.onExiting = function(l) {
      var c = r.resolveArguments(l), u = c[0];
      r.addClass(u, "exit", "active"), r.props.onExiting && r.props.onExiting(l);
    }, r.onExited = function(l) {
      var c = r.resolveArguments(l), u = c[0];
      r.removeClasses(u, "exit"), r.addClass(u, "exit", "done"), r.props.onExited && r.props.onExited(l);
    }, r.resolveArguments = function(l, c) {
      return r.props.nodeRef ? [r.props.nodeRef.current, l] : [l, c];
    }, r.getClassNames = function(l) {
      var c = r.props.classNames, u = typeof c == "string", d = u && c ? c + "-" : "", f = u ? "" + d + l : c[l], y = u ? f + "-active" : c[l + "Active"], g = u ? f + "-done" : c[l + "Done"];
      return {
        baseClassName: f,
        activeClassName: y,
        doneClassName: g
      };
    }, r;
  }
  var n = t.prototype;
  return n.addClass = function(s, i, a) {
    var l = this.getClassNames(i)[a + "ClassName"], c = this.getClassNames("enter"), u = c.doneClassName;
    i === "appear" && a === "done" && u && (l += " " + u), a === "active" && s && ep(s), l && (this.appliedClasses[i][a] = l, rx(s, l));
  }, n.removeClasses = function(s, i) {
    var a = this.appliedClasses[i], l = a.base, c = a.active, u = a.done;
    this.appliedClasses[i] = {}, l && ta(s, l), c && ta(s, c), u && ta(s, u);
  }, n.render = function() {
    var s = this.props;
    s.classNames;
    var i = Ee(s, ["classNames"]);
    return /* @__PURE__ */ yt.createElement(Bt, j({}, i, {
      onEnter: this.onEnter,
      onEntered: this.onEntered,
      onEntering: this.onEntering,
      onExit: this.onExit,
      onExiting: this.onExiting,
      onExited: this.onExited
    }));
  }, t;
})(yt.Component);
Ol.defaultProps = {
  classNames: ""
};
Ol.propTypes = process.env.NODE_ENV !== "production" ? j({}, Bt.propTypes, {
  /**
   * The animation classNames applied to the component as it appears, enters,
   * exits or has finished the transition. A single name can be provided, which
   * will be suffixed for each stage, e.g. `classNames="fade"` applies:
   *
   * - `fade-appear`, `fade-appear-active`, `fade-appear-done`
   * - `fade-enter`, `fade-enter-active`, `fade-enter-done`
   * - `fade-exit`, `fade-exit-active`, `fade-exit-done`
   *
   * A few details to note about how these classes are applied:
   *
   * 1. They are _joined_ with the ones that are already defined on the child
   *    component, so if you want to add some base styles, you can use
   *    `className` without worrying that it will be overridden.
   *
   * 2. If the transition component mounts with `in={false}`, no classes are
   *    applied yet. You might be expecting `*-exit-done`, but if you think
   *    about it, a component cannot finish exiting if it hasn't entered yet.
   *
   * 2. `fade-appear-done` and `fade-enter-done` will _both_ be applied. This
   *    allows you to define different behavior for when appearing is done and
   *    when regular entering is done, using selectors like
   *    `.fade-enter-done:not(.fade-appear-done)`. For example, you could apply
   *    an epic entrance animation when element first appears in the DOM using
   *    [Animate.css](https://daneden.github.io/animate.css/). Otherwise you can
   *    simply use `fade-enter-done` for defining both cases.
   *
   * Each individual classNames can also be specified independently like:
   *
   * ```js
   * classNames={{
   *  appear: 'my-appear',
   *  appearActive: 'my-active-appear',
   *  appearDone: 'my-done-appear',
   *  enter: 'my-enter',
   *  enterActive: 'my-active-enter',
   *  enterDone: 'my-done-enter',
   *  exit: 'my-exit',
   *  exitActive: 'my-active-exit',
   *  exitDone: 'my-done-exit',
   * }}
   * ```
   *
   * If you want to set these classes using CSS Modules:
   *
   * ```js
   * import styles from './styles.css';
   * ```
   *
   * you might want to use camelCase in your CSS file, that way could simply
   * spread them instead of listing them one by one:
   *
   * ```js
   * classNames={{ ...styles }}
   * ```
   *
   * @type {string | {
   *  appear?: string,
   *  appearActive?: string,
   *  appearDone?: string,
   *  enter?: string,
   *  enterActive?: string,
   *  enterDone?: string,
   *  exit?: string,
   *  exitActive?: string,
   *  exitDone?: string,
   * }}
   */
  classNames: nx,
  /**
   * A `<Transition>` callback fired immediately after the 'enter' or 'appear' class is
   * applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool)
   */
  onEnter: o.func,
  /**
   * A `<Transition>` callback fired immediately after the 'enter-active' or
   * 'appear-active' class is applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool)
   */
  onEntering: o.func,
  /**
   * A `<Transition>` callback fired immediately after the 'enter' or
   * 'appear' classes are **removed** and the `done` class is added to the DOM node.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool)
   */
  onEntered: o.func,
  /**
   * A `<Transition>` callback fired immediately after the 'exit' class is
   * applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed
   *
   * @type Function(node: HtmlElement)
   */
  onExit: o.func,
  /**
   * A `<Transition>` callback fired immediately after the 'exit-active' is applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed
   *
   * @type Function(node: HtmlElement)
   */
  onExiting: o.func,
  /**
   * A `<Transition>` callback fired immediately after the 'exit' classes
   * are **removed** and the `exit-done` class is added to the DOM node.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed
   *
   * @type Function(node: HtmlElement)
   */
  onExited: o.func
}) : {};
function ox(e) {
  if (e === void 0) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function Cl(e, t) {
  var n = function(i) {
    return t && Rs(i) ? t(i) : i;
  }, r = /* @__PURE__ */ Object.create(null);
  return e && Mm.map(e, function(s) {
    return s;
  }).forEach(function(s) {
    r[s.key] = n(s);
  }), r;
}
function sx(e, t) {
  e = e || {}, t = t || {};
  function n(d) {
    return d in t ? t[d] : e[d];
  }
  var r = /* @__PURE__ */ Object.create(null), s = [];
  for (var i in e)
    i in t ? s.length && (r[i] = s, s = []) : s.push(i);
  var a, l = {};
  for (var c in t) {
    if (r[c])
      for (a = 0; a < r[c].length; a++) {
        var u = r[c][a];
        l[r[c][a]] = n(u);
      }
    l[c] = n(c);
  }
  for (a = 0; a < s.length; a++)
    l[s[a]] = n(s[a]);
  return l;
}
function er(e, t, n) {
  return n[t] != null ? n[t] : e.props[t];
}
function ix(e, t) {
  return Cl(e.children, function(n) {
    return ks(n, {
      onExited: t.bind(null, n),
      in: !0,
      appear: er(n, "appear", e),
      enter: er(n, "enter", e),
      exit: er(n, "exit", e)
    });
  });
}
function ax(e, t, n) {
  var r = Cl(e.children), s = sx(t, r);
  return Object.keys(s).forEach(function(i) {
    var a = s[i];
    if (Rs(a)) {
      var l = i in t, c = i in r, u = t[i], d = Rs(u) && !u.props.in;
      c && (!l || d) ? s[i] = ks(a, {
        onExited: n.bind(null, a),
        in: !0,
        exit: er(a, "exit", e),
        enter: er(a, "enter", e)
      }) : !c && l && !d ? s[i] = ks(a, {
        in: !1
      }) : c && l && Rs(u) && (s[i] = ks(a, {
        onExited: n.bind(null, a),
        in: u.props.in,
        exit: er(a, "exit", e),
        enter: er(a, "enter", e)
      }));
    }
  }), s;
}
var lx = Object.values || function(e) {
  return Object.keys(e).map(function(t) {
    return e[t];
  });
}, cx = {
  component: "div",
  childFactory: function(t) {
    return t;
  }
}, Zo = /* @__PURE__ */ (function(e) {
  El(t, e);
  function t(r, s) {
    var i;
    i = e.call(this, r, s) || this;
    var a = i.handleExited.bind(ox(i));
    return i.state = {
      contextValue: {
        isMounting: !0
      },
      handleExited: a,
      firstRender: !0
    }, i;
  }
  var n = t.prototype;
  return n.componentDidMount = function() {
    this.mounted = !0, this.setState({
      contextValue: {
        isMounting: !1
      }
    });
  }, n.componentWillUnmount = function() {
    this.mounted = !1;
  }, t.getDerivedStateFromProps = function(s, i) {
    var a = i.children, l = i.handleExited, c = i.firstRender;
    return {
      children: c ? ix(s, l) : ax(s, a, l),
      firstRender: !1
    };
  }, n.handleExited = function(s, i) {
    var a = Cl(this.props.children);
    s.key in a || (s.props.onExited && s.props.onExited(i), this.mounted && this.setState(function(l) {
      var c = j({}, l.children);
      return delete c[s.key], {
        children: c
      };
    }));
  }, n.render = function() {
    var s = this.props, i = s.component, a = s.childFactory, l = Ee(s, ["component", "childFactory"]), c = this.state.contextValue, u = lx(this.state.children).map(a);
    return delete l.appear, delete l.enter, delete l.exit, i === null ? /* @__PURE__ */ yt.createElement(Ws.Provider, {
      value: c
    }, u) : /* @__PURE__ */ yt.createElement(Ws.Provider, {
      value: c
    }, /* @__PURE__ */ yt.createElement(i, l, u));
  }, t;
})(yt.Component);
Zo.propTypes = process.env.NODE_ENV !== "production" ? {
  /**
   * `<TransitionGroup>` renders a `<div>` by default. You can change this
   * behavior by providing a `component` prop.
   * If you use React v16+ and would like to avoid a wrapping `<div>` element
   * you can pass in `component={null}`. This is useful if the wrapping div
   * borks your css styles.
   */
  component: o.any,
  /**
   * A set of `<Transition>` components, that are toggled `in` and out as they
   * leave. the `<TransitionGroup>` will inject specific transition props, so
   * remember to spread them through if you are wrapping the `<Transition>` as
   * with our `<Fade>` example.
   *
   * While this component is meant for multiple `Transition` or `CSSTransition`
   * children, sometimes you may want to have a single transition child with
   * content that you want to be transitioned out and in when you change it
   * (e.g. routes, images etc.) In that case you can change the `key` prop of
   * the transition child as you change its content, this will cause
   * `TransitionGroup` to transition the child out and back in.
   */
  children: o.node,
  /**
   * A convenience prop that enables or disables appear animations
   * for all children. Note that specifying this will override any defaults set
   * on individual children Transitions.
   */
  appear: o.bool,
  /**
   * A convenience prop that enables or disables enter animations
   * for all children. Note that specifying this will override any defaults set
   * on individual children Transitions.
   */
  enter: o.bool,
  /**
   * A convenience prop that enables or disables exit animations
   * for all children. Note that specifying this will override any defaults set
   * on individual children Transitions.
   */
  exit: o.bool,
  /**
   * You may need to apply reactive updates to a child as it is exiting.
   * This is generally done by using `cloneElement` however in the case of an exiting
   * child the element has already been removed and not accessible to the consumer.
   *
   * If you do need to update a child as it leaves you can provide a `childFactory`
   * to wrap every child, even the ones that are leaving.
   *
   * @type Function(child: ReactElement) -> ReactElement
   */
  childFactory: o.func
} : {};
Zo.defaultProps = cx;
const tp = (e) => e.scrollTop;
function zs(e, t) {
  const {
    timeout: n,
    easing: r,
    style: s = {}
  } = e;
  return {
    duration: s.transitionDuration ?? (typeof n == "number" ? n : n[t.mode] || 0),
    easing: s.transitionTimingFunction ?? (typeof r == "object" ? r[t.mode] : r),
    delay: s.transitionDelay
  };
}
function Aa(e) {
  return `scale(${e}, ${e ** 2})`;
}
const ux = {
  entering: {
    opacity: 1,
    transform: Aa(1)
  },
  entered: {
    opacity: 1,
    transform: "none"
  }
}, na = typeof navigator < "u" && /^((?!chrome|android).)*(safari|mobile)/i.test(navigator.userAgent) && /(os |version\/)15(.|_)4/i.test(navigator.userAgent), ko = /* @__PURE__ */ x.forwardRef(function(t, n) {
  const {
    addEndListener: r,
    appear: s = !0,
    children: i,
    easing: a,
    in: l,
    onEnter: c,
    onEntered: u,
    onEntering: d,
    onExit: f,
    onExited: y,
    onExiting: g,
    style: h,
    timeout: p = "auto",
    // eslint-disable-next-line react/prop-types
    TransitionComponent: m = Bt,
    ...b
  } = t, C = Dn(), O = x.useRef(), w = zr(), S = x.useRef(null), P = Ne(S, Qo(i), n), M = (I) => (N) => {
    if (I) {
      const _ = S.current;
      N === void 0 ? I(_) : I(_, N);
    }
  }, F = M(d), A = M((I, N) => {
    tp(I);
    const {
      duration: _,
      delay: G,
      easing: L
    } = zs({
      style: h,
      timeout: p,
      easing: a
    }, {
      mode: "enter"
    });
    let V;
    p === "auto" ? (V = w.transitions.getAutoHeightDuration(I.clientHeight), O.current = V) : V = _, I.style.transition = [w.transitions.create("opacity", {
      duration: V,
      delay: G
    }), w.transitions.create("transform", {
      duration: na ? V : V * 0.666,
      delay: G,
      easing: L
    })].join(","), c && c(I, N);
  }), $ = M(u), k = M(g), v = M((I) => {
    const {
      duration: N,
      delay: _,
      easing: G
    } = zs({
      style: h,
      timeout: p,
      easing: a
    }, {
      mode: "exit"
    });
    let L;
    p === "auto" ? (L = w.transitions.getAutoHeightDuration(I.clientHeight), O.current = L) : L = N, I.style.transition = [w.transitions.create("opacity", {
      duration: L,
      delay: _
    }), w.transitions.create("transform", {
      duration: na ? L : L * 0.666,
      delay: na ? _ : _ || L * 0.333,
      easing: G
    })].join(","), I.style.opacity = 0, I.style.transform = Aa(0.75), f && f(I);
  }), D = M(y), T = (I) => {
    p === "auto" && C.start(O.current || 0, I), r && r(S.current, I);
  };
  return /* @__PURE__ */ E.jsx(m, {
    appear: s,
    in: l,
    nodeRef: S,
    onEnter: A,
    onEntered: $,
    onEntering: F,
    onExit: v,
    onExited: D,
    onExiting: k,
    addEndListener: T,
    timeout: p === "auto" ? null : p,
    ...b,
    children: (I, {
      ownerState: N,
      ..._
    }) => /* @__PURE__ */ x.cloneElement(i, {
      style: {
        opacity: 0,
        transform: Aa(0.75),
        visibility: I === "exited" && !l ? "hidden" : void 0,
        ...ux[I],
        ...h,
        ...i.props.style
      },
      ref: P,
      ..._
    })
  });
});
process.env.NODE_ENV !== "production" && (ko.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Add a custom transition end trigger. Called with the transitioning DOM
   * node and a done callback. Allows for more fine grained transition end
   * logic. Note: Timeouts are still used as a fallback if provided.
   */
  addEndListener: o.func,
  /**
   * Perform the enter transition when it first mounts if `in` is also `true`.
   * Set this to `false` to disable this behavior.
   * @default true
   */
  appear: o.bool,
  /**
   * A single child content element.
   */
  children: Xo.isRequired,
  /**
   * The transition timing function.
   * You may specify a single easing or a object containing enter and exit values.
   */
  easing: o.oneOfType([o.shape({
    enter: o.string,
    exit: o.string
  }), o.string]),
  /**
   * If `true`, the component will transition in.
   */
  in: o.bool,
  /**
   * @ignore
   */
  onEnter: o.func,
  /**
   * @ignore
   */
  onEntered: o.func,
  /**
   * @ignore
   */
  onEntering: o.func,
  /**
   * @ignore
   */
  onExit: o.func,
  /**
   * @ignore
   */
  onExited: o.func,
  /**
   * @ignore
   */
  onExiting: o.func,
  /**
   * @ignore
   */
  style: o.object,
  /**
   * The duration for the transition, in milliseconds.
   * You may specify a single timeout for all transitions, or individually with an object.
   *
   * Set to 'auto' to automatically calculate transition time based on height.
   * @default 'auto'
   */
  timeout: o.oneOfType([o.oneOf(["auto"]), o.number, o.shape({
    appear: o.number,
    enter: o.number,
    exit: o.number
  })])
});
ko && (ko.muiSupportAuto = !0);
const dx = {
  entering: {
    opacity: 1
  },
  entered: {
    opacity: 1
  }
}, An = /* @__PURE__ */ x.forwardRef(function(t, n) {
  const r = zr(), s = {
    enter: r.transitions.duration.enteringScreen,
    exit: r.transitions.duration.leavingScreen
  }, {
    addEndListener: i,
    appear: a = !0,
    children: l,
    easing: c,
    in: u,
    onEnter: d,
    onEntered: f,
    onEntering: y,
    onExit: g,
    onExited: h,
    onExiting: p,
    style: m,
    timeout: b = s,
    // eslint-disable-next-line react/prop-types
    TransitionComponent: C = Bt,
    ...O
  } = t, w = x.useRef(null), S = Ne(w, Qo(l), n), P = (T) => (I) => {
    if (T) {
      const N = w.current;
      I === void 0 ? T(N) : T(N, I);
    }
  }, M = P(y), F = P((T, I) => {
    tp(T);
    const N = zs({
      style: m,
      timeout: b,
      easing: c
    }, {
      mode: "enter"
    });
    T.style.webkitTransition = r.transitions.create("opacity", N), T.style.transition = r.transitions.create("opacity", N), d && d(T, I);
  }), A = P(f), $ = P(p), k = P((T) => {
    const I = zs({
      style: m,
      timeout: b,
      easing: c
    }, {
      mode: "exit"
    });
    T.style.webkitTransition = r.transitions.create("opacity", I), T.style.transition = r.transitions.create("opacity", I), g && g(T);
  }), v = P(h), D = (T) => {
    i && i(w.current, T);
  };
  return /* @__PURE__ */ E.jsx(C, {
    appear: a,
    in: u,
    nodeRef: w,
    onEnter: F,
    onEntered: A,
    onEntering: M,
    onExit: k,
    onExited: v,
    onExiting: $,
    addEndListener: D,
    timeout: b,
    ...O,
    children: (T, {
      ownerState: I,
      ...N
    }) => /* @__PURE__ */ x.cloneElement(l, {
      style: {
        opacity: 0,
        visibility: T === "exited" && !u ? "hidden" : void 0,
        ...dx[T],
        ...m,
        ...l.props.style
      },
      ref: S,
      ...N
    })
  });
});
process.env.NODE_ENV !== "production" && (An.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Add a custom transition end trigger. Called with the transitioning DOM
   * node and a done callback. Allows for more fine grained transition end
   * logic. Note: Timeouts are still used as a fallback if provided.
   */
  addEndListener: o.func,
  /**
   * Perform the enter transition when it first mounts if `in` is also `true`.
   * Set this to `false` to disable this behavior.
   * @default true
   */
  appear: o.bool,
  /**
   * A single child content element.
   */
  children: Xo.isRequired,
  /**
   * The transition timing function.
   * You may specify a single easing or a object containing enter and exit values.
   */
  easing: o.oneOfType([o.shape({
    enter: o.string,
    exit: o.string
  }), o.string]),
  /**
   * If `true`, the component will transition in.
   */
  in: o.bool,
  /**
   * @ignore
   */
  onEnter: o.func,
  /**
   * @ignore
   */
  onEntered: o.func,
  /**
   * @ignore
   */
  onEntering: o.func,
  /**
   * @ignore
   */
  onExit: o.func,
  /**
   * @ignore
   */
  onExited: o.func,
  /**
   * @ignore
   */
  onExiting: o.func,
  /**
   * @ignore
   */
  style: o.object,
  /**
   * The duration for the transition, in milliseconds.
   * You may specify a single timeout for all transitions, or individually with an object.
   * @default {
   *   enter: theme.transitions.duration.enteringScreen,
   *   exit: theme.transitions.duration.leavingScreen,
   * }
   */
  timeout: o.oneOfType([o.number, o.shape({
    appear: o.number,
    enter: o.number,
    exit: o.number
  })])
});
function fx(e) {
  const t = typeof e;
  switch (t) {
    case "number":
      return Number.isNaN(e) ? "NaN" : Number.isFinite(e) ? e !== Math.floor(e) ? "float" : "number" : "Infinity";
    case "object":
      return e === null ? "null" : e.constructor.name;
    default:
      return t;
  }
}
function np(e, t, n, r) {
  const s = e[t];
  if (s == null || !Number.isInteger(s)) {
    const i = fx(s);
    return new RangeError(`Invalid ${r} \`${t}\` of type \`${i}\` supplied to \`${n}\`, expected \`integer\`.`);
  }
  return null;
}
function rp(e, t, n, r) {
  return e[t] === void 0 ? null : np(e, t, n, r);
}
function Fa() {
  return null;
}
rp.isRequired = np;
Fa.isRequired = Fa;
const op = process.env.NODE_ENV === "production" ? Fa : rp;
function px(e) {
  return we("MuiPaper", e);
}
xe("MuiPaper", ["root", "rounded", "outlined", "elevation", "elevation0", "elevation1", "elevation2", "elevation3", "elevation4", "elevation5", "elevation6", "elevation7", "elevation8", "elevation9", "elevation10", "elevation11", "elevation12", "elevation13", "elevation14", "elevation15", "elevation16", "elevation17", "elevation18", "elevation19", "elevation20", "elevation21", "elevation22", "elevation23", "elevation24"]);
const hx = (e) => {
  const {
    square: t,
    elevation: n,
    variant: r,
    classes: s
  } = e, i = {
    root: ["root", r, !t && "rounded", r === "elevation" && `elevation${n}`]
  };
  return be(i, px, s);
}, mx = Q("div", {
  name: "MuiPaper",
  slot: "Root",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e;
    return [t.root, t[n.variant], !n.square && t.rounded, n.variant === "elevation" && t[`elevation${n.elevation}`]];
  }
})(qe(({
  theme: e
}) => ({
  backgroundColor: (e.vars || e).palette.background.paper,
  color: (e.vars || e).palette.text.primary,
  transition: e.transitions.create("box-shadow"),
  variants: [{
    props: ({
      ownerState: t
    }) => !t.square,
    style: {
      borderRadius: e.shape.borderRadius
    }
  }, {
    props: {
      variant: "outlined"
    },
    style: {
      border: `1px solid ${(e.vars || e).palette.divider}`
    }
  }, {
    props: {
      variant: "elevation"
    },
    style: {
      boxShadow: "var(--Paper-shadow)",
      backgroundImage: "var(--Paper-overlay)"
    }
  }]
}))), Jo = /* @__PURE__ */ x.forwardRef(function(t, n) {
  const r = Ae({
    props: t,
    name: "MuiPaper"
  }), s = zr(), {
    className: i,
    component: a = "div",
    elevation: l = 1,
    square: c = !1,
    variant: u = "elevation",
    ...d
  } = r, f = {
    ...r,
    component: a,
    elevation: l,
    square: c,
    variant: u
  }, y = hx(f);
  return process.env.NODE_ENV !== "production" && s.shadows[l] === void 0 && console.error([`MUI: The elevation provided <Paper elevation={${l}}> is not available in the theme.`, `Please make sure that \`theme.shadows[${l}]\` is defined.`].join(`
`)), /* @__PURE__ */ E.jsx(mx, {
    as: a,
    ownerState: f,
    className: pe(y.root, i),
    ref: n,
    ...d,
    style: {
      ...u === "elevation" && {
        "--Paper-shadow": (s.vars || s).shadows[l],
        ...s.vars && {
          "--Paper-overlay": s.vars.overlays?.[l]
        },
        ...!s.vars && s.palette.mode === "dark" && {
          "--Paper-overlay": `linear-gradient(${an("#fff", Ra(l))}, ${an("#fff", Ra(l))})`
        }
      },
      ...d.style
    }
  });
});
process.env.NODE_ENV !== "production" && (Jo.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: o.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: o.object,
  /**
   * @ignore
   */
  className: o.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: o.elementType,
  /**
   * Shadow depth, corresponds to `dp` in the spec.
   * It accepts values between 0 and 24 inclusive.
   * @default 1
   */
  elevation: wn(op, (e) => {
    const {
      elevation: t,
      variant: n
    } = e;
    return t > 0 && n === "outlined" ? new Error(`MUI: Combining \`elevation={${t}}\` with \`variant="${n}"\` has no effect. Either use \`elevation={0}\` or use a different \`variant\`.`) : null;
  }),
  /**
   * If `true`, rounded corners are disabled.
   * @default false
   */
  square: o.bool,
  /**
   * @ignore
   */
  style: o.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: o.oneOfType([o.arrayOf(o.oneOfType([o.func, o.object, o.bool])), o.func, o.object]),
  /**
   * The variant to use.
   * @default 'elevation'
   */
  variant: o.oneOfType([o.oneOf(["elevation", "outlined"]), o.string])
});
function gn(e, t, n, r, s) {
  if (process.env.NODE_ENV === "production")
    return null;
  const i = e[t], a = s || t;
  return i == null ? null : i && i.nodeType !== 1 ? new Error(`Invalid ${r} \`${a}\` supplied to \`${n}\`. Expected an HTMLElement.`) : null;
}
function pt(e) {
  return e && e.ownerDocument || document;
}
var Pt = "top", _t = "bottom", Vt = "right", Tt = "left", Pl = "auto", es = [Pt, _t, Vt, Tt], Fr = "start", Do = "end", yx = "clippingParents", sp = "viewport", no = "popper", gx = "reference", wu = /* @__PURE__ */ es.reduce(function(e, t) {
  return e.concat([t + "-" + Fr, t + "-" + Do]);
}, []), ip = /* @__PURE__ */ [].concat(es, [Pl]).reduce(function(e, t) {
  return e.concat([t, t + "-" + Fr, t + "-" + Do]);
}, []), bx = "beforeRead", vx = "read", xx = "afterRead", wx = "beforeMain", Sx = "main", Ex = "afterMain", Ox = "beforeWrite", Cx = "write", Px = "afterWrite", Tx = [bx, vx, xx, wx, Sx, Ex, Ox, Cx, Px];
function cn(e) {
  return e ? (e.nodeName || "").toLowerCase() : null;
}
function It(e) {
  if (e == null)
    return window;
  if (e.toString() !== "[object Window]") {
    var t = e.ownerDocument;
    return t && t.defaultView || window;
  }
  return e;
}
function ur(e) {
  var t = It(e).Element;
  return e instanceof t || e instanceof Element;
}
function jt(e) {
  var t = It(e).HTMLElement;
  return e instanceof t || e instanceof HTMLElement;
}
function Tl(e) {
  if (typeof ShadowRoot > "u")
    return !1;
  var t = It(e).ShadowRoot;
  return e instanceof t || e instanceof ShadowRoot;
}
function Rx(e) {
  var t = e.state;
  Object.keys(t.elements).forEach(function(n) {
    var r = t.styles[n] || {}, s = t.attributes[n] || {}, i = t.elements[n];
    !jt(i) || !cn(i) || (Object.assign(i.style, r), Object.keys(s).forEach(function(a) {
      var l = s[a];
      l === !1 ? i.removeAttribute(a) : i.setAttribute(a, l === !0 ? "" : l);
    }));
  });
}
function kx(e) {
  var t = e.state, n = {
    popper: {
      position: t.options.strategy,
      left: "0",
      top: "0",
      margin: "0"
    },
    arrow: {
      position: "absolute"
    },
    reference: {}
  };
  return Object.assign(t.elements.popper.style, n.popper), t.styles = n, t.elements.arrow && Object.assign(t.elements.arrow.style, n.arrow), function() {
    Object.keys(t.elements).forEach(function(r) {
      var s = t.elements[r], i = t.attributes[r] || {}, a = Object.keys(t.styles.hasOwnProperty(r) ? t.styles[r] : n[r]), l = a.reduce(function(c, u) {
        return c[u] = "", c;
      }, {});
      !jt(s) || !cn(s) || (Object.assign(s.style, l), Object.keys(i).forEach(function(c) {
        s.removeAttribute(c);
      }));
    });
  };
}
const Dx = {
  name: "applyStyles",
  enabled: !0,
  phase: "write",
  fn: Rx,
  effect: kx,
  requires: ["computeStyles"]
};
function on(e) {
  return e.split("-")[0];
}
var rr = Math.max, Us = Math.min, $r = Math.round;
function $a() {
  var e = navigator.userAgentData;
  return e != null && e.brands && Array.isArray(e.brands) ? e.brands.map(function(t) {
    return t.brand + "/" + t.version;
  }).join(" ") : navigator.userAgent;
}
function ap() {
  return !/^((?!chrome|android).)*safari/i.test($a());
}
function jr(e, t, n) {
  t === void 0 && (t = !1), n === void 0 && (n = !1);
  var r = e.getBoundingClientRect(), s = 1, i = 1;
  t && jt(e) && (s = e.offsetWidth > 0 && $r(r.width) / e.offsetWidth || 1, i = e.offsetHeight > 0 && $r(r.height) / e.offsetHeight || 1);
  var a = ur(e) ? It(e) : window, l = a.visualViewport, c = !ap() && n, u = (r.left + (c && l ? l.offsetLeft : 0)) / s, d = (r.top + (c && l ? l.offsetTop : 0)) / i, f = r.width / s, y = r.height / i;
  return {
    width: f,
    height: y,
    top: d,
    right: u + f,
    bottom: d + y,
    left: u,
    x: u,
    y: d
  };
}
function Rl(e) {
  var t = jr(e), n = e.offsetWidth, r = e.offsetHeight;
  return Math.abs(t.width - n) <= 1 && (n = t.width), Math.abs(t.height - r) <= 1 && (r = t.height), {
    x: e.offsetLeft,
    y: e.offsetTop,
    width: n,
    height: r
  };
}
function lp(e, t) {
  var n = t.getRootNode && t.getRootNode();
  if (e.contains(t))
    return !0;
  if (n && Tl(n)) {
    var r = t;
    do {
      if (r && e.isSameNode(r))
        return !0;
      r = r.parentNode || r.host;
    } while (r);
  }
  return !1;
}
function bn(e) {
  return It(e).getComputedStyle(e);
}
function Mx(e) {
  return ["table", "td", "th"].indexOf(cn(e)) >= 0;
}
function Bn(e) {
  return ((ur(e) ? e.ownerDocument : (
    // $FlowFixMe[prop-missing]
    e.document
  )) || window.document).documentElement;
}
function bi(e) {
  return cn(e) === "html" ? e : (
    // this is a quicker (but less type safe) way to save quite some bytes from the bundle
    // $FlowFixMe[incompatible-return]
    // $FlowFixMe[prop-missing]
    e.assignedSlot || // step into the shadow DOM of the parent of a slotted node
    e.parentNode || // DOM Element detected
    (Tl(e) ? e.host : null) || // ShadowRoot detected
    // $FlowFixMe[incompatible-call]: HTMLElement is a Node
    Bn(e)
  );
}
function Su(e) {
  return !jt(e) || // https://github.com/popperjs/popper-core/issues/837
  bn(e).position === "fixed" ? null : e.offsetParent;
}
function Ix(e) {
  var t = /firefox/i.test($a()), n = /Trident/i.test($a());
  if (n && jt(e)) {
    var r = bn(e);
    if (r.position === "fixed")
      return null;
  }
  var s = bi(e);
  for (Tl(s) && (s = s.host); jt(s) && ["html", "body"].indexOf(cn(s)) < 0; ) {
    var i = bn(s);
    if (i.transform !== "none" || i.perspective !== "none" || i.contain === "paint" || ["transform", "perspective"].indexOf(i.willChange) !== -1 || t && i.willChange === "filter" || t && i.filter && i.filter !== "none")
      return s;
    s = s.parentNode;
  }
  return null;
}
function ts(e) {
  for (var t = It(e), n = Su(e); n && Mx(n) && bn(n).position === "static"; )
    n = Su(n);
  return n && (cn(n) === "html" || cn(n) === "body" && bn(n).position === "static") ? t : n || Ix(e) || t;
}
function kl(e) {
  return ["top", "bottom"].indexOf(e) >= 0 ? "x" : "y";
}
function xo(e, t, n) {
  return rr(e, Us(t, n));
}
function Nx(e, t, n) {
  var r = xo(e, t, n);
  return r > n ? n : r;
}
function cp() {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
}
function up(e) {
  return Object.assign({}, cp(), e);
}
function dp(e, t) {
  return t.reduce(function(n, r) {
    return n[r] = e, n;
  }, {});
}
var Ax = function(t, n) {
  return t = typeof t == "function" ? t(Object.assign({}, n.rects, {
    placement: n.placement
  })) : t, up(typeof t != "number" ? t : dp(t, es));
};
function Fx(e) {
  var t, n = e.state, r = e.name, s = e.options, i = n.elements.arrow, a = n.modifiersData.popperOffsets, l = on(n.placement), c = kl(l), u = [Tt, Vt].indexOf(l) >= 0, d = u ? "height" : "width";
  if (!(!i || !a)) {
    var f = Ax(s.padding, n), y = Rl(i), g = c === "y" ? Pt : Tt, h = c === "y" ? _t : Vt, p = n.rects.reference[d] + n.rects.reference[c] - a[c] - n.rects.popper[d], m = a[c] - n.rects.reference[c], b = ts(i), C = b ? c === "y" ? b.clientHeight || 0 : b.clientWidth || 0 : 0, O = p / 2 - m / 2, w = f[g], S = C - y[d] - f[h], P = C / 2 - y[d] / 2 + O, M = xo(w, P, S), F = c;
    n.modifiersData[r] = (t = {}, t[F] = M, t.centerOffset = M - P, t);
  }
}
function $x(e) {
  var t = e.state, n = e.options, r = n.element, s = r === void 0 ? "[data-popper-arrow]" : r;
  s != null && (typeof s == "string" && (s = t.elements.popper.querySelector(s), !s) || lp(t.elements.popper, s) && (t.elements.arrow = s));
}
const jx = {
  name: "arrow",
  enabled: !0,
  phase: "main",
  fn: Fx,
  effect: $x,
  requires: ["popperOffsets"],
  requiresIfExists: ["preventOverflow"]
};
function _r(e) {
  return e.split("-")[1];
}
var _x = {
  top: "auto",
  right: "auto",
  bottom: "auto",
  left: "auto"
};
function Vx(e, t) {
  var n = e.x, r = e.y, s = t.devicePixelRatio || 1;
  return {
    x: $r(n * s) / s || 0,
    y: $r(r * s) / s || 0
  };
}
function Eu(e) {
  var t, n = e.popper, r = e.popperRect, s = e.placement, i = e.variation, a = e.offsets, l = e.position, c = e.gpuAcceleration, u = e.adaptive, d = e.roundOffsets, f = e.isFixed, y = a.x, g = y === void 0 ? 0 : y, h = a.y, p = h === void 0 ? 0 : h, m = typeof d == "function" ? d({
    x: g,
    y: p
  }) : {
    x: g,
    y: p
  };
  g = m.x, p = m.y;
  var b = a.hasOwnProperty("x"), C = a.hasOwnProperty("y"), O = Tt, w = Pt, S = window;
  if (u) {
    var P = ts(n), M = "clientHeight", F = "clientWidth";
    if (P === It(n) && (P = Bn(n), bn(P).position !== "static" && l === "absolute" && (M = "scrollHeight", F = "scrollWidth")), P = P, s === Pt || (s === Tt || s === Vt) && i === Do) {
      w = _t;
      var A = f && P === S && S.visualViewport ? S.visualViewport.height : (
        // $FlowFixMe[prop-missing]
        P[M]
      );
      p -= A - r.height, p *= c ? 1 : -1;
    }
    if (s === Tt || (s === Pt || s === _t) && i === Do) {
      O = Vt;
      var $ = f && P === S && S.visualViewport ? S.visualViewport.width : (
        // $FlowFixMe[prop-missing]
        P[F]
      );
      g -= $ - r.width, g *= c ? 1 : -1;
    }
  }
  var k = Object.assign({
    position: l
  }, u && _x), v = d === !0 ? Vx({
    x: g,
    y: p
  }, It(n)) : {
    x: g,
    y: p
  };
  if (g = v.x, p = v.y, c) {
    var D;
    return Object.assign({}, k, (D = {}, D[w] = C ? "0" : "", D[O] = b ? "0" : "", D.transform = (S.devicePixelRatio || 1) <= 1 ? "translate(" + g + "px, " + p + "px)" : "translate3d(" + g + "px, " + p + "px, 0)", D));
  }
  return Object.assign({}, k, (t = {}, t[w] = C ? p + "px" : "", t[O] = b ? g + "px" : "", t.transform = "", t));
}
function Lx(e) {
  var t = e.state, n = e.options, r = n.gpuAcceleration, s = r === void 0 ? !0 : r, i = n.adaptive, a = i === void 0 ? !0 : i, l = n.roundOffsets, c = l === void 0 ? !0 : l, u = {
    placement: on(t.placement),
    variation: _r(t.placement),
    popper: t.elements.popper,
    popperRect: t.rects.popper,
    gpuAcceleration: s,
    isFixed: t.options.strategy === "fixed"
  };
  t.modifiersData.popperOffsets != null && (t.styles.popper = Object.assign({}, t.styles.popper, Eu(Object.assign({}, u, {
    offsets: t.modifiersData.popperOffsets,
    position: t.options.strategy,
    adaptive: a,
    roundOffsets: c
  })))), t.modifiersData.arrow != null && (t.styles.arrow = Object.assign({}, t.styles.arrow, Eu(Object.assign({}, u, {
    offsets: t.modifiersData.arrow,
    position: "absolute",
    adaptive: !1,
    roundOffsets: c
  })))), t.attributes.popper = Object.assign({}, t.attributes.popper, {
    "data-popper-placement": t.placement
  });
}
const Bx = {
  name: "computeStyles",
  enabled: !0,
  phase: "beforeWrite",
  fn: Lx,
  data: {}
};
var gs = {
  passive: !0
};
function Wx(e) {
  var t = e.state, n = e.instance, r = e.options, s = r.scroll, i = s === void 0 ? !0 : s, a = r.resize, l = a === void 0 ? !0 : a, c = It(t.elements.popper), u = [].concat(t.scrollParents.reference, t.scrollParents.popper);
  return i && u.forEach(function(d) {
    d.addEventListener("scroll", n.update, gs);
  }), l && c.addEventListener("resize", n.update, gs), function() {
    i && u.forEach(function(d) {
      d.removeEventListener("scroll", n.update, gs);
    }), l && c.removeEventListener("resize", n.update, gs);
  };
}
const zx = {
  name: "eventListeners",
  enabled: !0,
  phase: "write",
  fn: function() {
  },
  effect: Wx,
  data: {}
};
var Ux = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
function Ms(e) {
  return e.replace(/left|right|bottom|top/g, function(t) {
    return Ux[t];
  });
}
var qx = {
  start: "end",
  end: "start"
};
function Ou(e) {
  return e.replace(/start|end/g, function(t) {
    return qx[t];
  });
}
function Dl(e) {
  var t = It(e), n = t.pageXOffset, r = t.pageYOffset;
  return {
    scrollLeft: n,
    scrollTop: r
  };
}
function Ml(e) {
  return jr(Bn(e)).left + Dl(e).scrollLeft;
}
function Hx(e, t) {
  var n = It(e), r = Bn(e), s = n.visualViewport, i = r.clientWidth, a = r.clientHeight, l = 0, c = 0;
  if (s) {
    i = s.width, a = s.height;
    var u = ap();
    (u || !u && t === "fixed") && (l = s.offsetLeft, c = s.offsetTop);
  }
  return {
    width: i,
    height: a,
    x: l + Ml(e),
    y: c
  };
}
function Yx(e) {
  var t, n = Bn(e), r = Dl(e), s = (t = e.ownerDocument) == null ? void 0 : t.body, i = rr(n.scrollWidth, n.clientWidth, s ? s.scrollWidth : 0, s ? s.clientWidth : 0), a = rr(n.scrollHeight, n.clientHeight, s ? s.scrollHeight : 0, s ? s.clientHeight : 0), l = -r.scrollLeft + Ml(e), c = -r.scrollTop;
  return bn(s || n).direction === "rtl" && (l += rr(n.clientWidth, s ? s.clientWidth : 0) - i), {
    width: i,
    height: a,
    x: l,
    y: c
  };
}
function Il(e) {
  var t = bn(e), n = t.overflow, r = t.overflowX, s = t.overflowY;
  return /auto|scroll|overlay|hidden/.test(n + s + r);
}
function fp(e) {
  return ["html", "body", "#document"].indexOf(cn(e)) >= 0 ? e.ownerDocument.body : jt(e) && Il(e) ? e : fp(bi(e));
}
function wo(e, t) {
  var n;
  t === void 0 && (t = []);
  var r = fp(e), s = r === ((n = e.ownerDocument) == null ? void 0 : n.body), i = It(r), a = s ? [i].concat(i.visualViewport || [], Il(r) ? r : []) : r, l = t.concat(a);
  return s ? l : (
    // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
    l.concat(wo(bi(a)))
  );
}
function ja(e) {
  return Object.assign({}, e, {
    left: e.x,
    top: e.y,
    right: e.x + e.width,
    bottom: e.y + e.height
  });
}
function Kx(e, t) {
  var n = jr(e, !1, t === "fixed");
  return n.top = n.top + e.clientTop, n.left = n.left + e.clientLeft, n.bottom = n.top + e.clientHeight, n.right = n.left + e.clientWidth, n.width = e.clientWidth, n.height = e.clientHeight, n.x = n.left, n.y = n.top, n;
}
function Cu(e, t, n) {
  return t === sp ? ja(Hx(e, n)) : ur(t) ? Kx(t, n) : ja(Yx(Bn(e)));
}
function Gx(e) {
  var t = wo(bi(e)), n = ["absolute", "fixed"].indexOf(bn(e).position) >= 0, r = n && jt(e) ? ts(e) : e;
  return ur(r) ? t.filter(function(s) {
    return ur(s) && lp(s, r) && cn(s) !== "body";
  }) : [];
}
function Xx(e, t, n, r) {
  var s = t === "clippingParents" ? Gx(e) : [].concat(t), i = [].concat(s, [n]), a = i[0], l = i.reduce(function(c, u) {
    var d = Cu(e, u, r);
    return c.top = rr(d.top, c.top), c.right = Us(d.right, c.right), c.bottom = Us(d.bottom, c.bottom), c.left = rr(d.left, c.left), c;
  }, Cu(e, a, r));
  return l.width = l.right - l.left, l.height = l.bottom - l.top, l.x = l.left, l.y = l.top, l;
}
function pp(e) {
  var t = e.reference, n = e.element, r = e.placement, s = r ? on(r) : null, i = r ? _r(r) : null, a = t.x + t.width / 2 - n.width / 2, l = t.y + t.height / 2 - n.height / 2, c;
  switch (s) {
    case Pt:
      c = {
        x: a,
        y: t.y - n.height
      };
      break;
    case _t:
      c = {
        x: a,
        y: t.y + t.height
      };
      break;
    case Vt:
      c = {
        x: t.x + t.width,
        y: l
      };
      break;
    case Tt:
      c = {
        x: t.x - n.width,
        y: l
      };
      break;
    default:
      c = {
        x: t.x,
        y: t.y
      };
  }
  var u = s ? kl(s) : null;
  if (u != null) {
    var d = u === "y" ? "height" : "width";
    switch (i) {
      case Fr:
        c[u] = c[u] - (t[d] / 2 - n[d] / 2);
        break;
      case Do:
        c[u] = c[u] + (t[d] / 2 - n[d] / 2);
        break;
    }
  }
  return c;
}
function Mo(e, t) {
  t === void 0 && (t = {});
  var n = t, r = n.placement, s = r === void 0 ? e.placement : r, i = n.strategy, a = i === void 0 ? e.strategy : i, l = n.boundary, c = l === void 0 ? yx : l, u = n.rootBoundary, d = u === void 0 ? sp : u, f = n.elementContext, y = f === void 0 ? no : f, g = n.altBoundary, h = g === void 0 ? !1 : g, p = n.padding, m = p === void 0 ? 0 : p, b = up(typeof m != "number" ? m : dp(m, es)), C = y === no ? gx : no, O = e.rects.popper, w = e.elements[h ? C : y], S = Xx(ur(w) ? w : w.contextElement || Bn(e.elements.popper), c, d, a), P = jr(e.elements.reference), M = pp({
    reference: P,
    element: O,
    placement: s
  }), F = ja(Object.assign({}, O, M)), A = y === no ? F : P, $ = {
    top: S.top - A.top + b.top,
    bottom: A.bottom - S.bottom + b.bottom,
    left: S.left - A.left + b.left,
    right: A.right - S.right + b.right
  }, k = e.modifiersData.offset;
  if (y === no && k) {
    var v = k[s];
    Object.keys($).forEach(function(D) {
      var T = [Vt, _t].indexOf(D) >= 0 ? 1 : -1, I = [Pt, _t].indexOf(D) >= 0 ? "y" : "x";
      $[D] += v[I] * T;
    });
  }
  return $;
}
function Qx(e, t) {
  t === void 0 && (t = {});
  var n = t, r = n.placement, s = n.boundary, i = n.rootBoundary, a = n.padding, l = n.flipVariations, c = n.allowedAutoPlacements, u = c === void 0 ? ip : c, d = _r(r), f = d ? l ? wu : wu.filter(function(h) {
    return _r(h) === d;
  }) : es, y = f.filter(function(h) {
    return u.indexOf(h) >= 0;
  });
  y.length === 0 && (y = f);
  var g = y.reduce(function(h, p) {
    return h[p] = Mo(e, {
      placement: p,
      boundary: s,
      rootBoundary: i,
      padding: a
    })[on(p)], h;
  }, {});
  return Object.keys(g).sort(function(h, p) {
    return g[h] - g[p];
  });
}
function Zx(e) {
  if (on(e) === Pl)
    return [];
  var t = Ms(e);
  return [Ou(e), t, Ou(t)];
}
function Jx(e) {
  var t = e.state, n = e.options, r = e.name;
  if (!t.modifiersData[r]._skip) {
    for (var s = n.mainAxis, i = s === void 0 ? !0 : s, a = n.altAxis, l = a === void 0 ? !0 : a, c = n.fallbackPlacements, u = n.padding, d = n.boundary, f = n.rootBoundary, y = n.altBoundary, g = n.flipVariations, h = g === void 0 ? !0 : g, p = n.allowedAutoPlacements, m = t.options.placement, b = on(m), C = b === m, O = c || (C || !h ? [Ms(m)] : Zx(m)), w = [m].concat(O).reduce(function(K, te) {
      return K.concat(on(te) === Pl ? Qx(t, {
        placement: te,
        boundary: d,
        rootBoundary: f,
        padding: u,
        flipVariations: h,
        allowedAutoPlacements: p
      }) : te);
    }, []), S = t.rects.reference, P = t.rects.popper, M = /* @__PURE__ */ new Map(), F = !0, A = w[0], $ = 0; $ < w.length; $++) {
      var k = w[$], v = on(k), D = _r(k) === Fr, T = [Pt, _t].indexOf(v) >= 0, I = T ? "width" : "height", N = Mo(t, {
        placement: k,
        boundary: d,
        rootBoundary: f,
        altBoundary: y,
        padding: u
      }), _ = T ? D ? Vt : Tt : D ? _t : Pt;
      S[I] > P[I] && (_ = Ms(_));
      var G = Ms(_), L = [];
      if (i && L.push(N[v] <= 0), l && L.push(N[_] <= 0, N[G] <= 0), L.every(function(K) {
        return K;
      })) {
        A = k, F = !1;
        break;
      }
      M.set(k, L);
    }
    if (F)
      for (var V = h ? 3 : 1, R = function(te) {
        var ee = w.find(function(J) {
          var ie = M.get(J);
          if (ie)
            return ie.slice(0, te).every(function(re) {
              return re;
            });
        });
        if (ee)
          return A = ee, "break";
      }, B = V; B > 0; B--) {
        var H = R(B);
        if (H === "break") break;
      }
    t.placement !== A && (t.modifiersData[r]._skip = !0, t.placement = A, t.reset = !0);
  }
}
const e0 = {
  name: "flip",
  enabled: !0,
  phase: "main",
  fn: Jx,
  requiresIfExists: ["offset"],
  data: {
    _skip: !1
  }
};
function Pu(e, t, n) {
  return n === void 0 && (n = {
    x: 0,
    y: 0
  }), {
    top: e.top - t.height - n.y,
    right: e.right - t.width + n.x,
    bottom: e.bottom - t.height + n.y,
    left: e.left - t.width - n.x
  };
}
function Tu(e) {
  return [Pt, Vt, _t, Tt].some(function(t) {
    return e[t] >= 0;
  });
}
function t0(e) {
  var t = e.state, n = e.name, r = t.rects.reference, s = t.rects.popper, i = t.modifiersData.preventOverflow, a = Mo(t, {
    elementContext: "reference"
  }), l = Mo(t, {
    altBoundary: !0
  }), c = Pu(a, r), u = Pu(l, s, i), d = Tu(c), f = Tu(u);
  t.modifiersData[n] = {
    referenceClippingOffsets: c,
    popperEscapeOffsets: u,
    isReferenceHidden: d,
    hasPopperEscaped: f
  }, t.attributes.popper = Object.assign({}, t.attributes.popper, {
    "data-popper-reference-hidden": d,
    "data-popper-escaped": f
  });
}
const n0 = {
  name: "hide",
  enabled: !0,
  phase: "main",
  requiresIfExists: ["preventOverflow"],
  fn: t0
};
function r0(e, t, n) {
  var r = on(e), s = [Tt, Pt].indexOf(r) >= 0 ? -1 : 1, i = typeof n == "function" ? n(Object.assign({}, t, {
    placement: e
  })) : n, a = i[0], l = i[1];
  return a = a || 0, l = (l || 0) * s, [Tt, Vt].indexOf(r) >= 0 ? {
    x: l,
    y: a
  } : {
    x: a,
    y: l
  };
}
function o0(e) {
  var t = e.state, n = e.options, r = e.name, s = n.offset, i = s === void 0 ? [0, 0] : s, a = ip.reduce(function(d, f) {
    return d[f] = r0(f, t.rects, i), d;
  }, {}), l = a[t.placement], c = l.x, u = l.y;
  t.modifiersData.popperOffsets != null && (t.modifiersData.popperOffsets.x += c, t.modifiersData.popperOffsets.y += u), t.modifiersData[r] = a;
}
const s0 = {
  name: "offset",
  enabled: !0,
  phase: "main",
  requires: ["popperOffsets"],
  fn: o0
};
function i0(e) {
  var t = e.state, n = e.name;
  t.modifiersData[n] = pp({
    reference: t.rects.reference,
    element: t.rects.popper,
    placement: t.placement
  });
}
const a0 = {
  name: "popperOffsets",
  enabled: !0,
  phase: "read",
  fn: i0,
  data: {}
};
function l0(e) {
  return e === "x" ? "y" : "x";
}
function c0(e) {
  var t = e.state, n = e.options, r = e.name, s = n.mainAxis, i = s === void 0 ? !0 : s, a = n.altAxis, l = a === void 0 ? !1 : a, c = n.boundary, u = n.rootBoundary, d = n.altBoundary, f = n.padding, y = n.tether, g = y === void 0 ? !0 : y, h = n.tetherOffset, p = h === void 0 ? 0 : h, m = Mo(t, {
    boundary: c,
    rootBoundary: u,
    padding: f,
    altBoundary: d
  }), b = on(t.placement), C = _r(t.placement), O = !C, w = kl(b), S = l0(w), P = t.modifiersData.popperOffsets, M = t.rects.reference, F = t.rects.popper, A = typeof p == "function" ? p(Object.assign({}, t.rects, {
    placement: t.placement
  })) : p, $ = typeof A == "number" ? {
    mainAxis: A,
    altAxis: A
  } : Object.assign({
    mainAxis: 0,
    altAxis: 0
  }, A), k = t.modifiersData.offset ? t.modifiersData.offset[t.placement] : null, v = {
    x: 0,
    y: 0
  };
  if (P) {
    if (i) {
      var D, T = w === "y" ? Pt : Tt, I = w === "y" ? _t : Vt, N = w === "y" ? "height" : "width", _ = P[w], G = _ + m[T], L = _ - m[I], V = g ? -F[N] / 2 : 0, R = C === Fr ? M[N] : F[N], B = C === Fr ? -F[N] : -M[N], H = t.elements.arrow, K = g && H ? Rl(H) : {
        width: 0,
        height: 0
      }, te = t.modifiersData["arrow#persistent"] ? t.modifiersData["arrow#persistent"].padding : cp(), ee = te[T], J = te[I], ie = xo(0, M[N], K[N]), re = O ? M[N] / 2 - V - ie - ee - $.mainAxis : R - ie - ee - $.mainAxis, q = O ? -M[N] / 2 + V + ie + J + $.mainAxis : B + ie + J + $.mainAxis, X = t.elements.arrow && ts(t.elements.arrow), z = X ? w === "y" ? X.clientTop || 0 : X.clientLeft || 0 : 0, ne = (D = k?.[w]) != null ? D : 0, Y = _ + re - ne - z, ae = _ + q - ne, W = xo(g ? Us(G, Y) : G, _, g ? rr(L, ae) : L);
      P[w] = W, v[w] = W - _;
    }
    if (l) {
      var oe, ye = w === "x" ? Pt : Tt, ge = w === "x" ? _t : Vt, se = P[S], ce = S === "y" ? "height" : "width", ue = se + m[ye], ke = se - m[ge], Te = [Pt, Tt].indexOf(b) !== -1, Me = (oe = k?.[S]) != null ? oe : 0, _e = Te ? ue : se - M[ce] - F[ce] - Me + $.altAxis, ft = Te ? se + M[ce] + F[ce] - Me - $.altAxis : ke, ht = g && Te ? Nx(_e, se, ft) : xo(g ? _e : ue, se, g ? ft : ke);
      P[S] = ht, v[S] = ht - se;
    }
    t.modifiersData[r] = v;
  }
}
const u0 = {
  name: "preventOverflow",
  enabled: !0,
  phase: "main",
  fn: c0,
  requiresIfExists: ["offset"]
};
function d0(e) {
  return {
    scrollLeft: e.scrollLeft,
    scrollTop: e.scrollTop
  };
}
function f0(e) {
  return e === It(e) || !jt(e) ? Dl(e) : d0(e);
}
function p0(e) {
  var t = e.getBoundingClientRect(), n = $r(t.width) / e.offsetWidth || 1, r = $r(t.height) / e.offsetHeight || 1;
  return n !== 1 || r !== 1;
}
function h0(e, t, n) {
  n === void 0 && (n = !1);
  var r = jt(t), s = jt(t) && p0(t), i = Bn(t), a = jr(e, s, n), l = {
    scrollLeft: 0,
    scrollTop: 0
  }, c = {
    x: 0,
    y: 0
  };
  return (r || !r && !n) && ((cn(t) !== "body" || // https://github.com/popperjs/popper-core/issues/1078
  Il(i)) && (l = f0(t)), jt(t) ? (c = jr(t, !0), c.x += t.clientLeft, c.y += t.clientTop) : i && (c.x = Ml(i))), {
    x: a.left + l.scrollLeft - c.x,
    y: a.top + l.scrollTop - c.y,
    width: a.width,
    height: a.height
  };
}
function m0(e) {
  var t = /* @__PURE__ */ new Map(), n = /* @__PURE__ */ new Set(), r = [];
  e.forEach(function(i) {
    t.set(i.name, i);
  });
  function s(i) {
    n.add(i.name);
    var a = [].concat(i.requires || [], i.requiresIfExists || []);
    a.forEach(function(l) {
      if (!n.has(l)) {
        var c = t.get(l);
        c && s(c);
      }
    }), r.push(i);
  }
  return e.forEach(function(i) {
    n.has(i.name) || s(i);
  }), r;
}
function y0(e) {
  var t = m0(e);
  return Tx.reduce(function(n, r) {
    return n.concat(t.filter(function(s) {
      return s.phase === r;
    }));
  }, []);
}
function g0(e) {
  var t;
  return function() {
    return t || (t = new Promise(function(n) {
      Promise.resolve().then(function() {
        t = void 0, n(e());
      });
    })), t;
  };
}
function b0(e) {
  var t = e.reduce(function(n, r) {
    var s = n[r.name];
    return n[r.name] = s ? Object.assign({}, s, r, {
      options: Object.assign({}, s.options, r.options),
      data: Object.assign({}, s.data, r.data)
    }) : r, n;
  }, {});
  return Object.keys(t).map(function(n) {
    return t[n];
  });
}
var Ru = {
  placement: "bottom",
  modifiers: [],
  strategy: "absolute"
};
function ku() {
  for (var e = arguments.length, t = new Array(e), n = 0; n < e; n++)
    t[n] = arguments[n];
  return !t.some(function(r) {
    return !(r && typeof r.getBoundingClientRect == "function");
  });
}
function v0(e) {
  e === void 0 && (e = {});
  var t = e, n = t.defaultModifiers, r = n === void 0 ? [] : n, s = t.defaultOptions, i = s === void 0 ? Ru : s;
  return function(l, c, u) {
    u === void 0 && (u = i);
    var d = {
      placement: "bottom",
      orderedModifiers: [],
      options: Object.assign({}, Ru, i),
      modifiersData: {},
      elements: {
        reference: l,
        popper: c
      },
      attributes: {},
      styles: {}
    }, f = [], y = !1, g = {
      state: d,
      setOptions: function(b) {
        var C = typeof b == "function" ? b(d.options) : b;
        p(), d.options = Object.assign({}, i, d.options, C), d.scrollParents = {
          reference: ur(l) ? wo(l) : l.contextElement ? wo(l.contextElement) : [],
          popper: wo(c)
        };
        var O = y0(b0([].concat(r, d.options.modifiers)));
        return d.orderedModifiers = O.filter(function(w) {
          return w.enabled;
        }), h(), g.update();
      },
      // Sync update – it will always be executed, even if not necessary. This
      // is useful for low frequency updates where sync behavior simplifies the
      // logic.
      // For high frequency updates (e.g. `resize` and `scroll` events), always
      // prefer the async Popper#update method
      forceUpdate: function() {
        if (!y) {
          var b = d.elements, C = b.reference, O = b.popper;
          if (ku(C, O)) {
            d.rects = {
              reference: h0(C, ts(O), d.options.strategy === "fixed"),
              popper: Rl(O)
            }, d.reset = !1, d.placement = d.options.placement, d.orderedModifiers.forEach(function($) {
              return d.modifiersData[$.name] = Object.assign({}, $.data);
            });
            for (var w = 0; w < d.orderedModifiers.length; w++) {
              if (d.reset === !0) {
                d.reset = !1, w = -1;
                continue;
              }
              var S = d.orderedModifiers[w], P = S.fn, M = S.options, F = M === void 0 ? {} : M, A = S.name;
              typeof P == "function" && (d = P({
                state: d,
                options: F,
                name: A,
                instance: g
              }) || d);
            }
          }
        }
      },
      // Async and optimistically optimized update – it will not be executed if
      // not necessary (debounced to run at most once-per-tick)
      update: g0(function() {
        return new Promise(function(m) {
          g.forceUpdate(), m(d);
        });
      }),
      destroy: function() {
        p(), y = !0;
      }
    };
    if (!ku(l, c))
      return g;
    g.setOptions(u).then(function(m) {
      !y && u.onFirstUpdate && u.onFirstUpdate(m);
    });
    function h() {
      d.orderedModifiers.forEach(function(m) {
        var b = m.name, C = m.options, O = C === void 0 ? {} : C, w = m.effect;
        if (typeof w == "function") {
          var S = w({
            state: d,
            name: b,
            instance: g,
            options: O
          }), P = function() {
          };
          f.push(S || P);
        }
      });
    }
    function p() {
      f.forEach(function(m) {
        return m();
      }), f = [];
    }
    return g;
  };
}
var x0 = [zx, a0, Bx, Dx, s0, e0, u0, jx, n0], w0 = /* @__PURE__ */ v0({
  defaultModifiers: x0
});
function Du(e, t) {
  typeof e == "function" ? e(t) : e && (e.current = t);
}
function S0(e) {
  return typeof e == "function" ? e() : e;
}
const Io = /* @__PURE__ */ x.forwardRef(function(t, n) {
  const {
    children: r,
    container: s,
    disablePortal: i = !1
  } = t, [a, l] = x.useState(null), c = Ne(/* @__PURE__ */ x.isValidElement(r) ? Qo(r) : null, n);
  if (dt(() => {
    i || l(S0(s) || document.body);
  }, [s, i]), dt(() => {
    if (a && !i)
      return Du(n, a), () => {
        Du(n, null);
      };
  }, [n, a, i]), i) {
    if (/* @__PURE__ */ x.isValidElement(r)) {
      const u = {
        ref: c
      };
      return /* @__PURE__ */ x.cloneElement(r, u);
    }
    return r;
  }
  return a && /* @__PURE__ */ sy.createPortal(r, a);
});
process.env.NODE_ENV !== "production" && (Io.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The children to render into the `container`.
   */
  children: o.node,
  /**
   * An HTML element or function that returns one.
   * The `container` will have the portal children appended to it.
   *
   * You can also provide a callback, which is called in a React layout effect.
   * This lets you set the container from a ref, and also makes server-side rendering possible.
   *
   * By default, it uses the body of the top-level document object,
   * so it's simply `document.body` most of the time.
   */
  container: o.oneOfType([gn, o.func]),
  /**
   * The `children` will be under the DOM hierarchy of the parent component.
   * @default false
   */
  disablePortal: o.bool
});
process.env.NODE_ENV !== "production" && (Io.propTypes = Pf(Io.propTypes));
function E0(e) {
  return we("MuiPopper", e);
}
xe("MuiPopper", ["root"]);
function O0(e, t) {
  if (t === "ltr")
    return e;
  switch (e) {
    case "bottom-end":
      return "bottom-start";
    case "bottom-start":
      return "bottom-end";
    case "top-end":
      return "top-start";
    case "top-start":
      return "top-end";
    default:
      return e;
  }
}
function qs(e) {
  return typeof e == "function" ? e() : e;
}
function vi(e) {
  return e.nodeType !== void 0;
}
function C0(e) {
  return !vi(e);
}
const P0 = (e) => {
  const {
    classes: t
  } = e;
  return be({
    root: ["root"]
  }, E0, t);
}, T0 = {}, R0 = /* @__PURE__ */ x.forwardRef(function(t, n) {
  const {
    anchorEl: r,
    children: s,
    direction: i,
    disablePortal: a,
    modifiers: l,
    open: c,
    placement: u,
    popperOptions: d,
    popperRef: f,
    slotProps: y = {},
    slots: g = {},
    TransitionProps: h,
    // @ts-ignore internal logic
    ownerState: p,
    // prevent from spreading to DOM, it can come from the parent component e.g. Select.
    ...m
  } = t, b = x.useRef(null), C = Ne(b, n), O = x.useRef(null), w = Ne(O, f), S = x.useRef(w);
  dt(() => {
    S.current = w;
  }, [w]), x.useImperativeHandle(f, () => O.current, []);
  const P = O0(u, i), [M, F] = x.useState(P), [A, $] = x.useState(qs(r));
  x.useEffect(() => {
    O.current && O.current.forceUpdate();
  }), x.useEffect(() => {
    r && $(qs(r));
  }, [r]), dt(() => {
    if (!A || !c)
      return;
    const I = (G) => {
      F(G.placement);
    };
    if (process.env.NODE_ENV !== "production" && A && vi(A) && A.nodeType === 1) {
      const G = A.getBoundingClientRect();
      process.env.NODE_ENV !== "test" && G.top === 0 && G.left === 0 && G.right === 0 && G.bottom === 0 && console.warn(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join(`
`));
    }
    let N = [{
      name: "preventOverflow",
      options: {
        altBoundary: a
      }
    }, {
      name: "flip",
      options: {
        altBoundary: a
      }
    }, {
      name: "onUpdate",
      enabled: !0,
      phase: "afterWrite",
      fn: ({
        state: G
      }) => {
        I(G);
      }
    }];
    l != null && (N = N.concat(l)), d && d.modifiers != null && (N = N.concat(d.modifiers));
    const _ = w0(A, b.current, {
      placement: P,
      ...d,
      modifiers: N
    });
    return S.current(_), () => {
      _.destroy(), S.current(null);
    };
  }, [A, a, l, c, d, P]);
  const k = {
    placement: M
  };
  h !== null && (k.TransitionProps = h);
  const v = P0(t), D = g.root ?? "div", T = Ie({
    elementType: D,
    externalSlotProps: y.root,
    externalForwardedProps: m,
    additionalProps: {
      role: "tooltip",
      ref: C
    },
    ownerState: t,
    className: v.root
  });
  return /* @__PURE__ */ E.jsx(D, {
    ...T,
    children: typeof s == "function" ? s(k) : s
  });
}), hp = /* @__PURE__ */ x.forwardRef(function(t, n) {
  const {
    anchorEl: r,
    children: s,
    container: i,
    direction: a = "ltr",
    disablePortal: l = !1,
    keepMounted: c = !1,
    modifiers: u,
    open: d,
    placement: f = "bottom",
    popperOptions: y = T0,
    popperRef: g,
    style: h,
    transition: p = !1,
    slotProps: m = {},
    slots: b = {},
    ...C
  } = t, [O, w] = x.useState(!0), S = () => {
    w(!1);
  }, P = () => {
    w(!0);
  };
  if (!c && !d && (!p || O))
    return null;
  let M;
  if (i)
    M = i;
  else if (r) {
    const $ = qs(r);
    M = $ && vi($) ? pt($).body : pt(null).body;
  }
  const F = !d && c && (!p || O) ? "none" : void 0, A = p ? {
    in: d,
    onEnter: S,
    onExited: P
  } : void 0;
  return /* @__PURE__ */ E.jsx(Io, {
    disablePortal: l,
    container: M,
    children: /* @__PURE__ */ E.jsx(R0, {
      anchorEl: r,
      direction: a,
      disablePortal: l,
      modifiers: u,
      ref: n,
      open: p ? !O : d,
      placement: f,
      popperOptions: y,
      popperRef: g,
      slotProps: m,
      slots: b,
      ...C,
      style: {
        // Prevents scroll issue, waiting for Popper.js to add this style once initiated.
        position: "fixed",
        // Fix Popper.js display issue
        top: 0,
        left: 0,
        display: F,
        ...h
      },
      TransitionProps: A,
      children: s
    })
  });
});
process.env.NODE_ENV !== "production" && (hp.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * An HTML element, [virtualElement](https://popper.js.org/docs/v2/virtual-elements/),
   * or a function that returns either.
   * It's used to set the position of the popper.
   * The return value will passed as the reference object of the Popper instance.
   */
  anchorEl: wn(o.oneOfType([gn, o.object, o.func]), (e) => {
    if (e.open) {
      const t = qs(e.anchorEl);
      if (t && vi(t) && t.nodeType === 1) {
        const n = t.getBoundingClientRect();
        if (process.env.NODE_ENV !== "test" && n.top === 0 && n.left === 0 && n.right === 0 && n.bottom === 0)
          return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join(`
`));
      } else if (!t || typeof t.getBoundingClientRect != "function" || C0(t) && t.contextElement != null && t.contextElement.nodeType !== 1)
        return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", "It should be an HTML element instance or a virtualElement ", "(https://popper.js.org/docs/v2/virtual-elements/)."].join(`
`));
    }
    return null;
  }),
  /**
   * Popper render function or node.
   */
  children: o.oneOfType([o.node, o.func]),
  /**
   * An HTML element or function that returns one.
   * The `container` will have the portal children appended to it.
   *
   * You can also provide a callback, which is called in a React layout effect.
   * This lets you set the container from a ref, and also makes server-side rendering possible.
   *
   * By default, it uses the body of the top-level document object,
   * so it's simply `document.body` most of the time.
   */
  container: o.oneOfType([gn, o.func]),
  /**
   * Direction of the text.
   * @default 'ltr'
   */
  direction: o.oneOf(["ltr", "rtl"]),
  /**
   * The `children` will be under the DOM hierarchy of the parent component.
   * @default false
   */
  disablePortal: o.bool,
  /**
   * Always keep the children in the DOM.
   * This prop can be useful in SEO situation or
   * when you want to maximize the responsiveness of the Popper.
   * @default false
   */
  keepMounted: o.bool,
  /**
   * Popper.js is based on a "plugin-like" architecture,
   * most of its features are fully encapsulated "modifiers".
   *
   * A modifier is a function that is called each time Popper.js needs to
   * compute the position of the popper.
   * For this reason, modifiers should be very performant to avoid bottlenecks.
   * To learn how to create a modifier, [read the modifiers documentation](https://popper.js.org/docs/v2/modifiers/).
   */
  modifiers: o.arrayOf(o.shape({
    data: o.object,
    effect: o.func,
    enabled: o.bool,
    fn: o.func,
    name: o.any,
    options: o.object,
    phase: o.oneOf(["afterMain", "afterRead", "afterWrite", "beforeMain", "beforeRead", "beforeWrite", "main", "read", "write"]),
    requires: o.arrayOf(o.string),
    requiresIfExists: o.arrayOf(o.string)
  })),
  /**
   * If `true`, the component is shown.
   */
  open: o.bool.isRequired,
  /**
   * Popper placement.
   * @default 'bottom'
   */
  placement: o.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
  /**
   * Options provided to the [`Popper.js`](https://popper.js.org/docs/v2/constructors/#options) instance.
   * @default {}
   */
  popperOptions: o.shape({
    modifiers: o.array,
    onFirstUpdate: o.func,
    placement: o.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
    strategy: o.oneOf(["absolute", "fixed"])
  }),
  /**
   * A ref that points to the used popper instance.
   */
  popperRef: lt,
  /**
   * The props used for each slot inside the Popper.
   * @default {}
   */
  slotProps: o.shape({
    root: o.oneOfType([o.func, o.object])
  }),
  /**
   * The components used for each slot inside the Popper.
   * Either a string to use a HTML element or a component.
   * @default {}
   */
  slots: o.shape({
    root: o.elementType
  }),
  /**
   * Help supporting a react-transition-group/Transition component.
   * @default false
   */
  transition: o.bool
});
const k0 = Q(hp, {
  name: "MuiPopper",
  slot: "Root"
})({}), mp = /* @__PURE__ */ x.forwardRef(function(t, n) {
  const r = Ut(), s = Ae({
    props: t,
    name: "MuiPopper"
  }), {
    anchorEl: i,
    component: a,
    components: l,
    componentsProps: c,
    container: u,
    disablePortal: d,
    keepMounted: f,
    modifiers: y,
    open: g,
    placement: h,
    popperOptions: p,
    popperRef: m,
    transition: b,
    slots: C,
    slotProps: O,
    ...w
  } = s, S = C?.root ?? l?.Root, P = {
    anchorEl: i,
    container: u,
    disablePortal: d,
    keepMounted: f,
    modifiers: y,
    open: g,
    placement: h,
    popperOptions: p,
    popperRef: m,
    transition: b,
    ...w
  };
  return /* @__PURE__ */ E.jsx(k0, {
    as: a,
    direction: r ? "rtl" : "ltr",
    slots: {
      root: S
    },
    slotProps: O ?? c,
    ...P,
    ref: n
  });
});
process.env.NODE_ENV !== "production" && (mp.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * An HTML element, [virtualElement](https://popper.js.org/docs/v2/virtual-elements/),
   * or a function that returns either.
   * It's used to set the position of the popper.
   * The return value will passed as the reference object of the Popper instance.
   */
  anchorEl: o.oneOfType([gn, o.object, o.func]),
  /**
   * Popper render function or node.
   */
  children: o.oneOfType([o.node, o.func]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: o.elementType,
  /**
   * The components used for each slot inside the Popper.
   * Either a string to use a HTML element or a component.
   *
   * @deprecated use the `slots` prop instead. This prop will be removed in a future major release. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/).
   * @default {}
   */
  components: o.shape({
    Root: o.elementType
  }),
  /**
   * The props used for each slot inside the Popper.
   *
   * @deprecated use the `slotProps` prop instead. This prop will be removed in a future major release. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/).
   * @default {}
   */
  componentsProps: o.shape({
    root: o.oneOfType([o.func, o.object])
  }),
  /**
   * An HTML element or function that returns one.
   * The `container` will have the portal children appended to it.
   *
   * You can also provide a callback, which is called in a React layout effect.
   * This lets you set the container from a ref, and also makes server-side rendering possible.
   *
   * By default, it uses the body of the top-level document object,
   * so it's simply `document.body` most of the time.
   */
  container: o.oneOfType([gn, o.func]),
  /**
   * The `children` will be under the DOM hierarchy of the parent component.
   * @default false
   */
  disablePortal: o.bool,
  /**
   * Always keep the children in the DOM.
   * This prop can be useful in SEO situation or
   * when you want to maximize the responsiveness of the Popper.
   * @default false
   */
  keepMounted: o.bool,
  /**
   * Popper.js is based on a "plugin-like" architecture,
   * most of its features are fully encapsulated "modifiers".
   *
   * A modifier is a function that is called each time Popper.js needs to
   * compute the position of the popper.
   * For this reason, modifiers should be very performant to avoid bottlenecks.
   * To learn how to create a modifier, [read the modifiers documentation](https://popper.js.org/docs/v2/modifiers/).
   */
  modifiers: o.arrayOf(o.shape({
    data: o.object,
    effect: o.func,
    enabled: o.bool,
    fn: o.func,
    name: o.any,
    options: o.object,
    phase: o.oneOf(["afterMain", "afterRead", "afterWrite", "beforeMain", "beforeRead", "beforeWrite", "main", "read", "write"]),
    requires: o.arrayOf(o.string),
    requiresIfExists: o.arrayOf(o.string)
  })),
  /**
   * If `true`, the component is shown.
   */
  open: o.bool.isRequired,
  /**
   * Popper placement.
   * @default 'bottom'
   */
  placement: o.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
  /**
   * Options provided to the [`Popper.js`](https://popper.js.org/docs/v2/constructors/#options) instance.
   * @default {}
   */
  popperOptions: o.shape({
    modifiers: o.array,
    onFirstUpdate: o.func,
    placement: o.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
    strategy: o.oneOf(["absolute", "fixed"])
  }),
  /**
   * A ref that points to the used popper instance.
   */
  popperRef: lt,
  /**
   * The props used for each slot inside the Popper.
   * @default {}
   */
  slotProps: o.shape({
    root: o.oneOfType([o.func, o.object])
  }),
  /**
   * The components used for each slot inside the Popper.
   * Either a string to use a HTML element or a component.
   * @default {}
   */
  slots: o.shape({
    root: o.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: o.oneOfType([o.arrayOf(o.oneOfType([o.func, o.object, o.bool])), o.func, o.object]),
  /**
   * Help supporting a react-transition-group/Transition component.
   * @default false
   */
  transition: o.bool
});
const D0 = ["input", "select", "textarea", "a[href]", "button", "[tabindex]", "audio[controls]", "video[controls]", '[contenteditable]:not([contenteditable="false"])'].join(",");
function M0(e) {
  const t = parseInt(e.getAttribute("tabindex") || "", 10);
  return Number.isNaN(t) ? e.contentEditable === "true" || (e.nodeName === "AUDIO" || e.nodeName === "VIDEO" || e.nodeName === "DETAILS") && e.getAttribute("tabindex") === null ? 0 : e.tabIndex : t;
}
function I0(e) {
  if (e.tagName !== "INPUT" || e.type !== "radio" || !e.name)
    return !1;
  const t = (r) => e.ownerDocument.querySelector(`input[type="radio"]${r}`);
  let n = t(`[name="${e.name}"]:checked`);
  return n || (n = t(`[name="${e.name}"]`)), n !== e;
}
function N0(e) {
  return !(e.disabled || e.tagName === "INPUT" && e.type === "hidden" || I0(e));
}
function A0(e) {
  const t = [], n = [];
  return Array.from(e.querySelectorAll(D0)).forEach((r, s) => {
    const i = M0(r);
    i === -1 || !N0(r) || (i === 0 ? t.push(r) : n.push({
      documentOrder: s,
      tabIndex: i,
      node: r
    }));
  }), n.sort((r, s) => r.tabIndex === s.tabIndex ? r.documentOrder - s.documentOrder : r.tabIndex - s.tabIndex).map((r) => r.node).concat(t);
}
function F0() {
  return !0;
}
function No(e) {
  const {
    children: t,
    disableAutoFocus: n = !1,
    disableEnforceFocus: r = !1,
    disableRestoreFocus: s = !1,
    getTabbable: i = A0,
    isEnabled: a = F0,
    open: l
  } = e, c = x.useRef(!1), u = x.useRef(null), d = x.useRef(null), f = x.useRef(null), y = x.useRef(null), g = x.useRef(!1), h = x.useRef(null), p = Ne(Qo(t), h), m = x.useRef(null);
  x.useEffect(() => {
    !l || !h.current || (g.current = !n);
  }, [n, l]), x.useEffect(() => {
    if (!l || !h.current)
      return;
    const O = pt(h.current);
    return h.current.contains(O.activeElement) || (h.current.hasAttribute("tabIndex") || (process.env.NODE_ENV !== "production" && console.error(["MUI: The modal content node does not accept focus.", 'For the benefit of assistive technologies, the tabIndex of the node is being set to "-1".'].join(`
`)), h.current.setAttribute("tabIndex", "-1")), g.current && h.current.focus()), () => {
      s || (f.current && f.current.focus && (c.current = !0, f.current.focus()), f.current = null);
    };
  }, [l]), x.useEffect(() => {
    if (!l || !h.current)
      return;
    const O = pt(h.current), w = (M) => {
      m.current = M, !(r || !a() || M.key !== "Tab") && O.activeElement === h.current && M.shiftKey && (c.current = !0, d.current && d.current.focus());
    }, S = () => {
      const M = h.current;
      if (M === null)
        return;
      if (!O.hasFocus() || !a() || c.current) {
        c.current = !1;
        return;
      }
      if (M.contains(O.activeElement) || r && O.activeElement !== u.current && O.activeElement !== d.current)
        return;
      if (O.activeElement !== y.current)
        y.current = null;
      else if (y.current !== null)
        return;
      if (!g.current)
        return;
      let F = [];
      if ((O.activeElement === u.current || O.activeElement === d.current) && (F = i(h.current)), F.length > 0) {
        const A = !!(m.current?.shiftKey && m.current?.key === "Tab"), $ = F[0], k = F[F.length - 1];
        typeof $ != "string" && typeof k != "string" && (A ? k.focus() : $.focus());
      } else
        M.focus();
    };
    O.addEventListener("focusin", S), O.addEventListener("keydown", w, !0);
    const P = setInterval(() => {
      O.activeElement && O.activeElement.tagName === "BODY" && S();
    }, 50);
    return () => {
      clearInterval(P), O.removeEventListener("focusin", S), O.removeEventListener("keydown", w, !0);
    };
  }, [n, r, s, a, l, i]);
  const b = (O) => {
    f.current === null && (f.current = O.relatedTarget), g.current = !0, y.current = O.target;
    const w = t.props.onFocus;
    w && w(O);
  }, C = (O) => {
    f.current === null && (f.current = O.relatedTarget), g.current = !0;
  };
  return /* @__PURE__ */ E.jsxs(x.Fragment, {
    children: [/* @__PURE__ */ E.jsx("div", {
      tabIndex: l ? 0 : -1,
      onFocus: C,
      ref: u,
      "data-testid": "sentinelStart"
    }), /* @__PURE__ */ x.cloneElement(t, {
      ref: p,
      onFocus: b
    }), /* @__PURE__ */ E.jsx("div", {
      tabIndex: l ? 0 : -1,
      onFocus: C,
      ref: d,
      "data-testid": "sentinelEnd"
    })]
  });
}
process.env.NODE_ENV !== "production" && (No.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * A single child content element.
   */
  children: Xo,
  /**
   * If `true`, the focus trap will not automatically shift focus to itself when it opens, and
   * replace it to the last focused element when it closes.
   * This also works correctly with any focus trap children that have the `disableAutoFocus` prop.
   *
   * Generally this should never be set to `true` as it makes the focus trap less
   * accessible to assistive technologies, like screen readers.
   * @default false
   */
  disableAutoFocus: o.bool,
  /**
   * If `true`, the focus trap will not prevent focus from leaving the focus trap while open.
   *
   * Generally this should never be set to `true` as it makes the focus trap less
   * accessible to assistive technologies, like screen readers.
   * @default false
   */
  disableEnforceFocus: o.bool,
  /**
   * If `true`, the focus trap will not restore focus to previously focused element once
   * focus trap is hidden or unmounted.
   * @default false
   */
  disableRestoreFocus: o.bool,
  /**
   * Returns an array of ordered tabbable nodes (i.e. in tab order) within the root.
   * For instance, you can provide the "tabbable" npm dependency.
   * @param {HTMLElement} root
   */
  getTabbable: o.func,
  /**
   * This prop extends the `open` prop.
   * It allows to toggle the open state without having to wait for a rerender when changing the `open` prop.
   * This prop should be memoized.
   * It can be used to support multiple focus trap mounted at the same time.
   * @default function defaultIsEnabled(): boolean {
   *   return true;
   * }
   */
  isEnabled: o.func,
  /**
   * If `true`, focus is locked.
   */
  open: o.bool.isRequired
});
process.env.NODE_ENV !== "production" && (No.propTypes = Pf(No.propTypes));
function $0(e) {
  return we("MuiPickerPopper", e);
}
xe("MuiPickerPopper", ["root", "paper"]);
function j0(e, t) {
  return Array.isArray(t) ? t.every((n) => e.indexOf(n) !== -1) : e.indexOf(t) !== -1;
}
const _0 = (e) => {
  setTimeout(e, 0);
}, yp = (e = document) => {
  const t = e.activeElement;
  return t ? t.shadowRoot ? yp(t.shadowRoot) : t : null;
}, Et = (e) => yp(pt(e)), V0 = "@media (pointer: fine)", L0 = ["PaperComponent", "ownerState", "children", "paperSlotProps", "paperClasses", "onPaperClick", "onPaperTouchStart"], B0 = (e) => be({
  root: ["root"],
  paper: ["paper"]
}, $0, e), W0 = Q(mp, {
  name: "MuiPickerPopper",
  slot: "Root"
})(({
  theme: e
}) => ({
  zIndex: e.zIndex.modal
})), z0 = Q(Jo, {
  name: "MuiPickerPopper",
  slot: "Paper"
})({
  outline: 0,
  transformOrigin: "top center",
  variants: [{
    props: ({
      popperPlacement: e
    }) => (/* @__PURE__ */ new Set(["top", "top-start", "top-end"])).has(e),
    style: {
      transformOrigin: "bottom center"
    }
  }]
});
function U0(e, t) {
  return t.documentElement.clientWidth < e.clientX || t.documentElement.clientHeight < e.clientY;
}
function q0(e, t) {
  const n = x.useRef(!1), r = x.useRef(!1), s = x.useRef(null), i = x.useRef(!1);
  x.useEffect(() => {
    if (!e)
      return;
    function c() {
      i.current = !0;
    }
    return document.addEventListener("mousedown", c, !0), document.addEventListener("touchstart", c, !0), () => {
      document.removeEventListener("mousedown", c, !0), document.removeEventListener("touchstart", c, !0), i.current = !1;
    };
  }, [e]);
  const a = de((c) => {
    if (!i.current)
      return;
    const u = r.current;
    r.current = !1;
    const d = pt(s.current);
    if (!s.current || // is a TouchEvent?
    "clientX" in c && U0(c, d))
      return;
    if (n.current) {
      n.current = !1;
      return;
    }
    let f;
    c.composedPath ? f = c.composedPath().indexOf(s.current) > -1 : f = !d.documentElement.contains(c.target) || s.current.contains(c.target), !f && !u && t(c);
  }), l = (c) => {
    c.defaultMuiPrevented || (r.current = !0);
  };
  return x.useEffect(() => {
    if (e) {
      const c = pt(s.current), u = () => {
        n.current = !0;
      };
      return c.addEventListener("touchstart", a), c.addEventListener("touchmove", u), () => {
        c.removeEventListener("touchstart", a), c.removeEventListener("touchmove", u);
      };
    }
  }, [e, a]), x.useEffect(() => {
    if (e) {
      const c = pt(s.current);
      return c.addEventListener("click", a), () => {
        c.removeEventListener("click", a), r.current = !1;
      };
    }
  }, [e, a]), [s, l, l];
}
const gp = /* @__PURE__ */ x.forwardRef((e, t) => {
  const {
    PaperComponent: n,
    ownerState: r,
    children: s,
    paperSlotProps: i,
    paperClasses: a,
    onPaperClick: l,
    onPaperTouchStart: c
    // picks up the style props provided by `Transition`
    // https://mui.com/material-ui/transitions/#child-requirement
  } = e, u = Ee(e, L0), d = Ie({
    elementType: n,
    externalSlotProps: i,
    additionalProps: {
      tabIndex: -1,
      elevation: 8,
      ref: t
    },
    className: a,
    ownerState: r
  });
  return /* @__PURE__ */ E.jsx(n, j({}, u, d, {
    onClick: (f) => {
      l(f), d.onClick?.(f);
    },
    onTouchStart: (f) => {
      c(f), d.onTouchStart?.(f);
    },
    ownerState: r,
    children: s
  }));
});
process.env.NODE_ENV !== "production" && (gp.displayName = "PickerPopperPaperWrapper");
function H0(e) {
  const t = Ze({
    props: e,
    name: "MuiPickerPopper"
  }), {
    children: n,
    placement: r = "bottom-start",
    slots: s,
    slotProps: i,
    classes: a
  } = t, {
    open: l,
    popupRef: c,
    reduceAnimations: u
  } = Ur(), {
    ownerState: d,
    rootRefObject: f
  } = gt(), {
    dismissViews: y,
    getCurrentViewMode: g,
    onPopperExited: h,
    triggerElement: p,
    viewContainerRole: m
  } = gt();
  x.useEffect(() => {
    function _(G) {
      l && G.key === "Escape" && y();
    }
    return document.addEventListener("keydown", _), () => {
      document.removeEventListener("keydown", _);
    };
  }, [y, l]);
  const b = x.useRef(null);
  x.useEffect(() => {
    m === "tooltip" || g() === "field" || (l ? b.current = Et(f.current) : b.current && b.current instanceof HTMLElement && setTimeout(() => {
      b.current instanceof HTMLElement && b.current.focus();
    }));
  }, [l, m, g, f]);
  const C = B0(a), O = de(() => {
    m === "tooltip" ? _0(() => {
      f.current?.contains(Et(f.current)) || c.current?.contains(Et(c.current)) || y();
    }) : y();
  }), [w, S, P] = q0(l, O), M = x.useRef(null), F = Ne(M, c), A = Ne(F, w), $ = (_) => {
    _.key === "Escape" && (_.stopPropagation(), y());
  }, k = s?.desktopTransition ?? u ? An : ko, v = s?.desktopTrapFocus ?? No, D = s?.desktopPaper ?? z0, T = s?.popper ?? W0, I = Ie({
    elementType: T,
    externalSlotProps: i?.popper,
    additionalProps: {
      transition: !0,
      role: m ?? void 0,
      open: l,
      placement: r,
      anchorEl: p,
      onKeyDown: $
    },
    className: C.root,
    ownerState: d
  }), N = x.useMemo(() => j({}, d, {
    popperPlacement: I.placement
  }), [d, I.placement]);
  return /* @__PURE__ */ E.jsx(T, j({}, I, {
    children: ({
      TransitionProps: _
    }) => /* @__PURE__ */ E.jsx(v, j({
      open: l,
      disableAutoFocus: !0,
      disableRestoreFocus: !0,
      disableEnforceFocus: m === "tooltip",
      isEnabled: () => !0
    }, i?.desktopTrapFocus, {
      children: /* @__PURE__ */ E.jsx(k, j({}, _, i?.desktopTransition, {
        onExited: (G) => {
          h?.(), i?.desktopTransition?.onExited?.(G), _?.onExited?.();
        },
        children: /* @__PURE__ */ E.jsx(gp, {
          PaperComponent: D,
          ownerState: N,
          ref: A,
          onPaperClick: S,
          onPaperTouchStart: P,
          paperClasses: C.paper,
          paperSlotProps: i?.desktopPaper,
          children: n
        })
      }))
    }))
  }));
}
const Y0 = "@media (prefers-reduced-motion: reduce)", kr = typeof navigator < "u" && navigator.userAgent.match(/android\s(\d+)|OS\s(\d+)/i), Mu = kr && kr[1] ? parseInt(kr[1], 10) : null, Iu = kr && kr[2] ? parseInt(kr[2], 10) : null, K0 = Mu && Mu < 10 || Iu && Iu < 13 || !1;
function bp(e) {
  const t = vf(Y0, {
    defaultMatches: !1
  });
  return e ?? (t || K0);
}
function Fn(e) {
  const {
    controlled: t,
    default: n,
    name: r,
    state: s = "value"
  } = e, {
    current: i
  } = x.useRef(t !== void 0), [a, l] = x.useState(n), c = i ? t : a;
  if (process.env.NODE_ENV !== "production") {
    x.useEffect(() => {
      i !== (t !== void 0) && console.error([`MUI: A component is changing the ${i ? "" : "un"}controlled ${s} state of ${r} to be ${i ? "un" : ""}controlled.`, "Elements should not switch from uncontrolled to controlled (or vice versa).", `Decide between using a controlled or uncontrolled ${r} element for the lifetime of the component.`, "The nature of the state is determined during the first render. It's considered controlled if the value is not `undefined`.", "More info: https://fb.me/react-controlled-components"].join(`
`));
    }, [s, r, t]);
    const {
      current: d
    } = x.useRef(n);
    x.useEffect(() => {
      !i && JSON.stringify(n) !== JSON.stringify(d) && console.error([`MUI: A component is changing the default ${s} state of an uncontrolled ${r} after being initialized. To suppress this warning opt to use a controlled ${r}.`].join(`
`));
    }, [JSON.stringify(n)]);
  }
  const u = x.useCallback((d) => {
    i || l(d);
  }, []);
  return [c, u];
}
const vp = {
  hasNextStep: !1,
  hasSeveralSteps: !1,
  goToNextStep: () => {
  },
  areViewsInSameStep: () => !0
};
function G0(e) {
  const {
    steps: t,
    isViewMatchingStep: n,
    onStepChange: r
  } = e;
  return (s) => {
    if (t == null)
      return vp;
    const i = t.findIndex((l) => n(s.view, l)), a = i === -1 || i === t.length - 1 ? null : t[i + 1];
    return {
      hasNextStep: a != null,
      hasSeveralSteps: t.length > 1,
      goToNextStep: () => {
        a != null && r(j({}, s, {
          step: a
        }));
      },
      areViewsInSameStep: (l, c) => {
        const u = t.find((f) => n(l, f)), d = t.find((f) => n(c, f));
        return u === d;
      }
    };
  };
}
let ra = !1;
function xp({
  onChange: e,
  onViewChange: t,
  openTo: n,
  view: r,
  views: s,
  autoFocus: i,
  focusedView: a,
  onFocusedViewChange: l,
  getStepNavigation: c
}) {
  process.env.NODE_ENV !== "production" && (ra || (r != null && !s.includes(r) && (console.warn(`MUI X: \`view="${r}"\` is not a valid prop.`, `It must be an element of \`views=["${s.join('", "')}"]\`.`), ra = !0), r == null && n != null && !s.includes(n) && (console.warn(`MUI X: \`openTo="${n}"\` is not a valid prop.`, `It must be an element of \`views=["${s.join('", "')}"]\`.`), ra = !0)));
  const u = x.useRef(n), d = x.useRef(s), f = x.useRef(s.includes(n) ? n : s[0]), [y, g] = Fn({
    name: "useViews",
    state: "view",
    controlled: r,
    default: f.current
  }), h = x.useRef(i ? y : null), [p, m] = Fn({
    name: "useViews",
    state: "focusedView",
    controlled: a,
    default: h.current
  }), b = c ? c({
    setView: g,
    view: y,
    defaultView: f.current,
    views: s
  }) : vp;
  x.useEffect(() => {
    (u.current && u.current !== n || d.current && d.current.some((A) => !s.includes(A))) && (g(s.includes(n) ? n : s[0]), d.current = s, u.current = n);
  }, [n, g, y, s]);
  const C = s.indexOf(y), O = s[C - 1] ?? null, w = s[C + 1] ?? null, S = de((A, $) => {
    m($ ? A : (k) => A === k ? null : k), l?.(A, $);
  }), P = de((A) => {
    S(A, !0), A !== y && (g(A), t && t(A));
  }), M = de(() => {
    w && P(w);
  }), F = de((A, $, k) => {
    const v = $ === "finish", D = k ? (
      // handles case like `DateTimePicker`, where a view might return a `finish` selection state
      // but when it's not the final view given all `views` -> overall selection state should be `partial`.
      s.indexOf(k) < s.length - 1
    ) : !!w;
    e(A, v && D ? "partial" : $, k);
    let I = null;
    if (k != null && k !== y ? I = k : v && (I = y), I == null)
      return;
    const N = s[s.indexOf(I) + 1];
    N == null || !b.areViewsInSameStep(I, N) || P(N);
  });
  return j({}, b, {
    view: y,
    setView: P,
    focusedView: p,
    setFocusedView: S,
    nextView: w,
    previousView: O,
    // Always return up-to-date default view instead of the initial one (i.e. defaultView.current)
    defaultView: s.includes(n) ? n : s[0],
    goToNextView: M,
    setValueAndGoToNextView: F
  });
}
function Nu() {
  return typeof window > "u" ? "portrait" : window.screen && window.screen.orientation && window.screen.orientation.angle ? Math.abs(window.screen.orientation.angle) === 90 ? "landscape" : "portrait" : window.orientation && Math.abs(Number(window.orientation)) === 90 ? "landscape" : "portrait";
}
function X0(e, t) {
  const [n, r] = x.useState(Nu);
  return dt(() => {
    const s = () => {
      r(Nu());
    };
    return window.addEventListener("orientationchange", s), () => {
      window.removeEventListener("orientationchange", s);
    };
  }, []), j0(e, ["hours", "minutes", "seconds"]) ? "portrait" : t ?? n;
}
const Au = /* @__PURE__ */ new Set();
function Q0(e, t = "warning") {
  if (process.env.NODE_ENV === "production")
    return;
  const n = Array.isArray(e) ? e.join(`
`) : e;
  Au.has(n) || (Au.add(n), t === "error" ? console.error(n) : console.warn(n));
}
const ns = ({
  name: e,
  timezone: t,
  value: n,
  defaultValue: r,
  referenceDate: s,
  onChange: i,
  valueManager: a
}) => {
  const l = He(), [c, u] = Fn({
    name: e,
    state: "value",
    controlled: n,
    default: r ?? a.emptyValue
  }), d = x.useMemo(() => a.getTimezone(l, c), [l, a, c]), f = de((p) => d == null ? p : a.setTimezone(l, d, p)), y = x.useMemo(() => t || d || (s ? l.getTimezone(Array.isArray(s) ? s[0] : s) : "default"), [t, d, s, l]), g = x.useMemo(() => a.setTimezone(l, y, c), [a, l, y, c]), h = de((p, ...m) => {
    const b = f(p);
    u(b), i?.(b, ...m);
  });
  return {
    value: g,
    handleValueChange: h,
    timezone: y
  };
};
function Z0(e) {
  const {
    props: t,
    valueManager: n,
    validator: r
  } = e, {
    value: s,
    defaultValue: i,
    onChange: a,
    referenceDate: l,
    timezone: c,
    onAccept: u,
    closeOnSelect: d,
    open: f,
    onOpen: y,
    onClose: g
  } = t, {
    current: h
  } = x.useRef(i), {
    current: p
  } = x.useRef(s !== void 0), {
    current: m
  } = x.useRef(f !== void 0), b = He();
  process.env.NODE_ENV !== "production" && t.renderInput != null && Q0(["MUI X: The `renderInput` prop has been removed in version 6.0 of the Date and Time Pickers.", "You can replace it with the `textField` component slot in most cases.", "For more information, please have a look at the migration guide (https://mui.com/x/migration/migration-pickers-v5/#input-renderer-required-in-v5)."]), process.env.NODE_ENV !== "production" && (x.useEffect(() => {
    p !== (s !== void 0) && console.error([`MUI X: A component is changing the ${p ? "" : "un"}controlled value of a Picker to be ${p ? "un" : ""}controlled.`, "Elements should not switch from uncontrolled to controlled (or vice versa).", "Decide between using a controlled or uncontrolled valuefor the lifetime of the component.", "The nature of the state is determined during the first render. It's considered controlled if the value is not `undefined`.", "More info: https://fb.me/react-controlled-components"].join(`
`));
  }, [s]), x.useEffect(() => {
    !p && h !== i && console.error(["MUI X: A component is changing the defaultValue of an uncontrolled Picker after being initialized. To suppress this warning opt to use a controlled value."].join(`
`));
  }, [JSON.stringify(h)]));
  const {
    timezone: C,
    value: O,
    handleValueChange: w
  } = ns({
    name: "a picker component",
    timezone: c,
    value: s,
    defaultValue: h,
    referenceDate: l,
    onChange: a,
    valueManager: n
  }), [S, P] = x.useState(() => ({
    open: !1,
    lastExternalValue: O,
    clockShallowValue: void 0,
    lastCommittedValue: O,
    hasBeenModifiedSinceMount: !1
  })), {
    getValidationErrorForNewValue: M
  } = Yf({
    props: t,
    validator: r,
    timezone: C,
    value: O,
    onError: t.onError
  }), F = de((v) => {
    const D = typeof v == "function" ? v(S.open) : v;
    m || P((T) => j({}, T, {
      open: D
    })), D && y && y(), D || g?.();
  }), A = de((v, D) => {
    const {
      changeImportance: T = "accept",
      skipPublicationIfPristine: I = !1,
      validationError: N,
      shortcut: _,
      shouldClose: G = T === "accept"
    } = D ?? {};
    let L, V;
    !I && !p && !S.hasBeenModifiedSinceMount ? (L = !0, V = T === "accept") : (L = !n.areValuesEqual(b, v, O), V = T === "accept" && !n.areValuesEqual(b, v, S.lastCommittedValue)), P((H) => j({}, H, {
      // We reset the shallow value whenever we fire onChange.
      clockShallowValue: L ? void 0 : H.clockShallowValue,
      lastCommittedValue: V ? v : H.lastCommittedValue,
      hasBeenModifiedSinceMount: !0
    }));
    let R = null;
    const B = () => (R || (R = {
      validationError: N ?? M(v)
    }, _ && (R.shortcut = _)), R);
    L && w(v, B()), V && u && u(v, B()), G && F(!1);
  });
  O !== S.lastExternalValue && P((v) => j({}, v, {
    lastExternalValue: O,
    clockShallowValue: void 0,
    hasBeenModifiedSinceMount: !0
  }));
  const $ = de((v, D = "partial") => {
    if (D === "shallow") {
      P((T) => j({}, T, {
        clockShallowValue: v,
        hasBeenModifiedSinceMount: !0
      }));
      return;
    }
    A(v, {
      changeImportance: D === "finish" && d ? "accept" : "set"
    });
  });
  x.useEffect(() => {
    if (m) {
      if (f === void 0)
        throw new Error("You must not mix controlling and uncontrolled mode for `open` prop");
      P((v) => j({}, v, {
        open: f
      }));
    }
  }, [m, f]);
  const k = x.useMemo(() => n.cleanValue(b, S.clockShallowValue === void 0 ? O : S.clockShallowValue), [b, n, S.clockShallowValue, O]);
  return {
    timezone: C,
    state: S,
    setValue: A,
    setValueFromView: $,
    setOpen: F,
    value: O,
    viewValue: k
  };
}
const J0 = ["className", "sx"], wp = ({
  ref: e,
  props: t,
  valueManager: n,
  valueType: r,
  variant: s,
  validator: i,
  onPopperExited: a,
  autoFocusView: l,
  rendererInterceptor: c,
  localeText: u,
  viewContainerRole: d,
  getStepNavigation: f
}) => {
  const {
    // View props
    views: y,
    view: g,
    openTo: h,
    onViewChange: p,
    viewRenderers: m,
    reduceAnimations: b,
    orientation: C,
    disableOpenPicker: O,
    closeOnSelect: w,
    // Form props
    disabled: S,
    readOnly: P,
    // Field props
    formatDensity: M,
    enableAccessibleFieldDOMStructure: F,
    selectedSections: A,
    onSelectedSectionsChange: $,
    format: k,
    label: v,
    // Other props
    autoFocus: D,
    name: T
  } = t, {
    className: I,
    sx: N
  } = t, _ = Ee(t, J0), G = _n(), L = He(), V = bp(b), R = X0(y, C), {
    current: B
  } = x.useRef(h ?? null), [H, K] = x.useState(null), te = x.useRef(null), ee = x.useRef(null), J = x.useRef(null), ie = Ne(e, J), {
    timezone: re,
    state: q,
    setOpen: X,
    setValue: z,
    setValueFromView: ne,
    value: Y,
    viewValue: ae
  } = Z0({
    props: t,
    valueManager: n,
    validator: i
  }), {
    view: W,
    setView: oe,
    defaultView: ye,
    focusedView: ge,
    setFocusedView: se,
    setValueAndGoToNextView: ce,
    goToNextStep: ue,
    hasNextStep: ke,
    hasSeveralSteps: Te
  } = xp({
    view: g,
    views: y,
    openTo: h,
    onChange: ne,
    onViewChange: p,
    autoFocus: l,
    getStepNavigation: f
  }), Me = de(() => z(n.emptyValue)), _e = de(() => z(n.getTodayValue(L, re, r))), ft = de(() => z(Y)), ht = de(() => z(q.lastCommittedValue, {
    skipPublicationIfPristine: !0
  })), Se = de(() => {
    z(Y, {
      skipPublicationIfPristine: !0
    });
  }), {
    hasUIView: Oe,
    viewModeLookup: me,
    timeViewsCount: Ve
  } = x.useMemo(() => y.reduce((mt, En) => {
    const gc = m[En] == null ? "field" : "UI";
    return mt.viewModeLookup[En] = gc, gc === "UI" && (mt.hasUIView = !0, Qb(En) && (mt.timeViewsCount += 1)), mt;
  }, {
    hasUIView: !1,
    viewModeLookup: {},
    timeViewsCount: 0
  }), [m, y]), Ye = me[W], ct = de(() => Ye), [Je, he] = x.useState(Ye === "UI" ? W : null);
  Je !== W && me[W] === "UI" && he(W), dt(() => {
    Ye === "field" && q.open && (X(!1), setTimeout(() => {
      ee?.current?.setSelectedSections(W), ee?.current?.focusField(W);
    }));
  }, [W]), dt(() => {
    if (!q.open)
      return;
    let mt = W;
    Ye === "field" && Je != null && (mt = Je), mt !== ye && me[mt] === "UI" && me[ye] === "UI" && (mt = ye), mt !== W && oe(mt), se(mt, !0);
  }, [q.open]);
  const fe = x.useMemo(() => ({
    isPickerValueEmpty: n.areValuesEqual(L, Y, n.emptyValue),
    isPickerOpen: q.open,
    isPickerDisabled: t.disabled ?? !1,
    isPickerReadOnly: t.readOnly ?? !1,
    pickerOrientation: R,
    pickerVariant: s
  }), [L, n, Y, q.open, R, s, t.disabled, t.readOnly]), Re = x.useMemo(() => O || !Oe ? "hidden" : S || P ? "disabled" : "enabled", [O, Oe, S, P]), et = de(ue), Ot = x.useMemo(() => w && !Te ? [] : ["cancel", "nextOrAccept"], [w, Te]), Kr = x.useMemo(() => ({
    setValue: z,
    setOpen: X,
    clearValue: Me,
    setValueToToday: _e,
    acceptValueChanges: ft,
    cancelValueChanges: ht,
    setView: oe,
    goToNextStep: et
  }), [z, X, Me, _e, ft, ht, oe, et]), Yt = x.useMemo(() => j({}, Kr, {
    value: Y,
    timezone: re,
    open: q.open,
    views: y,
    view: Je,
    initialView: B,
    disabled: S ?? !1,
    readOnly: P ?? !1,
    autoFocus: D ?? !1,
    variant: s,
    orientation: R,
    popupRef: te,
    reduceAnimations: V,
    triggerRef: K,
    triggerStatus: Re,
    hasNextStep: ke,
    fieldFormat: k ?? "",
    name: T,
    label: v,
    rootSx: N,
    rootRef: ie,
    rootClassName: I
  }), [Kr, Y, ie, s, R, V, S, P, k, I, T, v, N, Re, ke, re, q.open, Je, y, B, D]), km = x.useMemo(() => ({
    dismissViews: Se,
    ownerState: fe,
    hasUIView: Oe,
    getCurrentViewMode: ct,
    rootRefObject: J,
    labelId: G,
    triggerElement: H,
    viewContainerRole: d,
    defaultActionBarActions: Ot,
    onPopperExited: a
  }), [Se, fe, Oe, ct, G, H, d, Ot, a]), Dm = x.useMemo(() => ({
    formatDensity: M,
    enableAccessibleFieldDOMStructure: F,
    selectedSections: A,
    onSelectedSectionsChange: $,
    fieldRef: ee
  }), [M, F, A, $, ee]);
  return {
    providerProps: {
      localeText: u,
      contextValue: Yt,
      privateContextValue: km,
      actionsContextValue: Kr,
      fieldPrivateContextValue: Dm,
      isValidContextValue: (mt) => {
        const En = i({
          adapter: L,
          value: mt,
          timezone: re,
          props: t
        });
        return !n.hasError(En);
      }
    },
    renderCurrentView: () => {
      if (Je == null)
        return null;
      const mt = m[Je];
      if (mt == null)
        return null;
      const En = j({}, _, {
        views: y,
        timezone: re,
        value: ae,
        onChange: ce,
        view: Je,
        onViewChange: oe,
        showViewSwitcher: Ve > 1,
        timeViewsCount: Ve
      }, d === "tooltip" ? {
        focusedView: null,
        onFocusedViewChange: () => {
        }
      } : {
        focusedView: ge,
        onFocusedViewChange: se
      });
      return c ? /* @__PURE__ */ E.jsx(c, {
        viewRenderers: m,
        popperView: Je,
        rendererProps: En
      }) : mt(En);
    },
    ownerState: fe
  };
};
function Sp(e) {
  return we("MuiPickersLayout", e);
}
const Un = xe("MuiPickersLayout", ["root", "landscape", "contentWrapper", "toolbar", "actionBar", "tabs", "shortcuts"]);
function Fu(...e) {
  return e.reduce((t, n) => n == null ? t : function(...s) {
    t.apply(this, s), n.apply(this, s);
  }, () => {
  });
}
function ew(e) {
  return we("MuiSvgIcon", e);
}
xe("MuiSvgIcon", ["root", "colorPrimary", "colorSecondary", "colorAction", "colorError", "colorDisabled", "fontSizeInherit", "fontSizeSmall", "fontSizeMedium", "fontSizeLarge"]);
const tw = (e) => {
  const {
    color: t,
    fontSize: n,
    classes: r
  } = e, s = {
    root: ["root", t !== "inherit" && `color${le(t)}`, `fontSize${le(n)}`]
  };
  return be(s, ew, r);
}, nw = Q("svg", {
  name: "MuiSvgIcon",
  slot: "Root",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e;
    return [t.root, n.color !== "inherit" && t[`color${le(n.color)}`], t[`fontSize${le(n.fontSize)}`]];
  }
})(qe(({
  theme: e
}) => ({
  userSelect: "none",
  width: "1em",
  height: "1em",
  display: "inline-block",
  flexShrink: 0,
  transition: e.transitions?.create?.("fill", {
    duration: (e.vars ?? e).transitions?.duration?.shorter
  }),
  variants: [
    {
      props: (t) => !t.hasSvgAsChild,
      style: {
        // the <svg> will define the property that has `currentColor`
        // for example heroicons uses fill="none" and stroke="currentColor"
        fill: "currentColor"
      }
    },
    {
      props: {
        fontSize: "inherit"
      },
      style: {
        fontSize: "inherit"
      }
    },
    {
      props: {
        fontSize: "small"
      },
      style: {
        fontSize: e.typography?.pxToRem?.(20) || "1.25rem"
      }
    },
    {
      props: {
        fontSize: "medium"
      },
      style: {
        fontSize: e.typography?.pxToRem?.(24) || "1.5rem"
      }
    },
    {
      props: {
        fontSize: "large"
      },
      style: {
        fontSize: e.typography?.pxToRem?.(35) || "2.1875rem"
      }
    },
    // TODO v5 deprecate color prop, v6 remove for sx
    ...Object.entries((e.vars ?? e).palette).filter(([, t]) => t && t.main).map(([t]) => ({
      props: {
        color: t
      },
      style: {
        color: (e.vars ?? e).palette?.[t]?.main
      }
    })),
    {
      props: {
        color: "action"
      },
      style: {
        color: (e.vars ?? e).palette?.action?.active
      }
    },
    {
      props: {
        color: "disabled"
      },
      style: {
        color: (e.vars ?? e).palette?.action?.disabled
      }
    },
    {
      props: {
        color: "inherit"
      },
      style: {
        color: void 0
      }
    }
  ]
}))), Hs = /* @__PURE__ */ x.forwardRef(function(t, n) {
  const r = Ae({
    props: t,
    name: "MuiSvgIcon"
  }), {
    children: s,
    className: i,
    color: a = "inherit",
    component: l = "svg",
    fontSize: c = "medium",
    htmlColor: u,
    inheritViewBox: d = !1,
    titleAccess: f,
    viewBox: y = "0 0 24 24",
    ...g
  } = r, h = /* @__PURE__ */ x.isValidElement(s) && s.type === "svg", p = {
    ...r,
    color: a,
    component: l,
    fontSize: c,
    instanceFontSize: t.fontSize,
    inheritViewBox: d,
    viewBox: y,
    hasSvgAsChild: h
  }, m = {};
  d || (m.viewBox = y);
  const b = tw(p);
  return /* @__PURE__ */ E.jsxs(nw, {
    as: l,
    className: pe(b.root, i),
    focusable: "false",
    color: u,
    "aria-hidden": f ? void 0 : !0,
    role: f ? "img" : void 0,
    ref: n,
    ...m,
    ...g,
    ...h && s.props,
    ownerState: p,
    children: [h ? s.props.children : s, f ? /* @__PURE__ */ E.jsx("title", {
      children: f
    }) : null]
  });
});
process.env.NODE_ENV !== "production" && (Hs.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Node passed into the SVG element.
   */
  children: o.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: o.object,
  /**
   * @ignore
   */
  className: o.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * You can use the `htmlColor` prop to apply a color attribute to the SVG element.
   * @default 'inherit'
   */
  color: o.oneOfType([o.oneOf(["inherit", "action", "disabled", "primary", "secondary", "error", "info", "success", "warning"]), o.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: o.elementType,
  /**
   * The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.
   * @default 'medium'
   */
  fontSize: o.oneOfType([o.oneOf(["inherit", "large", "medium", "small"]), o.string]),
  /**
   * Applies a color attribute to the SVG element.
   */
  htmlColor: o.string,
  /**
   * If `true`, the root node will inherit the custom `component`'s viewBox and the `viewBox`
   * prop will be ignored.
   * Useful when you want to reference a custom `component` and have `SvgIcon` pass that
   * `component`'s viewBox to the root node.
   * @default false
   */
  inheritViewBox: o.bool,
  /**
   * The shape-rendering attribute. The behavior of the different options is described on the
   * [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/SVG/Reference/Attribute/shape-rendering).
   * If you are having issues with blurry icons you should investigate this prop.
   */
  shapeRendering: o.string,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: o.oneOfType([o.arrayOf(o.oneOfType([o.func, o.object, o.bool])), o.func, o.object]),
  /**
   * Provides a human-readable title for the element that contains it.
   * https://www.w3.org/TR/SVG-access/#Equivalent
   */
  titleAccess: o.string,
  /**
   * Allows you to redefine what the coordinates without units mean inside an SVG element.
   * For example, if the SVG element is 500 (width) by 200 (height),
   * and you pass viewBox="0 0 50 20",
   * this means that the coordinates inside the SVG will go from the top left corner (0,0)
   * to bottom right (50,20) and each unit will be worth 10px.
   * @default '0 0 24 24'
   */
  viewBox: o.string
});
Hs.muiName = "SvgIcon";
function dn(e, t) {
  function n(r, s) {
    return /* @__PURE__ */ E.jsx(Hs, {
      "data-testid": process.env.NODE_ENV !== "production" ? `${t}Icon` : void 0,
      ref: s,
      ...r,
      children: e
    });
  }
  return process.env.NODE_ENV !== "production" && (n.displayName = `${t}Icon`), n.muiName = Hs.muiName, /* @__PURE__ */ x.memo(/* @__PURE__ */ x.forwardRef(n));
}
function Ep(e, t = 166) {
  let n;
  function r(...s) {
    const i = () => {
      e.apply(this, s);
    };
    clearTimeout(n), n = setTimeout(i, t);
  }
  return r.clear = () => {
    clearTimeout(n);
  }, r;
}
function vn(e) {
  return pt(e).defaultView || window;
}
function rw(e, t, n, r, s) {
  if (process.env.NODE_ENV === "production")
    return null;
  const i = s || t;
  return typeof e[t] < "u" ? new Error(`The prop \`${i}\` is not supported. Please remove it.`) : null;
}
function ow(e, t) {
  const n = e.charCodeAt(2);
  return e[0] === "o" && e[1] === "n" && n >= 65 && n <= 90 && typeof t == "function";
}
function sw(e, t) {
  if (!e)
    return t;
  function n(a, l) {
    const c = {};
    return Object.keys(l).forEach((u) => {
      ow(u, l[u]) && typeof a[u] == "function" && (c[u] = (...d) => {
        a[u](...d), l[u](...d);
      });
    }), c;
  }
  if (typeof e == "function" || typeof t == "function")
    return (a) => {
      const l = typeof t == "function" ? t(a) : t, c = typeof e == "function" ? e({
        ...a,
        ...l
      }) : e, u = pe(a?.className, l?.className, c?.className), d = n(c, l);
      return {
        ...l,
        ...c,
        ...d,
        ...!!u && {
          className: u
        },
        ...l?.style && c?.style && {
          style: {
            ...l.style,
            ...c.style
          }
        },
        ...l?.sx && c?.sx && {
          sx: [...Array.isArray(l.sx) ? l.sx : [l.sx], ...Array.isArray(c.sx) ? c.sx : [c.sx]]
        }
      };
    };
  const r = t, s = n(e, r), i = pe(r?.className, e?.className);
  return {
    ...t,
    ...e,
    ...s,
    ...!!i && {
      className: i
    },
    ...r?.style && e?.style && {
      style: {
        ...r.style,
        ...e.style
      }
    },
    ...r?.sx && e?.sx && {
      sx: [...Array.isArray(r.sx) ? r.sx : [r.sx], ...Array.isArray(e.sx) ? e.sx : [e.sx]]
    }
  };
}
function iw(e) {
  const {
    prototype: t = {}
  } = e;
  return !!t.isReactComponent;
}
function aw(e, t, n, r, s) {
  const i = e[t], a = s || t;
  if (i == null || // When server-side rendering React doesn't warn either.
  // This is not an accurate check for SSR.
  // This is only in place for emotion compat.
  // TODO: Revisit once https://github.com/facebook/react/issues/20047 is resolved.
  typeof window > "u")
    return null;
  let l;
  return typeof i == "function" && !iw(i) && (l = "Did you accidentally provide a plain function component instead?"), l !== void 0 ? new Error(`Invalid ${r} \`${a}\` supplied to \`${n}\`. Expected an element type that can hold a ref. ${l} For more information see https://mui.com/r/caveat-with-refs-guide`) : null;
}
const xi = wn(o.elementType, aw);
function $u(e) {
  try {
    return e.matches(":focus-visible");
  } catch {
    process.env.NODE_ENV !== "production" && !window.navigator.userAgent.includes("jsdom") && console.warn(["MUI: The `:focus-visible` pseudo class is not supported in this browser.", "Some components rely on this feature to work properly."].join(`
`));
  }
  return !1;
}
class Ys {
  /** React ref to the ripple instance */
  /** If the ripple component should be mounted */
  /** Promise that resolves when the ripple component is mounted */
  /** If the ripple component has been mounted */
  /** React state hook setter */
  static create() {
    return new Ys();
  }
  static use() {
    const t = Zf(Ys.create).current, [n, r] = x.useState(!1);
    return t.shouldMount = n, t.setShouldMount = r, x.useEffect(t.mountEffect, [n]), t;
  }
  constructor() {
    this.ref = {
      current: null
    }, this.mounted = null, this.didMount = !1, this.shouldMount = !1, this.setShouldMount = null;
  }
  mount() {
    return this.mounted || (this.mounted = cw(), this.shouldMount = !0, this.setShouldMount(this.shouldMount)), this.mounted;
  }
  mountEffect = () => {
    this.shouldMount && !this.didMount && this.ref.current !== null && (this.didMount = !0, this.mounted.resolve());
  };
  /* Ripple API */
  start(...t) {
    this.mount().then(() => this.ref.current?.start(...t));
  }
  stop(...t) {
    this.mount().then(() => this.ref.current?.stop(...t));
  }
  pulsate(...t) {
    this.mount().then(() => this.ref.current?.pulsate(...t));
  }
}
function lw() {
  return Ys.use();
}
function cw() {
  let e, t;
  const n = new Promise((r, s) => {
    e = r, t = s;
  });
  return n.resolve = e, n.reject = t, n;
}
function Op(e) {
  const {
    className: t,
    classes: n,
    pulsate: r = !1,
    rippleX: s,
    rippleY: i,
    rippleSize: a,
    in: l,
    onExited: c,
    timeout: u
  } = e, [d, f] = x.useState(!1), y = pe(t, n.ripple, n.rippleVisible, r && n.ripplePulsate), g = {
    width: a,
    height: a,
    top: -(a / 2) + i,
    left: -(a / 2) + s
  }, h = pe(n.child, d && n.childLeaving, r && n.childPulsate);
  return !l && !d && f(!0), x.useEffect(() => {
    if (!l && c != null) {
      const p = setTimeout(c, u);
      return () => {
        clearTimeout(p);
      };
    }
  }, [c, l, u]), /* @__PURE__ */ E.jsx("span", {
    className: y,
    style: g,
    children: /* @__PURE__ */ E.jsx("span", {
      className: h
    })
  });
}
process.env.NODE_ENV !== "production" && (Op.propTypes = {
  /**
   * Override or extend the styles applied to the component.
   */
  classes: o.object.isRequired,
  className: o.string,
  /**
   * @ignore - injected from TransitionGroup
   */
  in: o.bool,
  /**
   * @ignore - injected from TransitionGroup
   */
  onExited: o.func,
  /**
   * If `true`, the ripple pulsates, typically indicating the keyboard focus state of an element.
   */
  pulsate: o.bool,
  /**
   * Diameter of the ripple.
   */
  rippleSize: o.number,
  /**
   * Horizontal position of the ripple center.
   */
  rippleX: o.number,
  /**
   * Vertical position of the ripple center.
   */
  rippleY: o.number,
  /**
   * exit delay
   */
  timeout: o.number.isRequired
});
const At = xe("MuiTouchRipple", ["root", "ripple", "rippleVisible", "ripplePulsate", "child", "childLeaving", "childPulsate"]), _a = 550, uw = 80, dw = Wo`
  0% {
    transform: scale(0);
    opacity: 0.1;
  }

  100% {
    transform: scale(1);
    opacity: 0.3;
  }
`, fw = Wo`
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
`, pw = Wo`
  0% {
    transform: scale(1);
  }

  50% {
    transform: scale(0.92);
  }

  100% {
    transform: scale(1);
  }
`, hw = Q("span", {
  name: "MuiTouchRipple",
  slot: "Root"
})({
  overflow: "hidden",
  pointerEvents: "none",
  position: "absolute",
  zIndex: 0,
  top: 0,
  right: 0,
  bottom: 0,
  left: 0,
  borderRadius: "inherit"
}), mw = Q(Op, {
  name: "MuiTouchRipple",
  slot: "Ripple"
})`
  opacity: 0;
  position: absolute;

  &.${At.rippleVisible} {
    opacity: 0.3;
    transform: scale(1);
    animation-name: ${dw};
    animation-duration: ${_a}ms;
    animation-timing-function: ${({
  theme: e
}) => e.transitions.easing.easeInOut};
  }

  &.${At.ripplePulsate} {
    animation-duration: ${({
  theme: e
}) => e.transitions.duration.shorter}ms;
  }

  & .${At.child} {
    opacity: 1;
    display: block;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background-color: currentColor;
  }

  & .${At.childLeaving} {
    opacity: 0;
    animation-name: ${fw};
    animation-duration: ${_a}ms;
    animation-timing-function: ${({
  theme: e
}) => e.transitions.easing.easeInOut};
  }

  & .${At.childPulsate} {
    position: absolute;
    /* @noflip */
    left: 0px;
    top: 0;
    animation-name: ${pw};
    animation-duration: 2500ms;
    animation-timing-function: ${({
  theme: e
}) => e.transitions.easing.easeInOut};
    animation-iteration-count: infinite;
    animation-delay: 200ms;
  }
`, Cp = /* @__PURE__ */ x.forwardRef(function(t, n) {
  const r = Ae({
    props: t,
    name: "MuiTouchRipple"
  }), {
    center: s = !1,
    classes: i = {},
    className: a,
    ...l
  } = r, [c, u] = x.useState([]), d = x.useRef(0), f = x.useRef(null);
  x.useEffect(() => {
    f.current && (f.current(), f.current = null);
  }, [c]);
  const y = x.useRef(!1), g = Dn(), h = x.useRef(null), p = x.useRef(null), m = x.useCallback((w) => {
    const {
      pulsate: S,
      rippleX: P,
      rippleY: M,
      rippleSize: F,
      cb: A
    } = w;
    u(($) => [...$, /* @__PURE__ */ E.jsx(mw, {
      classes: {
        ripple: pe(i.ripple, At.ripple),
        rippleVisible: pe(i.rippleVisible, At.rippleVisible),
        ripplePulsate: pe(i.ripplePulsate, At.ripplePulsate),
        child: pe(i.child, At.child),
        childLeaving: pe(i.childLeaving, At.childLeaving),
        childPulsate: pe(i.childPulsate, At.childPulsate)
      },
      timeout: _a,
      pulsate: S,
      rippleX: P,
      rippleY: M,
      rippleSize: F
    }, d.current)]), d.current += 1, f.current = A;
  }, [i]), b = x.useCallback((w = {}, S = {}, P = () => {
  }) => {
    const {
      pulsate: M = !1,
      center: F = s || S.pulsate,
      fakeElement: A = !1
      // For test purposes
    } = S;
    if (w?.type === "mousedown" && y.current) {
      y.current = !1;
      return;
    }
    w?.type === "touchstart" && (y.current = !0);
    const $ = A ? null : p.current, k = $ ? $.getBoundingClientRect() : {
      width: 0,
      height: 0,
      left: 0,
      top: 0
    };
    let v, D, T;
    if (F || w === void 0 || w.clientX === 0 && w.clientY === 0 || !w.clientX && !w.touches)
      v = Math.round(k.width / 2), D = Math.round(k.height / 2);
    else {
      const {
        clientX: I,
        clientY: N
      } = w.touches && w.touches.length > 0 ? w.touches[0] : w;
      v = Math.round(I - k.left), D = Math.round(N - k.top);
    }
    if (F)
      T = Math.sqrt((2 * k.width ** 2 + k.height ** 2) / 3), T % 2 === 0 && (T += 1);
    else {
      const I = Math.max(Math.abs(($ ? $.clientWidth : 0) - v), v) * 2 + 2, N = Math.max(Math.abs(($ ? $.clientHeight : 0) - D), D) * 2 + 2;
      T = Math.sqrt(I ** 2 + N ** 2);
    }
    w?.touches ? h.current === null && (h.current = () => {
      m({
        pulsate: M,
        rippleX: v,
        rippleY: D,
        rippleSize: T,
        cb: P
      });
    }, g.start(uw, () => {
      h.current && (h.current(), h.current = null);
    })) : m({
      pulsate: M,
      rippleX: v,
      rippleY: D,
      rippleSize: T,
      cb: P
    });
  }, [s, m, g]), C = x.useCallback(() => {
    b({}, {
      pulsate: !0
    });
  }, [b]), O = x.useCallback((w, S) => {
    if (g.clear(), w?.type === "touchend" && h.current) {
      h.current(), h.current = null, g.start(0, () => {
        O(w, S);
      });
      return;
    }
    h.current = null, u((P) => P.length > 0 ? P.slice(1) : P), f.current = S;
  }, [g]);
  return x.useImperativeHandle(n, () => ({
    pulsate: C,
    start: b,
    stop: O
  }), [C, b, O]), /* @__PURE__ */ E.jsx(hw, {
    className: pe(At.root, i.root, a),
    ref: p,
    ...l,
    children: /* @__PURE__ */ E.jsx(Zo, {
      component: null,
      exit: !0,
      children: c
    })
  });
});
process.env.NODE_ENV !== "production" && (Cp.propTypes = {
  /**
   * If `true`, the ripple starts at the center of the component
   * rather than at the point of interaction.
   */
  center: o.bool,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: o.object,
  /**
   * @ignore
   */
  className: o.string
});
function yw(e) {
  return we("MuiButtonBase", e);
}
const gw = xe("MuiButtonBase", ["root", "disabled", "focusVisible"]), bw = (e) => {
  const {
    disabled: t,
    focusVisible: n,
    focusVisibleClassName: r,
    classes: s
  } = e, a = be({
    root: ["root", t && "disabled", n && "focusVisible"]
  }, yw, s);
  return n && r && (a.root += ` ${r}`), a;
}, vw = Q("button", {
  name: "MuiButtonBase",
  slot: "Root"
})({
  display: "inline-flex",
  alignItems: "center",
  justifyContent: "center",
  position: "relative",
  boxSizing: "border-box",
  WebkitTapHighlightColor: "transparent",
  backgroundColor: "transparent",
  // Reset default value
  // We disable the focus ring for mouse, touch and keyboard users.
  outline: 0,
  border: 0,
  margin: 0,
  // Remove the margin in Safari
  borderRadius: 0,
  padding: 0,
  // Remove the padding in Firefox
  cursor: "pointer",
  userSelect: "none",
  verticalAlign: "middle",
  MozAppearance: "none",
  // Reset
  WebkitAppearance: "none",
  // Reset
  textDecoration: "none",
  // So we take precedent over the style of a native <a /> element.
  color: "inherit",
  "&::-moz-focus-inner": {
    borderStyle: "none"
    // Remove Firefox dotted outline.
  },
  [`&.${gw.disabled}`]: {
    pointerEvents: "none",
    // Disable link interactions
    cursor: "default"
  },
  "@media print": {
    colorAdjust: "exact"
  }
}), Vr = /* @__PURE__ */ x.forwardRef(function(t, n) {
  const r = Ae({
    props: t,
    name: "MuiButtonBase"
  }), {
    action: s,
    centerRipple: i = !1,
    children: a,
    className: l,
    component: c = "button",
    disabled: u = !1,
    disableRipple: d = !1,
    disableTouchRipple: f = !1,
    focusRipple: y = !1,
    focusVisibleClassName: g,
    LinkComponent: h = "a",
    onBlur: p,
    onClick: m,
    onContextMenu: b,
    onDragLeave: C,
    onFocus: O,
    onFocusVisible: w,
    onKeyDown: S,
    onKeyUp: P,
    onMouseDown: M,
    onMouseLeave: F,
    onMouseUp: A,
    onTouchEnd: $,
    onTouchMove: k,
    onTouchStart: v,
    tabIndex: D = 0,
    TouchRippleProps: T,
    touchRippleRef: I,
    type: N,
    ..._
  } = r, G = x.useRef(null), L = lw(), V = Ne(L.ref, I), [R, B] = x.useState(!1);
  u && R && B(!1), x.useImperativeHandle(s, () => ({
    focusVisible: () => {
      B(!0), G.current.focus();
    }
  }), []);
  const H = L.shouldMount && !d && !u;
  x.useEffect(() => {
    R && y && !d && L.pulsate();
  }, [d, y, R, L]);
  const K = pn(L, "start", M, f), te = pn(L, "stop", b, f), ee = pn(L, "stop", C, f), J = pn(L, "stop", A, f), ie = pn(L, "stop", (ue) => {
    R && ue.preventDefault(), F && F(ue);
  }, f), re = pn(L, "start", v, f), q = pn(L, "stop", $, f), X = pn(L, "stop", k, f), z = pn(L, "stop", (ue) => {
    $u(ue.target) || B(!1), p && p(ue);
  }, !1), ne = de((ue) => {
    G.current || (G.current = ue.currentTarget), $u(ue.target) && (B(!0), w && w(ue)), O && O(ue);
  }), Y = () => {
    const ue = G.current;
    return c && c !== "button" && !(ue.tagName === "A" && ue.href);
  }, ae = de((ue) => {
    y && !ue.repeat && R && ue.key === " " && L.stop(ue, () => {
      L.start(ue);
    }), ue.target === ue.currentTarget && Y() && ue.key === " " && ue.preventDefault(), S && S(ue), ue.target === ue.currentTarget && Y() && ue.key === "Enter" && !u && (ue.preventDefault(), m && m(ue));
  }), W = de((ue) => {
    y && ue.key === " " && R && !ue.defaultPrevented && L.stop(ue, () => {
      L.pulsate(ue);
    }), P && P(ue), m && ue.target === ue.currentTarget && Y() && ue.key === " " && !ue.defaultPrevented && m(ue);
  });
  let oe = c;
  oe === "button" && (_.href || _.to) && (oe = h);
  const ye = {};
  oe === "button" ? (ye.type = N === void 0 ? "button" : N, ye.disabled = u) : (!_.href && !_.to && (ye.role = "button"), u && (ye["aria-disabled"] = u));
  const ge = Ne(n, G), se = {
    ...r,
    centerRipple: i,
    component: c,
    disabled: u,
    disableRipple: d,
    disableTouchRipple: f,
    focusRipple: y,
    tabIndex: D,
    focusVisible: R
  }, ce = bw(se);
  return /* @__PURE__ */ E.jsxs(vw, {
    as: oe,
    className: pe(ce.root, l),
    ownerState: se,
    onBlur: z,
    onClick: m,
    onContextMenu: te,
    onFocus: ne,
    onKeyDown: ae,
    onKeyUp: W,
    onMouseDown: K,
    onMouseLeave: ie,
    onMouseUp: J,
    onDragLeave: ee,
    onTouchEnd: q,
    onTouchMove: X,
    onTouchStart: re,
    ref: ge,
    tabIndex: u ? -1 : D,
    type: N,
    ...ye,
    ..._,
    children: [a, H ? /* @__PURE__ */ E.jsx(Cp, {
      ref: V,
      center: i,
      ...T
    }) : null]
  });
});
function pn(e, t, n, r = !1) {
  return de((s) => (n && n(s), r || e[t](s), !0));
}
process.env.NODE_ENV !== "production" && (Vr.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * A ref for imperative actions.
   * It currently only supports `focusVisible()` action.
   */
  action: lt,
  /**
   * If `true`, the ripples are centered.
   * They won't start at the cursor interaction position.
   * @default false
   */
  centerRipple: o.bool,
  /**
   * The content of the component.
   */
  children: o.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: o.object,
  /**
   * @ignore
   */
  className: o.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: xi,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: o.bool,
  /**
   * If `true`, the ripple effect is disabled.
   *
   * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
   * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
   * @default false
   */
  disableRipple: o.bool,
  /**
   * If `true`, the touch ripple effect is disabled.
   * @default false
   */
  disableTouchRipple: o.bool,
  /**
   * If `true`, the base button will have a keyboard focus ripple.
   * @default false
   */
  focusRipple: o.bool,
  /**
   * This prop can help identify which element has keyboard focus.
   * The class name will be applied when the element gains the focus through keyboard interaction.
   * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
   * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).
   * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
   * if needed.
   */
  focusVisibleClassName: o.string,
  /**
   * @ignore
   */
  href: o.any,
  /**
   * The component used to render a link when the `href` prop is provided.
   * @default 'a'
   */
  LinkComponent: o.elementType,
  /**
   * @ignore
   */
  onBlur: o.func,
  /**
   * @ignore
   */
  onClick: o.func,
  /**
   * @ignore
   */
  onContextMenu: o.func,
  /**
   * @ignore
   */
  onDragLeave: o.func,
  /**
   * @ignore
   */
  onFocus: o.func,
  /**
   * Callback fired when the component is focused with a keyboard.
   * We trigger a `onFocus` callback too.
   */
  onFocusVisible: o.func,
  /**
   * @ignore
   */
  onKeyDown: o.func,
  /**
   * @ignore
   */
  onKeyUp: o.func,
  /**
   * @ignore
   */
  onMouseDown: o.func,
  /**
   * @ignore
   */
  onMouseLeave: o.func,
  /**
   * @ignore
   */
  onMouseUp: o.func,
  /**
   * @ignore
   */
  onTouchEnd: o.func,
  /**
   * @ignore
   */
  onTouchMove: o.func,
  /**
   * @ignore
   */
  onTouchStart: o.func,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: o.oneOfType([o.arrayOf(o.oneOfType([o.func, o.object, o.bool])), o.func, o.object]),
  /**
   * @default 0
   */
  tabIndex: o.number,
  /**
   * Props applied to the `TouchRipple` element.
   */
  TouchRippleProps: o.object,
  /**
   * A ref that points to the `TouchRipple` element.
   */
  touchRippleRef: o.oneOfType([o.func, o.shape({
    current: o.shape({
      pulsate: o.func.isRequired,
      start: o.func.isRequired,
      stop: o.func.isRequired
    })
  })]),
  /**
   * @ignore
   */
  type: o.oneOfType([o.oneOf(["button", "reset", "submit"]), o.string])
});
function xw(e) {
  return we("MuiCircularProgress", e);
}
xe("MuiCircularProgress", ["root", "determinate", "indeterminate", "colorPrimary", "colorSecondary", "svg", "track", "circle", "circleDeterminate", "circleIndeterminate", "circleDisableShrink"]);
const Wt = 44, Va = Wo`
  0% {
    transform: rotate(0deg);
  }

  100% {
    transform: rotate(360deg);
  }
`, La = Wo`
  0% {
    stroke-dasharray: 1px, 200px;
    stroke-dashoffset: 0;
  }

  50% {
    stroke-dasharray: 100px, 200px;
    stroke-dashoffset: -15px;
  }

  100% {
    stroke-dasharray: 1px, 200px;
    stroke-dashoffset: -126px;
  }
`, ww = typeof Va != "string" ? rf`
        animation: ${Va} 1.4s linear infinite;
      ` : null, Sw = typeof La != "string" ? rf`
        animation: ${La} 1.4s ease-in-out infinite;
      ` : null, Ew = (e) => {
  const {
    classes: t,
    variant: n,
    color: r,
    disableShrink: s
  } = e, i = {
    root: ["root", n, `color${le(r)}`],
    svg: ["svg"],
    track: ["track"],
    circle: ["circle", `circle${le(n)}`, s && "circleDisableShrink"]
  };
  return be(i, xw, t);
}, Ow = Q("span", {
  name: "MuiCircularProgress",
  slot: "Root",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e;
    return [t.root, t[n.variant], t[`color${le(n.color)}`]];
  }
})(qe(({
  theme: e
}) => ({
  display: "inline-block",
  variants: [{
    props: {
      variant: "determinate"
    },
    style: {
      transition: e.transitions.create("transform")
    }
  }, {
    props: {
      variant: "indeterminate"
    },
    style: ww || {
      animation: `${Va} 1.4s linear infinite`
    }
  }, ...Object.entries(e.palette).filter(Mt()).map(([t]) => ({
    props: {
      color: t
    },
    style: {
      color: (e.vars || e).palette[t].main
    }
  }))]
}))), Cw = Q("svg", {
  name: "MuiCircularProgress",
  slot: "Svg"
})({
  display: "block"
  // Keeps the progress centered
}), Pw = Q("circle", {
  name: "MuiCircularProgress",
  slot: "Circle",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e;
    return [t.circle, t[`circle${le(n.variant)}`], n.disableShrink && t.circleDisableShrink];
  }
})(qe(({
  theme: e
}) => ({
  stroke: "currentColor",
  variants: [{
    props: {
      variant: "determinate"
    },
    style: {
      transition: e.transitions.create("stroke-dashoffset")
    }
  }, {
    props: {
      variant: "indeterminate"
    },
    style: {
      // Some default value that looks fine waiting for the animation to kicks in.
      strokeDasharray: "80px, 200px",
      strokeDashoffset: 0
      // Add the unit to fix a Edge 16 and below bug.
    }
  }, {
    props: ({
      ownerState: t
    }) => t.variant === "indeterminate" && !t.disableShrink,
    style: Sw || {
      // At runtime for Pigment CSS, `bufferAnimation` will be null and the generated keyframe will be used.
      animation: `${La} 1.4s ease-in-out infinite`
    }
  }]
}))), Tw = Q("circle", {
  name: "MuiCircularProgress",
  slot: "Track"
})(qe(({
  theme: e
}) => ({
  stroke: "currentColor",
  opacity: (e.vars || e).palette.action.activatedOpacity
}))), Nl = /* @__PURE__ */ x.forwardRef(function(t, n) {
  const r = Ae({
    props: t,
    name: "MuiCircularProgress"
  }), {
    className: s,
    color: i = "primary",
    disableShrink: a = !1,
    enableTrackSlot: l = !1,
    size: c = 40,
    style: u,
    thickness: d = 3.6,
    value: f = 0,
    variant: y = "indeterminate",
    ...g
  } = r, h = {
    ...r,
    color: i,
    disableShrink: a,
    size: c,
    thickness: d,
    value: f,
    variant: y,
    enableTrackSlot: l
  }, p = Ew(h), m = {}, b = {}, C = {};
  if (y === "determinate") {
    const O = 2 * Math.PI * ((Wt - d) / 2);
    m.strokeDasharray = O.toFixed(3), C["aria-valuenow"] = Math.round(f), m.strokeDashoffset = `${((100 - f) / 100 * O).toFixed(3)}px`, b.transform = "rotate(-90deg)";
  }
  return /* @__PURE__ */ E.jsx(Ow, {
    className: pe(p.root, s),
    style: {
      width: c,
      height: c,
      ...b,
      ...u
    },
    ownerState: h,
    ref: n,
    role: "progressbar",
    ...C,
    ...g,
    children: /* @__PURE__ */ E.jsxs(Cw, {
      className: p.svg,
      ownerState: h,
      viewBox: `${Wt / 2} ${Wt / 2} ${Wt} ${Wt}`,
      children: [l ? /* @__PURE__ */ E.jsx(Tw, {
        className: p.track,
        ownerState: h,
        cx: Wt,
        cy: Wt,
        r: (Wt - d) / 2,
        fill: "none",
        strokeWidth: d,
        "aria-hidden": "true"
      }) : null, /* @__PURE__ */ E.jsx(Pw, {
        className: p.circle,
        style: m,
        ownerState: h,
        cx: Wt,
        cy: Wt,
        r: (Wt - d) / 2,
        fill: "none",
        strokeWidth: d
      })]
    })
  });
});
process.env.NODE_ENV !== "production" && (Nl.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Override or extend the styles applied to the component.
   */
  classes: o.object,
  /**
   * @ignore
   */
  className: o.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * @default 'primary'
   */
  color: o.oneOfType([o.oneOf(["inherit", "primary", "secondary", "error", "info", "success", "warning"]), o.string]),
  /**
   * If `true`, the shrink animation is disabled.
   * This only works if variant is `indeterminate`.
   * @default false
   */
  disableShrink: wn(o.bool, (e) => e.disableShrink && e.variant && e.variant !== "indeterminate" ? new Error("MUI: You have provided the `disableShrink` prop with a variant other than `indeterminate`. This will have no effect.") : null),
  /**
   * If `true`, a track circle slot is mounted to show a subtle background for the progress.
   * The `size` and `thickness` apply to the track slot to be consistent with the progress circle.
   * @default false
   */
  enableTrackSlot: o.bool,
  /**
   * The size of the component.
   * If using a number, the pixel unit is assumed.
   * If using a string, you need to provide the CSS unit, for example '3rem'.
   * @default 40
   */
  size: o.oneOfType([o.number, o.string]),
  /**
   * @ignore
   */
  style: o.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: o.oneOfType([o.arrayOf(o.oneOfType([o.func, o.object, o.bool])), o.func, o.object]),
  /**
   * The thickness of the circle.
   * @default 3.6
   */
  thickness: o.number,
  /**
   * The value of the progress indicator for the determinate variant.
   * Value between 0 and 100.
   * @default 0
   */
  value: o.number,
  /**
   * The variant to use.
   * Use indeterminate when there is no progress value.
   * @default 'indeterminate'
   */
  variant: o.oneOf(["determinate", "indeterminate"])
});
function Rw(e) {
  return we("MuiButton", e);
}
const qn = xe("MuiButton", ["root", "text", "textInherit", "textPrimary", "textSecondary", "textSuccess", "textError", "textInfo", "textWarning", "outlined", "outlinedInherit", "outlinedPrimary", "outlinedSecondary", "outlinedSuccess", "outlinedError", "outlinedInfo", "outlinedWarning", "contained", "containedInherit", "containedPrimary", "containedSecondary", "containedSuccess", "containedError", "containedInfo", "containedWarning", "disableElevation", "focusVisible", "disabled", "colorInherit", "colorPrimary", "colorSecondary", "colorSuccess", "colorError", "colorInfo", "colorWarning", "textSizeSmall", "textSizeMedium", "textSizeLarge", "outlinedSizeSmall", "outlinedSizeMedium", "outlinedSizeLarge", "containedSizeSmall", "containedSizeMedium", "containedSizeLarge", "sizeMedium", "sizeSmall", "sizeLarge", "fullWidth", "startIcon", "endIcon", "icon", "iconSizeSmall", "iconSizeMedium", "iconSizeLarge", "loading", "loadingWrapper", "loadingIconPlaceholder", "loadingIndicator", "loadingPositionCenter", "loadingPositionStart", "loadingPositionEnd"]), Pp = /* @__PURE__ */ x.createContext({});
process.env.NODE_ENV !== "production" && (Pp.displayName = "ButtonGroupContext");
const Tp = /* @__PURE__ */ x.createContext(void 0);
process.env.NODE_ENV !== "production" && (Tp.displayName = "ButtonGroupButtonContext");
const kw = (e) => {
  const {
    color: t,
    disableElevation: n,
    fullWidth: r,
    size: s,
    variant: i,
    loading: a,
    loadingPosition: l,
    classes: c
  } = e, u = {
    root: ["root", a && "loading", i, `${i}${le(t)}`, `size${le(s)}`, `${i}Size${le(s)}`, `color${le(t)}`, n && "disableElevation", r && "fullWidth", a && `loadingPosition${le(l)}`],
    startIcon: ["icon", "startIcon", `iconSize${le(s)}`],
    endIcon: ["icon", "endIcon", `iconSize${le(s)}`],
    loadingIndicator: ["loadingIndicator"],
    loadingWrapper: ["loadingWrapper"]
  }, d = be(u, Rw, c);
  return {
    ...c,
    // forward the focused, disabled, etc. classes to the ButtonBase
    ...d
  };
}, Rp = [{
  props: {
    size: "small"
  },
  style: {
    "& > *:nth-of-type(1)": {
      fontSize: 18
    }
  }
}, {
  props: {
    size: "medium"
  },
  style: {
    "& > *:nth-of-type(1)": {
      fontSize: 20
    }
  }
}, {
  props: {
    size: "large"
  },
  style: {
    "& > *:nth-of-type(1)": {
      fontSize: 22
    }
  }
}], Dw = Q(Vr, {
  shouldForwardProp: (e) => qt(e) || e === "classes",
  name: "MuiButton",
  slot: "Root",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e;
    return [t.root, t[n.variant], t[`${n.variant}${le(n.color)}`], t[`size${le(n.size)}`], t[`${n.variant}Size${le(n.size)}`], n.color === "inherit" && t.colorInherit, n.disableElevation && t.disableElevation, n.fullWidth && t.fullWidth, n.loading && t.loading];
  }
})(qe(({
  theme: e
}) => {
  const t = e.palette.mode === "light" ? e.palette.grey[300] : e.palette.grey[800], n = e.palette.mode === "light" ? e.palette.grey.A100 : e.palette.grey[700];
  return {
    ...e.typography.button,
    minWidth: 64,
    padding: "6px 16px",
    border: 0,
    borderRadius: (e.vars || e).shape.borderRadius,
    transition: e.transitions.create(["background-color", "box-shadow", "border-color", "color"], {
      duration: e.transitions.duration.short
    }),
    "&:hover": {
      textDecoration: "none"
    },
    [`&.${qn.disabled}`]: {
      color: (e.vars || e).palette.action.disabled
    },
    variants: [{
      props: {
        variant: "contained"
      },
      style: {
        color: "var(--variant-containedColor)",
        backgroundColor: "var(--variant-containedBg)",
        boxShadow: (e.vars || e).shadows[2],
        "&:hover": {
          boxShadow: (e.vars || e).shadows[4],
          // Reset on touch devices, it doesn't add specificity
          "@media (hover: none)": {
            boxShadow: (e.vars || e).shadows[2]
          }
        },
        "&:active": {
          boxShadow: (e.vars || e).shadows[8]
        },
        [`&.${qn.focusVisible}`]: {
          boxShadow: (e.vars || e).shadows[6]
        },
        [`&.${qn.disabled}`]: {
          color: (e.vars || e).palette.action.disabled,
          boxShadow: (e.vars || e).shadows[0],
          backgroundColor: (e.vars || e).palette.action.disabledBackground
        }
      }
    }, {
      props: {
        variant: "outlined"
      },
      style: {
        padding: "5px 15px",
        border: "1px solid currentColor",
        borderColor: "var(--variant-outlinedBorder, currentColor)",
        backgroundColor: "var(--variant-outlinedBg)",
        color: "var(--variant-outlinedColor)",
        [`&.${qn.disabled}`]: {
          border: `1px solid ${(e.vars || e).palette.action.disabledBackground}`
        }
      }
    }, {
      props: {
        variant: "text"
      },
      style: {
        padding: "6px 8px",
        color: "var(--variant-textColor)",
        backgroundColor: "var(--variant-textBg)"
      }
    }, ...Object.entries(e.palette).filter(Mt()).map(([r]) => ({
      props: {
        color: r
      },
      style: {
        "--variant-textColor": (e.vars || e).palette[r].main,
        "--variant-outlinedColor": (e.vars || e).palette[r].main,
        "--variant-outlinedBorder": e.alpha((e.vars || e).palette[r].main, 0.5),
        "--variant-containedColor": (e.vars || e).palette[r].contrastText,
        "--variant-containedBg": (e.vars || e).palette[r].main,
        "@media (hover: hover)": {
          "&:hover": {
            "--variant-containedBg": (e.vars || e).palette[r].dark,
            "--variant-textBg": e.alpha((e.vars || e).palette[r].main, (e.vars || e).palette.action.hoverOpacity),
            "--variant-outlinedBorder": (e.vars || e).palette[r].main,
            "--variant-outlinedBg": e.alpha((e.vars || e).palette[r].main, (e.vars || e).palette.action.hoverOpacity)
          }
        }
      }
    })), {
      props: {
        color: "inherit"
      },
      style: {
        color: "inherit",
        borderColor: "currentColor",
        "--variant-containedBg": e.vars ? e.vars.palette.Button.inheritContainedBg : t,
        "@media (hover: hover)": {
          "&:hover": {
            "--variant-containedBg": e.vars ? e.vars.palette.Button.inheritContainedHoverBg : n,
            "--variant-textBg": e.alpha((e.vars || e).palette.text.primary, (e.vars || e).palette.action.hoverOpacity),
            "--variant-outlinedBg": e.alpha((e.vars || e).palette.text.primary, (e.vars || e).palette.action.hoverOpacity)
          }
        }
      }
    }, {
      props: {
        size: "small",
        variant: "text"
      },
      style: {
        padding: "4px 5px",
        fontSize: e.typography.pxToRem(13)
      }
    }, {
      props: {
        size: "large",
        variant: "text"
      },
      style: {
        padding: "8px 11px",
        fontSize: e.typography.pxToRem(15)
      }
    }, {
      props: {
        size: "small",
        variant: "outlined"
      },
      style: {
        padding: "3px 9px",
        fontSize: e.typography.pxToRem(13)
      }
    }, {
      props: {
        size: "large",
        variant: "outlined"
      },
      style: {
        padding: "7px 21px",
        fontSize: e.typography.pxToRem(15)
      }
    }, {
      props: {
        size: "small",
        variant: "contained"
      },
      style: {
        padding: "4px 10px",
        fontSize: e.typography.pxToRem(13)
      }
    }, {
      props: {
        size: "large",
        variant: "contained"
      },
      style: {
        padding: "8px 22px",
        fontSize: e.typography.pxToRem(15)
      }
    }, {
      props: {
        disableElevation: !0
      },
      style: {
        boxShadow: "none",
        "&:hover": {
          boxShadow: "none"
        },
        [`&.${qn.focusVisible}`]: {
          boxShadow: "none"
        },
        "&:active": {
          boxShadow: "none"
        },
        [`&.${qn.disabled}`]: {
          boxShadow: "none"
        }
      }
    }, {
      props: {
        fullWidth: !0
      },
      style: {
        width: "100%"
      }
    }, {
      props: {
        loadingPosition: "center"
      },
      style: {
        transition: e.transitions.create(["background-color", "box-shadow", "border-color"], {
          duration: e.transitions.duration.short
        }),
        [`&.${qn.loading}`]: {
          color: "transparent"
        }
      }
    }]
  };
})), Mw = Q("span", {
  name: "MuiButton",
  slot: "StartIcon",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e;
    return [t.startIcon, n.loading && t.startIconLoadingStart, t[`iconSize${le(n.size)}`]];
  }
})(({
  theme: e
}) => ({
  display: "inherit",
  marginRight: 8,
  marginLeft: -4,
  variants: [{
    props: {
      size: "small"
    },
    style: {
      marginLeft: -2
    }
  }, {
    props: {
      loadingPosition: "start",
      loading: !0
    },
    style: {
      transition: e.transitions.create(["opacity"], {
        duration: e.transitions.duration.short
      }),
      opacity: 0
    }
  }, {
    props: {
      loadingPosition: "start",
      loading: !0,
      fullWidth: !0
    },
    style: {
      marginRight: -8
    }
  }, ...Rp]
})), Iw = Q("span", {
  name: "MuiButton",
  slot: "EndIcon",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e;
    return [t.endIcon, n.loading && t.endIconLoadingEnd, t[`iconSize${le(n.size)}`]];
  }
})(({
  theme: e
}) => ({
  display: "inherit",
  marginRight: -4,
  marginLeft: 8,
  variants: [{
    props: {
      size: "small"
    },
    style: {
      marginRight: -2
    }
  }, {
    props: {
      loadingPosition: "end",
      loading: !0
    },
    style: {
      transition: e.transitions.create(["opacity"], {
        duration: e.transitions.duration.short
      }),
      opacity: 0
    }
  }, {
    props: {
      loadingPosition: "end",
      loading: !0,
      fullWidth: !0
    },
    style: {
      marginLeft: -8
    }
  }, ...Rp]
})), Nw = Q("span", {
  name: "MuiButton",
  slot: "LoadingIndicator"
})(({
  theme: e
}) => ({
  display: "none",
  position: "absolute",
  visibility: "visible",
  variants: [{
    props: {
      loading: !0
    },
    style: {
      display: "flex"
    }
  }, {
    props: {
      loadingPosition: "start"
    },
    style: {
      left: 14
    }
  }, {
    props: {
      loadingPosition: "start",
      size: "small"
    },
    style: {
      left: 10
    }
  }, {
    props: {
      variant: "text",
      loadingPosition: "start"
    },
    style: {
      left: 6
    }
  }, {
    props: {
      loadingPosition: "center"
    },
    style: {
      left: "50%",
      transform: "translate(-50%)",
      color: (e.vars || e).palette.action.disabled
    }
  }, {
    props: {
      loadingPosition: "end"
    },
    style: {
      right: 14
    }
  }, {
    props: {
      loadingPosition: "end",
      size: "small"
    },
    style: {
      right: 10
    }
  }, {
    props: {
      variant: "text",
      loadingPosition: "end"
    },
    style: {
      right: 6
    }
  }, {
    props: {
      loadingPosition: "start",
      fullWidth: !0
    },
    style: {
      position: "relative",
      left: -10
    }
  }, {
    props: {
      loadingPosition: "end",
      fullWidth: !0
    },
    style: {
      position: "relative",
      right: -10
    }
  }]
})), ju = Q("span", {
  name: "MuiButton",
  slot: "LoadingIconPlaceholder"
})({
  display: "inline-block",
  width: "1em",
  height: "1em"
}), Cn = /* @__PURE__ */ x.forwardRef(function(t, n) {
  const r = x.useContext(Pp), s = x.useContext(Tp), i = Po(r, t), a = Ae({
    props: i,
    name: "MuiButton"
  }), {
    children: l,
    color: c = "primary",
    component: u = "button",
    className: d,
    disabled: f = !1,
    disableElevation: y = !1,
    disableFocusRipple: g = !1,
    endIcon: h,
    focusVisibleClassName: p,
    fullWidth: m = !1,
    id: b,
    loading: C = null,
    loadingIndicator: O,
    loadingPosition: w = "center",
    size: S = "medium",
    startIcon: P,
    type: M,
    variant: F = "text",
    ...A
  } = a, $ = _n(b), k = O ?? /* @__PURE__ */ E.jsx(Nl, {
    "aria-labelledby": $,
    color: "inherit",
    size: 16
  }), v = {
    ...a,
    color: c,
    component: u,
    disabled: f,
    disableElevation: y,
    disableFocusRipple: g,
    fullWidth: m,
    loading: C,
    loadingIndicator: k,
    loadingPosition: w,
    size: S,
    type: M,
    variant: F
  }, D = kw(v), T = (P || C && w === "start") && /* @__PURE__ */ E.jsx(Mw, {
    className: D.startIcon,
    ownerState: v,
    children: P || /* @__PURE__ */ E.jsx(ju, {
      className: D.loadingIconPlaceholder,
      ownerState: v
    })
  }), I = (h || C && w === "end") && /* @__PURE__ */ E.jsx(Iw, {
    className: D.endIcon,
    ownerState: v,
    children: h || /* @__PURE__ */ E.jsx(ju, {
      className: D.loadingIconPlaceholder,
      ownerState: v
    })
  }), N = s || "", _ = typeof C == "boolean" ? (
    // use plain HTML span to minimize the runtime overhead
    /* @__PURE__ */ E.jsx("span", {
      className: D.loadingWrapper,
      style: {
        display: "contents"
      },
      children: C && /* @__PURE__ */ E.jsx(Nw, {
        className: D.loadingIndicator,
        ownerState: v,
        children: k
      })
    })
  ) : null;
  return /* @__PURE__ */ E.jsxs(Dw, {
    ownerState: v,
    className: pe(r.className, D.root, d, N),
    component: u,
    disabled: f || C,
    focusRipple: !g,
    focusVisibleClassName: pe(D.focusVisible, p),
    ref: n,
    type: M,
    id: C ? $ : b,
    ...A,
    classes: D,
    children: [T, w !== "end" && _, l, w === "end" && _, I]
  });
});
process.env.NODE_ENV !== "production" && (Cn.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: o.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: o.object,
  /**
   * @ignore
   */
  className: o.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * @default 'primary'
   */
  color: o.oneOfType([o.oneOf(["inherit", "primary", "secondary", "success", "error", "info", "warning"]), o.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: o.elementType,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: o.bool,
  /**
   * If `true`, no elevation is used.
   * @default false
   */
  disableElevation: o.bool,
  /**
   * If `true`, the  keyboard focus ripple is disabled.
   * @default false
   */
  disableFocusRipple: o.bool,
  /**
   * If `true`, the ripple effect is disabled.
   *
   * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
   * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
   * @default false
   */
  disableRipple: o.bool,
  /**
   * Element placed after the children.
   */
  endIcon: o.node,
  /**
   * @ignore
   */
  focusVisibleClassName: o.string,
  /**
   * If `true`, the button will take up the full width of its container.
   * @default false
   */
  fullWidth: o.bool,
  /**
   * The URL to link to when the button is clicked.
   * If defined, an `a` element will be used as the root node.
   */
  href: o.string,
  /**
   * @ignore
   */
  id: o.string,
  /**
   * If `true`, the loading indicator is visible and the button is disabled.
   * If `true | false`, the loading wrapper is always rendered before the children to prevent [Google Translation Crash](https://github.com/mui/material-ui/issues/27853).
   * @default null
   */
  loading: o.bool,
  /**
   * Element placed before the children if the button is in loading state.
   * The node should contain an element with `role="progressbar"` with an accessible name.
   * By default, it renders a `CircularProgress` that is labeled by the button itself.
   * @default <CircularProgress color="inherit" size={16} />
   */
  loadingIndicator: o.node,
  /**
   * The loading indicator can be positioned on the start, end, or the center of the button.
   * @default 'center'
   */
  loadingPosition: o.oneOf(["center", "end", "start"]),
  /**
   * The size of the component.
   * `small` is equivalent to the dense button styling.
   * @default 'medium'
   */
  size: o.oneOfType([o.oneOf(["small", "medium", "large"]), o.string]),
  /**
   * Element placed before the children.
   */
  startIcon: o.node,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: o.oneOfType([o.arrayOf(o.oneOfType([o.func, o.object, o.bool])), o.func, o.object]),
  /**
   * @ignore
   */
  type: o.oneOfType([o.oneOf(["button", "reset", "submit"]), o.string]),
  /**
   * The variant to use.
   * @default 'text'
   */
  variant: o.oneOfType([o.oneOf(["contained", "outlined", "text"]), o.string])
});
function Aw(e) {
  return we("MuiDialogActions", e);
}
xe("MuiDialogActions", ["root", "spacing"]);
const Fw = (e) => {
  const {
    classes: t,
    disableSpacing: n
  } = e;
  return be({
    root: ["root", !n && "spacing"]
  }, Aw, t);
}, $w = Q("div", {
  name: "MuiDialogActions",
  slot: "Root",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e;
    return [t.root, !n.disableSpacing && t.spacing];
  }
})({
  display: "flex",
  alignItems: "center",
  padding: 8,
  justifyContent: "flex-end",
  flex: "0 0 auto",
  variants: [{
    props: ({
      ownerState: e
    }) => !e.disableSpacing,
    style: {
      "& > :not(style) ~ :not(style)": {
        marginLeft: 8
      }
    }
  }]
}), kp = /* @__PURE__ */ x.forwardRef(function(t, n) {
  const r = Ae({
    props: t,
    name: "MuiDialogActions"
  }), {
    className: s,
    disableSpacing: i = !1,
    ...a
  } = r, l = {
    ...r,
    disableSpacing: i
  }, c = Fw(l);
  return /* @__PURE__ */ E.jsx($w, {
    className: pe(c.root, s),
    ownerState: l,
    ref: n,
    ...a
  });
});
process.env.NODE_ENV !== "production" && (kp.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: o.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: o.object,
  /**
   * @ignore
   */
  className: o.string,
  /**
   * If `true`, the actions do not have additional margin.
   * @default false
   */
  disableSpacing: o.bool,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: o.oneOfType([o.arrayOf(o.oneOfType([o.func, o.object, o.bool])), o.func, o.object])
});
const jw = ["actions"], _w = Q(kp, {
  name: "MuiPickersLayout",
  slot: "ActionBar"
})({});
function Dp(e) {
  const {
    actions: t
  } = e, n = Ee(e, jw), r = Ln(), {
    clearValue: s,
    setValueToToday: i,
    acceptValueChanges: a,
    cancelValueChanges: l,
    goToNextStep: c,
    hasNextStep: u
  } = Ur();
  if (t == null || t.length === 0)
    return null;
  const d = t?.map((f) => {
    switch (f) {
      case "clear":
        return /* @__PURE__ */ E.jsx(Cn, {
          onClick: s,
          children: r.clearButtonLabel
        }, f);
      case "cancel":
        return /* @__PURE__ */ E.jsx(Cn, {
          onClick: l,
          children: r.cancelButtonLabel
        }, f);
      case "accept":
        return /* @__PURE__ */ E.jsx(Cn, {
          onClick: a,
          children: r.okButtonLabel
        }, f);
      case "today":
        return /* @__PURE__ */ E.jsx(Cn, {
          onClick: i,
          children: r.todayButtonLabel
        }, f);
      case "next":
        return /* @__PURE__ */ E.jsx(Cn, {
          onClick: c,
          children: r.nextStepButtonLabel
        }, f);
      case "nextOrAccept":
        return u ? /* @__PURE__ */ E.jsx(Cn, {
          onClick: c,
          children: r.nextStepButtonLabel
        }, f) : /* @__PURE__ */ E.jsx(Cn, {
          onClick: a,
          children: r.okButtonLabel
        }, f);
      default:
        return null;
    }
  });
  return /* @__PURE__ */ E.jsx(_w, j({}, n, {
    children: d
  }));
}
process.env.NODE_ENV !== "production" && (Dp.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Ordered array of actions to display.
   * If empty, does not display that action bar.
   * @default
   * - `[]` for Pickers with one selection step which `closeOnSelect`.
   * - `['cancel', 'nextOrAccept']` for all other Pickers.
   */
  actions: o.arrayOf(o.oneOf(["accept", "cancel", "clear", "next", "nextOrAccept", "today"]).isRequired),
  /**
   * If `true`, the actions do not have additional margin.
   * @default false
   */
  disableSpacing: o.bool,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: o.oneOfType([o.arrayOf(o.oneOfType([o.func, o.object, o.bool])), o.func, o.object])
});
const Mp = /* @__PURE__ */ x.memo(Dp);
process.env.NODE_ENV !== "production" && (Mp.displayName = "PickersActionBar");
const Dr = /* @__PURE__ */ x.createContext({});
process.env.NODE_ENV !== "production" && (Dr.displayName = "ListContext");
function Vw(e) {
  return we("MuiList", e);
}
xe("MuiList", ["root", "padding", "dense", "subheader"]);
const Lw = (e) => {
  const {
    classes: t,
    disablePadding: n,
    dense: r,
    subheader: s
  } = e;
  return be({
    root: ["root", !n && "padding", r && "dense", s && "subheader"]
  }, Vw, t);
}, Bw = Q("ul", {
  name: "MuiList",
  slot: "Root",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e;
    return [t.root, !n.disablePadding && t.padding, n.dense && t.dense, n.subheader && t.subheader];
  }
})({
  listStyle: "none",
  margin: 0,
  padding: 0,
  position: "relative",
  variants: [{
    props: ({
      ownerState: e
    }) => !e.disablePadding,
    style: {
      paddingTop: 8,
      paddingBottom: 8
    }
  }, {
    props: ({
      ownerState: e
    }) => e.subheader,
    style: {
      paddingTop: 0
    }
  }]
}), Al = /* @__PURE__ */ x.forwardRef(function(t, n) {
  const r = Ae({
    props: t,
    name: "MuiList"
  }), {
    children: s,
    className: i,
    component: a = "ul",
    dense: l = !1,
    disablePadding: c = !1,
    subheader: u,
    ...d
  } = r, f = x.useMemo(() => ({
    dense: l
  }), [l]), y = {
    ...r,
    component: a,
    dense: l,
    disablePadding: c
  }, g = Lw(y);
  return /* @__PURE__ */ E.jsx(Dr.Provider, {
    value: f,
    children: /* @__PURE__ */ E.jsxs(Bw, {
      as: a,
      className: pe(g.root, i),
      ref: n,
      ownerState: y,
      ...d,
      children: [u, s]
    })
  });
});
process.env.NODE_ENV !== "production" && (Al.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: o.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: o.object,
  /**
   * @ignore
   */
  className: o.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: o.elementType,
  /**
   * If `true`, compact vertical padding designed for keyboard and mouse input is used for
   * the list and list items.
   * The prop is available to descendant components as the `dense` context.
   * @default false
   */
  dense: o.bool,
  /**
   * If `true`, vertical padding is removed from the list.
   * @default false
   */
  disablePadding: o.bool,
  /**
   * The content of the subheader, normally `ListSubheader`.
   */
  subheader: o.node,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: o.oneOfType([o.arrayOf(o.oneOfType([o.func, o.object, o.bool])), o.func, o.object])
});
function Ww(e) {
  return we("MuiListItem", e);
}
xe("MuiListItem", ["root", "container", "dense", "alignItemsFlexStart", "divider", "gutters", "padding", "secondaryAction"]);
const zw = xe("MuiListItemButton", ["root", "focusVisible", "dense", "alignItemsFlexStart", "disabled", "divider", "gutters", "selected"]);
function Uw(e) {
  return we("MuiListItemSecondaryAction", e);
}
xe("MuiListItemSecondaryAction", ["root", "disableGutters"]);
const qw = (e) => {
  const {
    disableGutters: t,
    classes: n
  } = e;
  return be({
    root: ["root", t && "disableGutters"]
  }, Uw, n);
}, Hw = Q("div", {
  name: "MuiListItemSecondaryAction",
  slot: "Root",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e;
    return [t.root, n.disableGutters && t.disableGutters];
  }
})({
  position: "absolute",
  right: 16,
  top: "50%",
  transform: "translateY(-50%)",
  variants: [{
    props: ({
      ownerState: e
    }) => e.disableGutters,
    style: {
      right: 0
    }
  }]
}), Fl = /* @__PURE__ */ x.forwardRef(function(t, n) {
  const r = Ae({
    props: t,
    name: "MuiListItemSecondaryAction"
  }), {
    className: s,
    ...i
  } = r, a = x.useContext(Dr), l = {
    ...r,
    disableGutters: a.disableGutters
  }, c = qw(l);
  return /* @__PURE__ */ E.jsx(Hw, {
    className: pe(c.root, s),
    ownerState: l,
    ref: n,
    ...i
  });
});
process.env.NODE_ENV !== "production" && (Fl.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component, normally an `IconButton` or selection control.
   */
  children: o.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: o.object,
  /**
   * @ignore
   */
  className: o.string,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: o.oneOfType([o.arrayOf(o.oneOfType([o.func, o.object, o.bool])), o.func, o.object])
});
Fl.muiName = "ListItemSecondaryAction";
const Yw = (e, t) => {
  const {
    ownerState: n
  } = e;
  return [t.root, n.dense && t.dense, n.alignItems === "flex-start" && t.alignItemsFlexStart, n.divider && t.divider, !n.disableGutters && t.gutters, !n.disablePadding && t.padding, n.hasSecondaryAction && t.secondaryAction];
}, Kw = (e) => {
  const {
    alignItems: t,
    classes: n,
    dense: r,
    disableGutters: s,
    disablePadding: i,
    divider: a,
    hasSecondaryAction: l
  } = e;
  return be({
    root: ["root", r && "dense", !s && "gutters", !i && "padding", a && "divider", t === "flex-start" && "alignItemsFlexStart", l && "secondaryAction"],
    container: ["container"]
  }, Ww, n);
}, Gw = Q("div", {
  name: "MuiListItem",
  slot: "Root",
  overridesResolver: Yw
})(qe(({
  theme: e
}) => ({
  display: "flex",
  justifyContent: "flex-start",
  alignItems: "center",
  position: "relative",
  textDecoration: "none",
  width: "100%",
  boxSizing: "border-box",
  textAlign: "left",
  variants: [{
    props: ({
      ownerState: t
    }) => !t.disablePadding,
    style: {
      paddingTop: 8,
      paddingBottom: 8
    }
  }, {
    props: ({
      ownerState: t
    }) => !t.disablePadding && t.dense,
    style: {
      paddingTop: 4,
      paddingBottom: 4
    }
  }, {
    props: ({
      ownerState: t
    }) => !t.disablePadding && !t.disableGutters,
    style: {
      paddingLeft: 16,
      paddingRight: 16
    }
  }, {
    props: ({
      ownerState: t
    }) => !t.disablePadding && !!t.secondaryAction,
    style: {
      // Add some space to avoid collision as `ListItemSecondaryAction`
      // is absolutely positioned.
      paddingRight: 48
    }
  }, {
    props: ({
      ownerState: t
    }) => !!t.secondaryAction,
    style: {
      [`& > .${zw.root}`]: {
        paddingRight: 48
      }
    }
  }, {
    props: {
      alignItems: "flex-start"
    },
    style: {
      alignItems: "flex-start"
    }
  }, {
    props: ({
      ownerState: t
    }) => t.divider,
    style: {
      borderBottom: `1px solid ${(e.vars || e).palette.divider}`,
      backgroundClip: "padding-box"
    }
  }, {
    props: ({
      ownerState: t
    }) => t.button,
    style: {
      transition: e.transitions.create("background-color", {
        duration: e.transitions.duration.shortest
      }),
      "&:hover": {
        textDecoration: "none",
        backgroundColor: (e.vars || e).palette.action.hover,
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      }
    }
  }, {
    props: ({
      ownerState: t
    }) => t.hasSecondaryAction,
    style: {
      // Add some space to avoid collision as `ListItemSecondaryAction`
      // is absolutely positioned.
      paddingRight: 48
    }
  }]
}))), Xw = Q("li", {
  name: "MuiListItem",
  slot: "Container"
})({
  position: "relative"
}), Ip = /* @__PURE__ */ x.forwardRef(function(t, n) {
  const r = Ae({
    props: t,
    name: "MuiListItem"
  }), {
    alignItems: s = "center",
    children: i,
    className: a,
    component: l,
    components: c = {},
    componentsProps: u = {},
    ContainerComponent: d = "li",
    ContainerProps: {
      className: f,
      ...y
    } = {},
    dense: g = !1,
    disableGutters: h = !1,
    disablePadding: p = !1,
    divider: m = !1,
    secondaryAction: b,
    slotProps: C = {},
    slots: O = {},
    ...w
  } = r, S = x.useContext(Dr), P = x.useMemo(() => ({
    dense: g || S.dense || !1,
    alignItems: s,
    disableGutters: h
  }), [s, S.dense, g, h]), M = x.useRef(null), F = x.Children.toArray(i), A = F.length && vo(F[F.length - 1], ["ListItemSecondaryAction"]), $ = {
    ...r,
    alignItems: s,
    dense: P.dense,
    disableGutters: h,
    disablePadding: p,
    divider: m,
    hasSecondaryAction: A
  }, k = Kw($), v = Ne(M, n), D = O.root || c.Root || Gw, T = C.root || u.root || {}, I = {
    className: pe(k.root, T.className, a),
    ...w
  };
  let N = l || "li";
  return A ? (N = !I.component && !l ? "div" : N, d === "li" && (N === "li" ? N = "div" : I.component === "li" && (I.component = "div")), /* @__PURE__ */ E.jsx(Dr.Provider, {
    value: P,
    children: /* @__PURE__ */ E.jsxs(Xw, {
      as: d,
      className: pe(k.container, f),
      ref: v,
      ownerState: $,
      ...y,
      children: [/* @__PURE__ */ E.jsx(D, {
        ...T,
        ...!Ar(D) && {
          as: N,
          ownerState: {
            ...$,
            ...T.ownerState
          }
        },
        ...I,
        children: F
      }), F.pop()]
    })
  })) : /* @__PURE__ */ E.jsx(Dr.Provider, {
    value: P,
    children: /* @__PURE__ */ E.jsxs(D, {
      ...T,
      as: N,
      ref: v,
      ...!Ar(D) && {
        ownerState: {
          ...$,
          ...T.ownerState
        }
      },
      ...I,
      children: [F, b && /* @__PURE__ */ E.jsx(Fl, {
        children: b
      })]
    })
  });
});
process.env.NODE_ENV !== "production" && (Ip.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Defines the `align-items` style property.
   * @default 'center'
   */
  alignItems: o.oneOf(["center", "flex-start"]),
  /**
   * The content of the component if a `ListItemSecondaryAction` is used it must
   * be the last child.
   */
  children: wn(o.node, (e) => {
    const t = x.Children.toArray(e.children);
    let n = -1;
    for (let r = t.length - 1; r >= 0; r -= 1) {
      const s = t[r];
      if (vo(s, ["ListItemSecondaryAction"])) {
        n = r;
        break;
      }
    }
    return n !== -1 && n !== t.length - 1 ? new Error("MUI: You used an element after ListItemSecondaryAction. For ListItem to detect that it has a secondary action you must pass it as the last child to ListItem.") : null;
  }),
  /**
   * Override or extend the styles applied to the component.
   */
  classes: o.object,
  /**
   * @ignore
   */
  className: o.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: o.elementType,
  /**
   * The components used for each slot inside.
   *
   * @deprecated Use the `slots` prop instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   * @default {}
   */
  components: o.shape({
    Root: o.elementType
  }),
  /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   *
   * @deprecated Use the `slotProps` prop instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   * @default {}
   */
  componentsProps: o.shape({
    root: o.object
  }),
  /**
   * The container component used when a `ListItemSecondaryAction` is the last child.
   * @default 'li'
   * @deprecated Use the `component` or `slots.root` prop instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  ContainerComponent: xi,
  /**
   * Props applied to the container component if used.
   * @default {}
   * @deprecated Use the `slotProps.root` prop instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  ContainerProps: o.object,
  /**
   * If `true`, compact vertical padding designed for keyboard and mouse input is used.
   * The prop defaults to the value inherited from the parent List component.
   * @default false
   */
  dense: o.bool,
  /**
   * If `true`, the left and right padding is removed.
   * @default false
   */
  disableGutters: o.bool,
  /**
   * If `true`, all padding is removed.
   * @default false
   */
  disablePadding: o.bool,
  /**
   * If `true`, a 1px light border is added to the bottom of the list item.
   * @default false
   */
  divider: o.bool,
  /**
   * The element to display at the end of ListItem.
   */
  secondaryAction: o.node,
  /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   *
   * @default {}
   */
  slotProps: o.shape({
    root: o.object
  }),
  /**
   * The components used for each slot inside.
   *
   * @default {}
   */
  slots: o.shape({
    root: o.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: o.oneOfType([o.arrayOf(o.oneOfType([o.func, o.object, o.bool])), o.func, o.object])
});
const Qw = dn(/* @__PURE__ */ E.jsx("path", {
  d: "M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z"
}), "Cancel");
function Zw(e) {
  return we("MuiChip", e);
}
const Pe = xe("MuiChip", ["root", "sizeSmall", "sizeMedium", "colorDefault", "colorError", "colorInfo", "colorPrimary", "colorSecondary", "colorSuccess", "colorWarning", "disabled", "clickable", "clickableColorPrimary", "clickableColorSecondary", "deletable", "deletableColorPrimary", "deletableColorSecondary", "outlined", "filled", "outlinedPrimary", "outlinedSecondary", "filledPrimary", "filledSecondary", "avatar", "avatarSmall", "avatarMedium", "avatarColorPrimary", "avatarColorSecondary", "icon", "iconSmall", "iconMedium", "iconColorPrimary", "iconColorSecondary", "label", "labelSmall", "labelMedium", "deleteIcon", "deleteIconSmall", "deleteIconMedium", "deleteIconColorPrimary", "deleteIconColorSecondary", "deleteIconOutlinedColorPrimary", "deleteIconOutlinedColorSecondary", "deleteIconFilledColorPrimary", "deleteIconFilledColorSecondary", "focusVisible"]);
function Xe(e, t) {
  const {
    className: n,
    elementType: r,
    ownerState: s,
    externalForwardedProps: i,
    internalForwardedProps: a,
    shouldForwardComponentProp: l = !1,
    ...c
  } = t, {
    component: u,
    slots: d = {
      [e]: void 0
    },
    slotProps: f = {
      [e]: void 0
    },
    ...y
  } = i, g = d[e] || r, h = $t(f[e], s), {
    props: {
      component: p,
      ...m
    },
    internalRef: b
  } = Qf({
    className: n,
    ...c,
    externalForwardedProps: e === "root" ? y : void 0,
    externalSlotProps: h
  }), C = Ne(b, h?.ref, t.ref), O = e === "root" ? p || u : p, w = Gf(g, {
    ...e === "root" && !u && !d[e] && a,
    ...e !== "root" && !d[e] && a,
    ...m,
    ...O && !l && {
      as: O
    },
    ...O && l && {
      component: O
    },
    ref: C
  }, s);
  return [g, w];
}
const Jw = (e) => {
  const {
    classes: t,
    disabled: n,
    size: r,
    color: s,
    iconColor: i,
    onDelete: a,
    clickable: l,
    variant: c
  } = e, u = {
    root: ["root", c, n && "disabled", `size${le(r)}`, `color${le(s)}`, l && "clickable", l && `clickableColor${le(s)}`, a && "deletable", a && `deletableColor${le(s)}`, `${c}${le(s)}`],
    label: ["label", `label${le(r)}`],
    avatar: ["avatar", `avatar${le(r)}`, `avatarColor${le(s)}`],
    icon: ["icon", `icon${le(r)}`, `iconColor${le(i)}`],
    deleteIcon: ["deleteIcon", `deleteIcon${le(r)}`, `deleteIconColor${le(s)}`, `deleteIcon${le(c)}Color${le(s)}`]
  };
  return be(u, Zw, t);
}, eS = Q("div", {
  name: "MuiChip",
  slot: "Root",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e, {
      color: r,
      iconColor: s,
      clickable: i,
      onDelete: a,
      size: l,
      variant: c
    } = n;
    return [{
      [`& .${Pe.avatar}`]: t.avatar
    }, {
      [`& .${Pe.avatar}`]: t[`avatar${le(l)}`]
    }, {
      [`& .${Pe.avatar}`]: t[`avatarColor${le(r)}`]
    }, {
      [`& .${Pe.icon}`]: t.icon
    }, {
      [`& .${Pe.icon}`]: t[`icon${le(l)}`]
    }, {
      [`& .${Pe.icon}`]: t[`iconColor${le(s)}`]
    }, {
      [`& .${Pe.deleteIcon}`]: t.deleteIcon
    }, {
      [`& .${Pe.deleteIcon}`]: t[`deleteIcon${le(l)}`]
    }, {
      [`& .${Pe.deleteIcon}`]: t[`deleteIconColor${le(r)}`]
    }, {
      [`& .${Pe.deleteIcon}`]: t[`deleteIcon${le(c)}Color${le(r)}`]
    }, t.root, t[`size${le(l)}`], t[`color${le(r)}`], i && t.clickable, i && r !== "default" && t[`clickableColor${le(r)})`], a && t.deletable, a && r !== "default" && t[`deletableColor${le(r)}`], t[c], t[`${c}${le(r)}`]];
  }
})(qe(({
  theme: e
}) => {
  const t = e.palette.mode === "light" ? e.palette.grey[700] : e.palette.grey[300];
  return {
    maxWidth: "100%",
    fontFamily: e.typography.fontFamily,
    fontSize: e.typography.pxToRem(13),
    display: "inline-flex",
    alignItems: "center",
    justifyContent: "center",
    height: 32,
    lineHeight: 1.5,
    color: (e.vars || e).palette.text.primary,
    backgroundColor: (e.vars || e).palette.action.selected,
    borderRadius: 32 / 2,
    whiteSpace: "nowrap",
    transition: e.transitions.create(["background-color", "box-shadow"]),
    // reset cursor explicitly in case ButtonBase is used
    cursor: "unset",
    // We disable the focus ring for mouse, touch and keyboard users.
    outline: 0,
    textDecoration: "none",
    border: 0,
    // Remove `button` border
    padding: 0,
    // Remove `button` padding
    verticalAlign: "middle",
    boxSizing: "border-box",
    [`&.${Pe.disabled}`]: {
      opacity: (e.vars || e).palette.action.disabledOpacity,
      pointerEvents: "none"
    },
    [`& .${Pe.avatar}`]: {
      marginLeft: 5,
      marginRight: -6,
      width: 24,
      height: 24,
      color: e.vars ? e.vars.palette.Chip.defaultAvatarColor : t,
      fontSize: e.typography.pxToRem(12)
    },
    [`& .${Pe.avatarColorPrimary}`]: {
      color: (e.vars || e).palette.primary.contrastText,
      backgroundColor: (e.vars || e).palette.primary.dark
    },
    [`& .${Pe.avatarColorSecondary}`]: {
      color: (e.vars || e).palette.secondary.contrastText,
      backgroundColor: (e.vars || e).palette.secondary.dark
    },
    [`& .${Pe.avatarSmall}`]: {
      marginLeft: 4,
      marginRight: -4,
      width: 18,
      height: 18,
      fontSize: e.typography.pxToRem(10)
    },
    [`& .${Pe.icon}`]: {
      marginLeft: 5,
      marginRight: -6
    },
    [`& .${Pe.deleteIcon}`]: {
      WebkitTapHighlightColor: "transparent",
      color: e.alpha((e.vars || e).palette.text.primary, 0.26),
      fontSize: 22,
      cursor: "pointer",
      margin: "0 5px 0 -6px",
      "&:hover": {
        color: e.alpha((e.vars || e).palette.text.primary, 0.4)
      }
    },
    variants: [{
      props: {
        size: "small"
      },
      style: {
        height: 24,
        [`& .${Pe.icon}`]: {
          fontSize: 18,
          marginLeft: 4,
          marginRight: -4
        },
        [`& .${Pe.deleteIcon}`]: {
          fontSize: 16,
          marginRight: 4,
          marginLeft: -4
        }
      }
    }, ...Object.entries(e.palette).filter(Mt(["contrastText"])).map(([n]) => ({
      props: {
        color: n
      },
      style: {
        backgroundColor: (e.vars || e).palette[n].main,
        color: (e.vars || e).palette[n].contrastText,
        [`& .${Pe.deleteIcon}`]: {
          color: e.alpha((e.vars || e).palette[n].contrastText, 0.7),
          "&:hover, &:active": {
            color: (e.vars || e).palette[n].contrastText
          }
        }
      }
    })), {
      props: (n) => n.iconColor === n.color,
      style: {
        [`& .${Pe.icon}`]: {
          color: e.vars ? e.vars.palette.Chip.defaultIconColor : t
        }
      }
    }, {
      props: (n) => n.iconColor === n.color && n.color !== "default",
      style: {
        [`& .${Pe.icon}`]: {
          color: "inherit"
        }
      }
    }, {
      props: {
        onDelete: !0
      },
      style: {
        [`&.${Pe.focusVisible}`]: {
          backgroundColor: e.alpha((e.vars || e).palette.action.selected, `${(e.vars || e).palette.action.selectedOpacity} + ${(e.vars || e).palette.action.focusOpacity}`)
        }
      }
    }, ...Object.entries(e.palette).filter(Mt(["dark"])).map(([n]) => ({
      props: {
        color: n,
        onDelete: !0
      },
      style: {
        [`&.${Pe.focusVisible}`]: {
          background: (e.vars || e).palette[n].dark
        }
      }
    })), {
      props: {
        clickable: !0
      },
      style: {
        userSelect: "none",
        WebkitTapHighlightColor: "transparent",
        cursor: "pointer",
        "&:hover": {
          backgroundColor: e.alpha((e.vars || e).palette.action.selected, `${(e.vars || e).palette.action.selectedOpacity} + ${(e.vars || e).palette.action.hoverOpacity}`)
        },
        [`&.${Pe.focusVisible}`]: {
          backgroundColor: e.alpha((e.vars || e).palette.action.selected, `${(e.vars || e).palette.action.selectedOpacity} + ${(e.vars || e).palette.action.focusOpacity}`)
        },
        "&:active": {
          boxShadow: (e.vars || e).shadows[1]
        }
      }
    }, ...Object.entries(e.palette).filter(Mt(["dark"])).map(([n]) => ({
      props: {
        color: n,
        clickable: !0
      },
      style: {
        [`&:hover, &.${Pe.focusVisible}`]: {
          backgroundColor: (e.vars || e).palette[n].dark
        }
      }
    })), {
      props: {
        variant: "outlined"
      },
      style: {
        backgroundColor: "transparent",
        border: e.vars ? `1px solid ${e.vars.palette.Chip.defaultBorder}` : `1px solid ${e.palette.mode === "light" ? e.palette.grey[400] : e.palette.grey[700]}`,
        [`&.${Pe.clickable}:hover`]: {
          backgroundColor: (e.vars || e).palette.action.hover
        },
        [`&.${Pe.focusVisible}`]: {
          backgroundColor: (e.vars || e).palette.action.focus
        },
        [`& .${Pe.avatar}`]: {
          marginLeft: 4
        },
        [`& .${Pe.avatarSmall}`]: {
          marginLeft: 2
        },
        [`& .${Pe.icon}`]: {
          marginLeft: 4
        },
        [`& .${Pe.iconSmall}`]: {
          marginLeft: 2
        },
        [`& .${Pe.deleteIcon}`]: {
          marginRight: 5
        },
        [`& .${Pe.deleteIconSmall}`]: {
          marginRight: 3
        }
      }
    }, ...Object.entries(e.palette).filter(Mt()).map(([n]) => ({
      props: {
        variant: "outlined",
        color: n
      },
      style: {
        color: (e.vars || e).palette[n].main,
        border: `1px solid ${e.alpha((e.vars || e).palette[n].main, 0.7)}`,
        [`&.${Pe.clickable}:hover`]: {
          backgroundColor: e.alpha((e.vars || e).palette[n].main, (e.vars || e).palette.action.hoverOpacity)
        },
        [`&.${Pe.focusVisible}`]: {
          backgroundColor: e.alpha((e.vars || e).palette[n].main, (e.vars || e).palette.action.focusOpacity)
        },
        [`& .${Pe.deleteIcon}`]: {
          color: e.alpha((e.vars || e).palette[n].main, 0.7),
          "&:hover, &:active": {
            color: (e.vars || e).palette[n].main
          }
        }
      }
    }))]
  };
})), tS = Q("span", {
  name: "MuiChip",
  slot: "Label",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e, {
      size: r
    } = n;
    return [t.label, t[`label${le(r)}`]];
  }
})({
  overflow: "hidden",
  textOverflow: "ellipsis",
  paddingLeft: 12,
  paddingRight: 12,
  whiteSpace: "nowrap",
  variants: [{
    props: {
      variant: "outlined"
    },
    style: {
      paddingLeft: 11,
      paddingRight: 11
    }
  }, {
    props: {
      size: "small"
    },
    style: {
      paddingLeft: 8,
      paddingRight: 8
    }
  }, {
    props: {
      size: "small",
      variant: "outlined"
    },
    style: {
      paddingLeft: 7,
      paddingRight: 7
    }
  }]
});
function _u(e) {
  return e.key === "Backspace" || e.key === "Delete";
}
const Np = /* @__PURE__ */ x.forwardRef(function(t, n) {
  const r = Ae({
    props: t,
    name: "MuiChip"
  }), {
    avatar: s,
    className: i,
    clickable: a,
    color: l = "default",
    component: c,
    deleteIcon: u,
    disabled: d = !1,
    icon: f,
    label: y,
    onClick: g,
    onDelete: h,
    onKeyDown: p,
    onKeyUp: m,
    size: b = "medium",
    variant: C = "filled",
    tabIndex: O,
    skipFocusWhenDisabled: w = !1,
    // TODO v6: Rename to `focusableWhenDisabled`.
    slots: S = {},
    slotProps: P = {},
    ...M
  } = r, F = x.useRef(null), A = Ne(F, n), $ = (ee) => {
    ee.stopPropagation(), h && h(ee);
  }, k = (ee) => {
    ee.currentTarget === ee.target && _u(ee) && ee.preventDefault(), p && p(ee);
  }, v = (ee) => {
    ee.currentTarget === ee.target && h && _u(ee) && h(ee), m && m(ee);
  }, D = a !== !1 && g ? !0 : a, T = D || h ? Vr : c || "div", I = {
    ...r,
    component: T,
    disabled: d,
    size: b,
    color: l,
    iconColor: /* @__PURE__ */ x.isValidElement(f) && f.props.color || l,
    onDelete: !!h,
    clickable: D,
    variant: C
  }, N = Jw(I), _ = T === Vr ? {
    component: c || "div",
    focusVisibleClassName: N.focusVisible,
    ...h && {
      disableRipple: !0
    }
  } : {};
  let G = null;
  h && (G = u && /* @__PURE__ */ x.isValidElement(u) ? /* @__PURE__ */ x.cloneElement(u, {
    className: pe(u.props.className, N.deleteIcon),
    onClick: $
  }) : /* @__PURE__ */ E.jsx(Qw, {
    className: N.deleteIcon,
    onClick: $
  }));
  let L = null;
  s && /* @__PURE__ */ x.isValidElement(s) && (L = /* @__PURE__ */ x.cloneElement(s, {
    className: pe(N.avatar, s.props.className)
  }));
  let V = null;
  f && /* @__PURE__ */ x.isValidElement(f) && (V = /* @__PURE__ */ x.cloneElement(f, {
    className: pe(N.icon, f.props.className)
  })), process.env.NODE_ENV !== "production" && L && V && console.error("MUI: The Chip component can not handle the avatar and the icon prop at the same time. Pick one.");
  const R = {
    slots: S,
    slotProps: P
  }, [B, H] = Xe("root", {
    elementType: eS,
    externalForwardedProps: {
      ...R,
      ...M
    },
    ownerState: I,
    // The `component` prop is preserved because `Chip` relies on it for internal logic. If `shouldForwardComponentProp` were `false`, `useSlot` would remove the `component` prop, potentially breaking the component's behavior.
    shouldForwardComponentProp: !0,
    ref: A,
    className: pe(N.root, i),
    additionalProps: {
      disabled: D && d ? !0 : void 0,
      tabIndex: w && d ? -1 : O,
      ..._
    },
    getSlotProps: (ee) => ({
      ...ee,
      onClick: (J) => {
        ee.onClick?.(J), g?.(J);
      },
      onKeyDown: (J) => {
        ee.onKeyDown?.(J), k(J);
      },
      onKeyUp: (J) => {
        ee.onKeyUp?.(J), v(J);
      }
    })
  }), [K, te] = Xe("label", {
    elementType: tS,
    externalForwardedProps: R,
    ownerState: I,
    className: N.label
  });
  return /* @__PURE__ */ E.jsxs(B, {
    as: T,
    ...H,
    children: [L || V, /* @__PURE__ */ E.jsx(K, {
      ...te,
      children: y
    }), G]
  });
});
process.env.NODE_ENV !== "production" && (Np.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The Avatar element to display.
   */
  avatar: o.element,
  /**
   * This prop isn't supported.
   * Use the `component` prop if you need to change the children structure.
   */
  children: rw,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: o.object,
  /**
   * @ignore
   */
  className: o.string,
  /**
   * If `true`, the chip will appear clickable, and will raise when pressed,
   * even if the onClick prop is not defined.
   * If `false`, the chip will not appear clickable, even if onClick prop is defined.
   * This can be used, for example,
   * along with the component prop to indicate an anchor Chip is clickable.
   * Note: this controls the UI and does not affect the onClick event.
   */
  clickable: o.bool,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * @default 'default'
   */
  color: o.oneOfType([o.oneOf(["default", "primary", "secondary", "error", "info", "success", "warning"]), o.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: o.elementType,
  /**
   * Override the default delete icon element. Shown only if `onDelete` is set.
   */
  deleteIcon: o.element,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: o.bool,
  /**
   * Icon element.
   */
  icon: o.element,
  /**
   * The content of the component.
   */
  label: o.node,
  /**
   * @ignore
   */
  onClick: o.func,
  /**
   * Callback fired when the delete icon is clicked.
   * If set, the delete icon will be shown.
   */
  onDelete: o.func,
  /**
   * @ignore
   */
  onKeyDown: o.func,
  /**
   * @ignore
   */
  onKeyUp: o.func,
  /**
   * The size of the component.
   * @default 'medium'
   */
  size: o.oneOfType([o.oneOf(["medium", "small"]), o.string]),
  /**
   * If `true`, allows the disabled chip to escape focus.
   * If `false`, allows the disabled chip to receive focus.
   * @default false
   */
  skipFocusWhenDisabled: o.bool,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: o.shape({
    label: o.oneOfType([o.func, o.object]),
    root: o.oneOfType([o.func, o.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: o.shape({
    label: o.elementType,
    root: o.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: o.oneOfType([o.arrayOf(o.oneOfType([o.func, o.object, o.bool])), o.func, o.object]),
  /**
   * @ignore
   */
  tabIndex: o.number,
  /**
   * The variant to use.
   * @default 'filled'
   */
  variant: o.oneOfType([o.oneOf(["filled", "outlined"]), o.string])
});
const Ao = 36, wi = 2, Si = 320, nS = 280, $l = 336, rS = ["items", "changeImportance"], oS = ["getValue"], sS = Q(Al, {
  name: "MuiPickersLayout",
  slot: "Shortcuts"
})({});
function Ap(e) {
  const {
    items: t,
    changeImportance: n = "accept"
  } = e, r = Ee(e, rS), {
    setValue: s
  } = Vv(), i = Ov();
  if (t == null || t.length === 0)
    return null;
  const a = t.map((l) => {
    let {
      getValue: c
    } = l, u = Ee(l, oS);
    const d = c({
      isValid: i
    });
    return j({}, u, {
      label: u.label,
      onClick: () => {
        s(d, {
          changeImportance: n,
          shortcut: u
        });
      },
      disabled: !i(d)
    });
  });
  return /* @__PURE__ */ E.jsx(sS, j({
    dense: !0,
    sx: [{
      maxHeight: $l,
      maxWidth: 200,
      overflow: "auto"
    }, ...Array.isArray(r.sx) ? r.sx : [r.sx]]
  }, r, {
    children: a.map((l) => /* @__PURE__ */ E.jsx(Ip, {
      children: /* @__PURE__ */ E.jsx(Np, j({}, l))
    }, l.id ?? l.label))
  }));
}
process.env.NODE_ENV !== "production" && (Ap.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Importance of the change when picking a shortcut:
   * - "accept": fires `onChange`, fires `onAccept` and closes the Picker.
   * - "set": fires `onChange` but do not fire `onAccept` and does not close the Picker.
   * @default "accept"
   */
  changeImportance: o.oneOf(["accept", "set"]),
  className: o.string,
  component: o.elementType,
  /**
   * If `true`, compact vertical padding designed for keyboard and mouse input is used for
   * the list and list items.
   * The prop is available to descendant components as the `dense` context.
   * @default false
   */
  dense: o.bool,
  /**
   * If `true`, vertical padding is removed from the list.
   * @default false
   */
  disablePadding: o.bool,
  /**
   * Ordered array of shortcuts to display.
   * If empty, does not display the shortcuts.
   * @default []
   */
  items: o.arrayOf(o.shape({
    getValue: o.func.isRequired,
    id: o.string,
    label: o.string.isRequired
  })),
  style: o.object,
  /**
   * The content of the subheader, normally `ListSubheader`.
   */
  subheader: o.node,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: o.oneOfType([o.arrayOf(o.oneOfType([o.func, o.object, o.bool])), o.func, o.object])
});
const iS = ["ownerState"];
function aS(e) {
  return e.view !== null;
}
const lS = (e, t) => {
  const {
    pickerOrientation: n
  } = t;
  return be({
    root: ["root", n === "landscape" && "landscape"],
    contentWrapper: ["contentWrapper"],
    toolbar: ["toolbar"],
    actionBar: ["actionBar"],
    tabs: ["tabs"],
    landscape: ["landscape"],
    shortcuts: ["shortcuts"]
  }, Sp, e);
}, cS = (e) => {
  const {
    ownerState: t,
    defaultActionBarActions: n
  } = gt(), {
    view: r
  } = Ur(), s = Ut(), {
    children: i,
    slots: a,
    slotProps: l,
    classes: c
  } = e, u = x.useMemo(() => j({}, t, {
    layoutDirection: s ? "rtl" : "ltr",
    hasShortcuts: !1
  }), [t, s]), d = lS(c, u), f = a?.actionBar ?? Mp, y = Ie({
    elementType: f,
    externalSlotProps: l?.actionBar,
    additionalProps: {
      actions: n
    },
    className: d.actionBar,
    ownerState: u
  }), g = Ee(y, iS), h = /* @__PURE__ */ E.jsx(f, j({}, g)), p = a?.toolbar, m = Ie({
    elementType: p,
    externalSlotProps: l?.toolbar,
    className: d.toolbar,
    ownerState: u
  }), b = aS(m) && p ? /* @__PURE__ */ E.jsx(p, j({}, m)) : null, C = i, O = a?.tabs, w = r && O ? /* @__PURE__ */ E.jsx(O, j({
    className: d.tabs
  }, l?.tabs)) : null, S = a?.shortcuts ?? Ap, P = Ie({
    elementType: S,
    externalSlotProps: l?.shortcuts,
    className: d.shortcuts,
    ownerState: u
  }), M = Array.isArray(P?.items) && P.items.length > 0, F = r && S ? /* @__PURE__ */ E.jsx(S, j({}, P)) : null;
  return {
    toolbar: b,
    content: C,
    tabs: w,
    actionBar: h,
    shortcuts: F,
    ownerState: j({}, u, {
      hasShortcuts: M
    })
  };
}, uS = (e, t) => {
  const {
    pickerOrientation: n
  } = t;
  return be({
    root: ["root", n === "landscape" && "landscape"],
    contentWrapper: ["contentWrapper"]
  }, Sp, e);
}, dS = Q("div", {
  name: "MuiPickersLayout",
  slot: "Root"
})({
  display: "grid",
  gridAutoColumns: "max-content auto max-content",
  gridAutoRows: "max-content auto max-content",
  [`& .${Un.actionBar}`]: {
    gridColumn: "1 / 4",
    gridRow: 3
  },
  variants: [{
    props: {
      pickerOrientation: "landscape",
      hasShortcuts: !1
    },
    style: {
      [`& .${Un.toolbar}`]: {
        gridColumn: 1,
        gridRow: "1 / 3"
      }
    }
  }, {
    props: {
      pickerOrientation: "landscape",
      hasShortcuts: !0
    },
    style: {
      [`& .${Un.toolbar}`]: {
        gridColumn: "2 / 4",
        gridRow: 1,
        maxWidth: "max-content"
      },
      [`& .${Un.shortcuts}`]: {
        gridColumn: 1,
        gridRow: 2
      }
    }
  }, {
    props: {
      pickerOrientation: "portrait"
    },
    style: {
      [`& .${Un.toolbar}`]: {
        gridColumn: "2 / 4",
        gridRow: 1
      },
      [`& .${Un.shortcuts}`]: {
        gridColumn: 1,
        gridRow: "2 / 3"
      }
    }
  }, {
    props: {
      hasShortcuts: !0,
      layoutDirection: "rtl"
    },
    style: {
      [`& .${Un.shortcuts}`]: {
        gridColumn: 4
      }
    }
  }]
}), fS = Q("div", {
  name: "MuiPickersLayout",
  slot: "ContentWrapper"
})({
  gridColumn: "2 / 4",
  gridRow: 2,
  display: "flex",
  flexDirection: "column"
}), Ei = /* @__PURE__ */ x.forwardRef(function(t, n) {
  const r = Ze({
    props: t,
    name: "MuiPickersLayout"
  }), {
    toolbar: s,
    content: i,
    tabs: a,
    actionBar: l,
    shortcuts: c,
    ownerState: u
  } = cS(r), {
    orientation: d,
    variant: f
  } = Ur(), {
    sx: y,
    className: g,
    classes: h
  } = r, p = uS(h, u);
  return /* @__PURE__ */ E.jsxs(dS, {
    ref: n,
    sx: y,
    className: pe(p.root, g),
    ownerState: u,
    children: [d === "landscape" ? c : s, d === "landscape" ? s : c, /* @__PURE__ */ E.jsx(fS, {
      className: p.contentWrapper,
      ownerState: u,
      children: f === "desktop" ? /* @__PURE__ */ E.jsxs(x.Fragment, {
        children: [i, a]
      }) : /* @__PURE__ */ E.jsxs(x.Fragment, {
        children: [a, i]
      })
    }), l]
  });
});
process.env.NODE_ENV !== "production" && (Ei.displayName = "PickersLayout");
process.env.NODE_ENV !== "production" && (Ei.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  children: o.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: o.object,
  className: o.string,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: o.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: o.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: o.oneOfType([o.arrayOf(o.oneOfType([o.func, o.object, o.bool])), o.func, o.object])
});
function Fp(e) {
  const {
    steps: t
  } = e;
  return G0({
    steps: t,
    isViewMatchingStep: (n, r) => r.views == null || r.views.includes(n),
    onStepChange: ({
      step: n,
      defaultView: r,
      setView: s,
      view: i,
      views: a
    }) => {
      const l = n.views == null ? r : n.views.find((c) => a.includes(c));
      l !== i && s(l);
    }
  });
}
const pS = ["props", "steps"], hS = ["ownerState"], mS = (e) => {
  let {
    props: t,
    steps: n
  } = e, r = Ee(e, pS);
  const {
    slots: s,
    slotProps: i,
    label: a,
    inputRef: l,
    localeText: c
  } = t, u = Fp({
    steps: n
  }), {
    providerProps: d,
    renderCurrentView: f,
    ownerState: y
  } = wp(j({}, r, {
    props: t,
    localeText: c,
    autoFocusView: !0,
    viewContainerRole: "dialog",
    variant: "desktop",
    getStepNavigation: u
  })), g = d.privateContextValue.labelId, h = i?.toolbar?.hidden ?? !1, p = s.field, m = Ie({
    elementType: p,
    externalSlotProps: i?.field,
    additionalProps: j({}, h && {
      id: g
    }),
    ownerState: y
  }), b = Ee(m, hS), C = s.layout ?? Ei;
  let O = g;
  h && (a ? O = `${g}-label` : O = void 0);
  const w = j({}, i, {
    toolbar: j({}, i?.toolbar, {
      titleId: g
    }),
    popper: j({
      "aria-labelledby": O
    }, i?.popper)
  }), S = () => /* @__PURE__ */ E.jsxs(Lf, j({}, d, {
    children: [/* @__PURE__ */ E.jsx(p, j({}, b, {
      slots: s,
      slotProps: w,
      inputRef: l
    })), /* @__PURE__ */ E.jsx(H0, {
      slots: s,
      slotProps: w,
      children: /* @__PURE__ */ E.jsx(C, j({}, w?.layout, {
        slots: s,
        slotProps: w,
        children: f()
      }))
    })]
  }));
  return process.env.NODE_ENV !== "production" && (S.displayName = "renderPicker"), {
    renderPicker: S
  };
}, xr = (e) => e.saveQuery != null, $p = ({
  stateResponse: {
    // States and derived states
    localizedDigits: e,
    sectionsValueBoundaries: t,
    state: n,
    timezone: r,
    // Methods to update the states
    setCharacterQuery: s,
    setTempAndroidValueStr: i,
    updateSectionValue: a
  }
}) => {
  const l = He(), c = ({
    keyPressed: f,
    sectionIndex: y
  }, g, h) => {
    const p = f.toLowerCase(), m = n.sections[y];
    if (n.characterQuery != null && (!h || h(n.characterQuery.value)) && n.characterQuery.sectionIndex === y) {
      const C = `${n.characterQuery.value}${p}`, O = g(C, m);
      if (!xr(O))
        return s({
          sectionIndex: y,
          value: C,
          sectionType: m.type
        }), O;
    }
    const b = g(p, m);
    return xr(b) && !b.saveQuery ? (s(null), null) : (s({
      sectionIndex: y,
      value: p,
      sectionType: m.type
    }), xr(b) ? null : b);
  }, u = (f) => {
    const y = (p, m, b) => {
      const C = m.filter((O) => O.toLowerCase().startsWith(b));
      return C.length === 0 ? {
        saveQuery: !1
      } : {
        sectionValue: C[0],
        shouldGoToNextSection: C.length === 1
      };
    }, g = (p, m, b, C) => {
      const O = (w) => Ff(l, r, m.type, w);
      if (m.contentType === "letter")
        return y(m.format, O(m.format), p);
      if (b && C != null && dl(l, b).contentType === "letter") {
        const w = O(b), S = y(b, w, p);
        return xr(S) ? {
          saveQuery: !1
        } : j({}, S, {
          sectionValue: C(S.sectionValue, w)
        });
      }
      return {
        saveQuery: !1
      };
    };
    return c(f, (p, m) => {
      switch (m.type) {
        case "month": {
          const b = (C) => uu(l, C, l.formats.month, m.format);
          return g(p, m, l.formats.month, b);
        }
        case "weekDay": {
          const b = (C, O) => O.indexOf(C).toString();
          return g(p, m, l.formats.weekday, b);
        }
        case "meridiem":
          return g(p, m);
        default:
          return {
            saveQuery: !1
          };
      }
    });
  }, d = (f) => {
    const y = ({
      queryValue: h,
      skipIfBelowMinimum: p,
      section: m
    }) => {
      const b = cr(h, e), C = Number(b), O = t[m.type]({
        currentDate: null,
        format: m.format,
        contentType: m.contentType
      });
      if (C > O.maximum)
        return {
          saveQuery: !1
        };
      if (p && C < O.minimum)
        return {
          saveQuery: !0
        };
      const w = C * 10 > O.maximum || b.length === O.maximum.toString().length;
      return {
        sectionValue: $f(l, C, O, e, m),
        shouldGoToNextSection: w
      };
    };
    return c(f, (h, p) => {
      if (p.contentType === "digit" || p.contentType === "digit-with-letter")
        return y({
          queryValue: h,
          skipIfBelowMinimum: !1,
          section: p
        });
      if (p.type === "month") {
        jf(l, "digit", "month", "MM");
        const m = y({
          queryValue: h,
          skipIfBelowMinimum: !0,
          section: {
            type: p.type,
            format: "MM",
            hasLeadingZerosInInput: !0,
            contentType: "digit",
            maxLength: 2
          }
        });
        if (xr(m))
          return m;
        const b = uu(l, m.sectionValue, "MM", p.format);
        return j({}, m, {
          sectionValue: b
        });
      }
      if (p.type === "weekDay") {
        const m = y({
          queryValue: h,
          skipIfBelowMinimum: !0,
          section: p
        });
        if (xr(m))
          return m;
        const b = hi(l, p.format)[Number(m.sectionValue) - 1];
        return j({}, m, {
          sectionValue: b
        });
      }
      return {
        saveQuery: !1
      };
    }, (h) => cu(h, e));
  };
  return de((f) => {
    const y = n.sections[f.sectionIndex], h = cu(f.keyPressed, e) ? d(j({}, f, {
      keyPressed: fl(f.keyPressed, e)
    })) : u(f);
    if (h == null) {
      i(null);
      return;
    }
    a({
      section: y,
      newSectionValue: h.sectionValue,
      shouldGoToNextSection: h.shouldGoToNextSection
    });
  });
}, yS = 5e3, jp = (e) => {
  const t = He(), n = Ln(), r = Ut(), {
    manager: {
      validator: s,
      valueType: i,
      internal_valueManager: a,
      internal_fieldValueManager: l
    },
    internalPropsWithDefaults: c,
    internalPropsWithDefaults: {
      value: u,
      defaultValue: d,
      referenceDate: f,
      onChange: y,
      format: g,
      formatDensity: h = "dense",
      selectedSections: p,
      onSelectedSectionsChange: m,
      shouldRespectLeadingZeros: b = !1,
      timezone: C,
      enableAccessibleFieldDOMStructure: O = !0
    },
    forwardedProps: {
      error: w
    }
  } = e, {
    value: S,
    handleValueChange: P,
    timezone: M
  } = ns({
    name: "a field component",
    timezone: C,
    value: u,
    defaultValue: d,
    referenceDate: f,
    onChange: y,
    valueManager: a
  }), F = x.useRef(S);
  x.useEffect(() => {
    F.current = S;
  }, [S]);
  const {
    hasValidationError: A
  } = Yf({
    props: c,
    validator: s,
    timezone: M,
    value: S,
    onError: c.onError
  }), $ = x.useMemo(() => w !== void 0 ? w : A, [A, w]), k = x.useMemo(() => nv(t), [t]), v = x.useMemo(() => av(t, k, M), [t, k, M]), D = x.useCallback((W) => l.getSectionsFromValue(W, (oe) => yu({
    adapter: t,
    localeText: n,
    localizedDigits: k,
    format: g,
    date: oe,
    formatDensity: h,
    shouldRespectLeadingZeros: b,
    enableAccessibleFieldDOMStructure: O,
    isRtl: r
  })), [l, g, n, k, r, b, t, h, O]), [T, I] = x.useState(() => {
    const W = D(S);
    fu(W, i);
    const oe = {
      sections: W,
      lastExternalValue: S,
      lastSectionsDependencies: {
        format: g,
        isRtl: r,
        locale: t.locale
      },
      tempValueStrAndroid: null,
      characterQuery: null
    }, ye = Jb(W), ge = a.getInitialReferenceValue({
      referenceDate: f,
      value: S,
      adapter: t,
      props: c,
      granularity: ye,
      timezone: M
    });
    return j({}, oe, {
      referenceValue: ge
    });
  }), [N, _] = Fn({
    controlled: p,
    default: null,
    name: "useField",
    state: "selectedSections"
  }), G = (W) => {
    _(W), m?.(W);
  }, L = x.useMemo(() => ka(N, T.sections), [N, T.sections]), V = L === "all" ? 0 : L, R = x.useMemo(() => uv(T.sections, r && !O), [T.sections, r, O]), B = x.useMemo(() => T.sections.every((W) => W.value === ""), [T.sections]), H = (W) => {
    const oe = {
      validationError: s({
        adapter: t,
        value: W,
        timezone: M,
        props: c
      })
    };
    P(W, oe);
  }, K = (W, oe) => {
    const ye = [...T.sections];
    return ye[W] = j({}, ye[W], {
      value: oe,
      modified: !0
    }), ye;
  }, te = x.useRef(null), ee = Dn(), J = (W) => {
    V != null && (te.current = {
      sectionIndex: V,
      value: W
    }, ee.start(0, () => {
      te.current = null;
    }));
  }, ie = () => {
    a.areValuesEqual(t, S, a.emptyValue) ? I((W) => j({}, W, {
      sections: W.sections.map((oe) => j({}, oe, {
        value: ""
      })),
      tempValueStrAndroid: null,
      characterQuery: null
    })) : (I((W) => j({}, W, {
      characterQuery: null
    })), H(a.emptyValue));
  }, re = () => {
    if (V == null)
      return;
    const W = T.sections[V];
    W.value !== "" && (J(""), l.getDateFromSection(S, W) === null ? I((oe) => j({}, oe, {
      sections: K(V, ""),
      tempValueStrAndroid: null,
      characterQuery: null
    })) : (I((oe) => j({}, oe, {
      characterQuery: null
    })), H(l.updateDateInValue(S, W, null))));
  }, q = (W) => {
    const oe = (ge, se) => {
      const ce = t.parse(ge, g);
      if (!t.isValid(ce))
        return null;
      const ue = yu({
        adapter: t,
        localeText: n,
        localizedDigits: k,
        format: g,
        date: ce,
        formatDensity: h,
        shouldRespectLeadingZeros: b,
        enableAccessibleFieldDOMStructure: O,
        isRtl: r
      });
      return hu(t, ce, ue, se, !1);
    }, ye = l.parseValueStr(W, T.referenceValue, oe);
    H(ye);
  }, X = Dn(), z = ({
    section: W,
    newSectionValue: oe,
    shouldGoToNextSection: ye
  }) => {
    ee.clear(), X.clear();
    const ge = l.getDateFromSection(S, W);
    ye && V < T.sections.length - 1 && G(V + 1);
    const se = K(V, oe), ce = l.getDateSectionsFromValue(se, W), ue = ov(t, ce, k);
    if (t.isValid(ue)) {
      const ke = hu(t, ue, ce, l.getDateFromSection(T.referenceValue, W), !0);
      return ge == null && X.start(0, () => {
        F.current === S && I((Te) => j({}, Te, {
          sections: l.clearDateSections(T.sections, W),
          tempValueStrAndroid: null
        }));
      }), H(l.updateDateInValue(S, W, ke));
    }
    return ce.every((ke) => ke.value !== "") && (ge == null || t.isValid(ge)) ? (J(oe), H(l.updateDateInValue(S, W, ue))) : ge != null ? (J(oe), H(l.updateDateInValue(S, W, null))) : I((ke) => j({}, ke, {
      sections: se,
      tempValueStrAndroid: null
    }));
  }, ne = (W) => I((oe) => j({}, oe, {
    tempValueStrAndroid: W
  })), Y = de((W) => {
    I((oe) => j({}, oe, {
      characterQuery: W
    }));
  });
  if (S !== T.lastExternalValue) {
    const W = te.current != null && !t.isValid(l.getDateFromSection(S, T.sections[te.current.sectionIndex]));
    let oe;
    W ? oe = K(te.current.sectionIndex, te.current.value) : oe = D(S), I((ye) => j({}, ye, {
      lastExternalValue: S,
      sections: oe,
      sectionsDependencies: {
        format: g,
        isRtl: r,
        locale: t.locale
      },
      referenceValue: W ? ye.referenceValue : l.updateReferenceValue(t, S, ye.referenceValue),
      tempValueStrAndroid: null
    }));
  }
  if (r !== T.lastSectionsDependencies.isRtl || g !== T.lastSectionsDependencies.format || t.locale !== T.lastSectionsDependencies.locale) {
    const W = D(S);
    fu(W, i), I((oe) => j({}, oe, {
      lastSectionsDependencies: {
        format: g,
        isRtl: r,
        locale: t.locale
      },
      sections: W,
      tempValueStrAndroid: null,
      characterQuery: null
    }));
  }
  T.characterQuery != null && !$ && V == null && Y(null), T.characterQuery != null && T.sections[T.characterQuery.sectionIndex]?.type !== T.characterQuery.sectionType && Y(null), x.useEffect(() => {
    te.current != null && (te.current = null);
  });
  const ae = Dn();
  return x.useEffect(() => (T.characterQuery != null && ae.start(yS, () => Y(null)), () => {
  }), [T.characterQuery, Y, ae]), x.useEffect(() => {
    T.tempValueStrAndroid != null && V != null && re();
  }, [T.sections]), {
    // States and derived states
    activeSectionIndex: V,
    areAllSectionsEmpty: B,
    error: $,
    localizedDigits: k,
    parsedSelectedSections: L,
    sectionOrder: R,
    sectionsValueBoundaries: v,
    state: T,
    timezone: M,
    value: S,
    // Methods to update the states
    clearValue: ie,
    clearActiveSection: re,
    setCharacterQuery: Y,
    setSelectedSections: G,
    setTempAndroidValueStr: ne,
    updateSectionValue: z,
    updateValueFromValueStr: q,
    // Utilities methods
    getSectionsFromValue: D
  };
};
function _p(e) {
  const {
    manager: {
      internal_useApplyDefaultValuesToFieldInternalProps: t
    },
    internalProps: n,
    skipContextFieldRefAssignment: r
  } = e, s = xl(), i = Vf(), a = Ne(n.unstableFieldRef, r ? null : i?.fieldRef), l = s?.setValue, c = x.useCallback((d, f) => l?.(d, {
    validationError: f.validationError,
    shouldClose: !1
  }), [l]), u = x.useMemo(() => i != null && s != null ? j({
    value: s.value,
    onChange: c,
    timezone: s.timezone,
    disabled: s.disabled,
    readOnly: s.readOnly,
    autoFocus: s.autoFocus && !s.open,
    focused: s.open ? !0 : void 0,
    format: s.fieldFormat,
    formatDensity: i.formatDensity,
    enableAccessibleFieldDOMStructure: i.enableAccessibleFieldDOMStructure,
    selectedSections: i.selectedSections,
    onSelectedSectionsChange: i.onSelectedSectionsChange,
    unstableFieldRef: a
  }, n) : n, [s, i, n, c, a]);
  return t(u);
}
function jl(e) {
  const {
    focused: t,
    domGetters: n,
    stateResponse: {
      // States and derived states
      parsedSelectedSections: r,
      state: s
    }
  } = e;
  if (!n.isReady())
    return;
  const i = pt(n.getRoot()).getSelection();
  if (!i)
    return;
  if (r == null) {
    i.rangeCount > 0 && // Firefox can return a Restricted object here
    i.getRangeAt(0).startContainer instanceof Node && n.getRoot().contains(i.getRangeAt(0).startContainer) && i.removeAllRanges(), t && n.getRoot().blur();
    return;
  }
  if (!n.getRoot().contains(Et(n.getRoot())))
    return;
  const a = new window.Range();
  let l;
  r === "all" ? l = n.getRoot() : s.sections[r].type === "empty" ? l = n.getSectionContainer(r) : l = n.getSectionContent(r), a.selectNodeContents(l), l.focus(), i.removeAllRanges(), i.addRange(a);
}
function Vp(e) {
  const t = He(), {
    manager: {
      internal_fieldValueManager: n
    },
    internalPropsWithDefaults: {
      minutesStep: r,
      disabled: s,
      readOnly: i
    },
    stateResponse: {
      // States and derived states
      state: a,
      value: l,
      activeSectionIndex: c,
      parsedSelectedSections: u,
      sectionsValueBoundaries: d,
      localizedDigits: f,
      timezone: y,
      sectionOrder: g,
      // Methods to update the states
      clearValue: h,
      clearActiveSection: p,
      setSelectedSections: m,
      updateSectionValue: b
    }
  } = e;
  return de((C) => {
    if (!s)
      switch (!0) {
        // Select all
        case ((C.ctrlKey || C.metaKey) && String.fromCharCode(C.keyCode) === "A" && !C.shiftKey && !C.altKey): {
          C.preventDefault(), m("all");
          break;
        }
        // Move selection to next section
        case C.key === "ArrowRight": {
          if (C.preventDefault(), u == null)
            m(g.startIndex);
          else if (u === "all")
            m(g.endIndex);
          else {
            const O = g.neighbors[u].rightIndex;
            O !== null && m(O);
          }
          break;
        }
        // Move selection to previous section
        case C.key === "ArrowLeft": {
          if (C.preventDefault(), u == null)
            m(g.endIndex);
          else if (u === "all")
            m(g.startIndex);
          else {
            const O = g.neighbors[u].leftIndex;
            O !== null && m(O);
          }
          break;
        }
        // Reset the value of the selected section
        case C.key === "Delete": {
          if (C.preventDefault(), i)
            break;
          u == null || u === "all" ? h() : p();
          break;
        }
        // Increment / decrement the selected section value
        case ["ArrowUp", "ArrowDown", "Home", "End", "PageUp", "PageDown"].includes(C.key): {
          if (C.preventDefault(), i || c == null)
            break;
          u === "all" && m(c);
          const O = a.sections[c], w = bS(t, y, O, C.key, d, f, n.getDateFromSection(l, O), {
            minutesStep: r
          });
          b({
            section: O,
            newSectionValue: w,
            shouldGoToNextSection: !1
          });
          break;
        }
      }
  });
}
function gS(e) {
  switch (e) {
    case "ArrowUp":
      return 1;
    case "ArrowDown":
      return -1;
    case "PageUp":
      return 5;
    case "PageDown":
      return -5;
    default:
      return 0;
  }
}
function bS(e, t, n, r, s, i, a, l) {
  const c = gS(r), u = r === "Home", d = r === "End", f = n.value === "" || u || d, y = () => {
    const h = s[n.type]({
      currentDate: a,
      format: n.format,
      contentType: n.contentType
    }), p = (C) => $f(e, C, h, i, n), m = n.type === "minutes" && l?.minutesStep ? l.minutesStep : 1;
    let b;
    if (f) {
      if (n.type === "year" && !d && !u)
        return e.formatByString(e.date(void 0, t), n.format);
      c > 0 || u ? b = h.minimum : b = h.maximum;
    } else
      b = parseInt(cr(n.value, i), 10) + c * m;
    return b % m !== 0 && ((c < 0 || u) && (b += m - (m + b) % m), (c > 0 || d) && (b -= b % m)), b > h.maximum ? p(h.minimum + (b - h.maximum - 1) % (h.maximum - h.minimum + 1)) : b < h.minimum ? p(h.maximum - (h.minimum - b - 1) % (h.maximum - h.minimum + 1)) : p(b);
  }, g = () => {
    const h = Ff(e, t, n.type, n.format);
    if (h.length === 0)
      return n.value;
    if (f)
      return c > 0 || u ? h[0] : h[h.length - 1];
    const b = ((h.indexOf(n.value) + c) % h.length + h.length) % h.length;
    return h[b];
  };
  return n.contentType === "digit" || n.contentType === "digit-with-letter" ? y() : g();
}
function vS(e) {
  const {
    manager: t,
    focused: n,
    setFocused: r,
    domGetters: s,
    stateResponse: i,
    applyCharacterEditing: a,
    internalPropsWithDefaults: l,
    stateResponse: {
      // States and derived states
      parsedSelectedSections: c,
      sectionOrder: u,
      state: d,
      // Methods to update the states
      clearValue: f,
      setCharacterQuery: y,
      setSelectedSections: g,
      updateValueFromValueStr: h
    },
    internalPropsWithDefaults: {
      disabled: p = !1,
      readOnly: m = !1
    }
  } = e, b = Vp({
    manager: t,
    internalPropsWithDefaults: l,
    stateResponse: i
  }), C = Dn(), O = de((F) => {
    p || !s.isReady() || (r(!0), c === "all" ? C.start(0, () => {
      const A = document.getSelection().getRangeAt(0).startOffset;
      if (A === 0) {
        g(u.startIndex);
        return;
      }
      let $ = 0, k = 0;
      for (; k < A && $ < d.sections.length; ) {
        const v = d.sections[$];
        $ += 1, k += `${v.startSeparator}${v.value || v.placeholder}${v.endSeparator}`.length;
      }
      g($ - 1);
    }) : n ? s.getRoot().contains(F.target) || g(u.startIndex) : (r(!0), g(u.startIndex)));
  }), w = de((F) => {
    if (!s.isReady() || c !== "all")
      return;
    const $ = F.target.textContent ?? "";
    s.getRoot().innerHTML = d.sections.map((k) => `${k.startSeparator}${k.value || k.placeholder}${k.endSeparator}`).join(""), jl({
      focused: n,
      domGetters: s,
      stateResponse: i
    }), $.length === 0 || $.charCodeAt(0) === 10 ? (f(), g("all")) : $.length > 1 ? h($) : (c === "all" && g(0), a({
      keyPressed: $,
      sectionIndex: 0
    }));
  }), S = de((F) => {
    if (m || c !== "all") {
      F.preventDefault();
      return;
    }
    const A = F.clipboardData.getData("text");
    F.preventDefault(), y(null), h(A);
  }), P = de(() => {
    if (n || p || !s.isReady())
      return;
    const F = Et(s.getRoot());
    r(!0), s.getSectionIndexFromDOMElement(F) != null || g(u.startIndex);
  }), M = de(() => {
    setTimeout(() => {
      if (!s.isReady())
        return;
      const F = Et(s.getRoot());
      !s.getRoot().contains(F) && (r(!1), g(null));
    });
  });
  return {
    // Event handlers
    onKeyDown: b,
    onBlur: M,
    onFocus: P,
    onClick: O,
    onPaste: S,
    onInput: w,
    // Other
    contentEditable: c === "all",
    tabIndex: l.disabled || c === 0 ? -1 : 0
    // TODO: Try to set to undefined when there is a section selected.
  };
}
function xS(e) {
  const {
    manager: {
      internal_fieldValueManager: t
    },
    stateResponse: {
      // States and derived states
      areAllSectionsEmpty: n,
      state: r,
      // Methods to update the states
      updateValueFromValueStr: s
    }
  } = e, i = de((l) => {
    s(l.target.value);
  });
  return {
    value: x.useMemo(() => n ? "" : t.getV7HiddenInputValueFromSections(r.sections), [n, r.sections, t]),
    onChange: i
  };
}
function wS(e) {
  const {
    stateResponse: {
      // Methods to update the states
      setSelectedSections: t
    },
    internalPropsWithDefaults: {
      disabled: n = !1
    }
  } = e, r = x.useCallback((s) => (i) => {
    n || i.isDefaultPrevented() || t(s);
  }, [n, t]);
  return x.useCallback((s) => ({
    "data-sectionindex": s,
    onClick: r(s)
  }), [r]);
}
function SS(e) {
  const t = He(), n = Ln(), {
    focused: r,
    domGetters: s,
    stateResponse: i,
    applyCharacterEditing: a,
    manager: {
      internal_fieldValueManager: l
    },
    stateResponse: {
      // States and derived states
      parsedSelectedSections: c,
      sectionsValueBoundaries: u,
      state: d,
      value: f,
      // Methods to update the states
      clearActiveSection: y,
      setCharacterQuery: g,
      setSelectedSections: h,
      updateSectionValue: p,
      updateValueFromValueStr: m
    },
    internalPropsWithDefaults: {
      disabled: b = !1,
      readOnly: C = !1
    }
  } = e, O = c === "all", w = !O && !b && !C, S = de((k) => {
    if (!s.isReady())
      return;
    const v = d.sections[k];
    s.getSectionContent(k).innerHTML = v.value || v.placeholder, jl({
      focused: r,
      domGetters: s,
      stateResponse: i
    });
  }), P = de((k) => {
    if (!s.isReady())
      return;
    const v = k.target, D = v.textContent ?? "", T = s.getSectionIndexFromDOMElement(v), I = d.sections[T];
    if (C) {
      S(T);
      return;
    }
    if (D.length === 0) {
      if (I.value === "") {
        S(T);
        return;
      }
      const N = k.nativeEvent.inputType;
      if (N === "insertParagraph" || N === "insertLineBreak") {
        S(T);
        return;
      }
      S(T), y();
      return;
    }
    a({
      keyPressed: D,
      sectionIndex: T
    }), S(T);
  }), M = de((k) => {
    k.preventDefault();
  }), F = de((k) => {
    if (k.preventDefault(), C || b || typeof c != "number")
      return;
    const v = d.sections[c], D = k.clipboardData.getData("text"), T = /^[a-zA-Z]+$/.test(D), I = /^[0-9]+$/.test(D), N = /^(([a-zA-Z]+)|)([0-9]+)(([a-zA-Z]+)|)$/.test(D);
    v.contentType === "letter" && T || v.contentType === "digit" && I || v.contentType === "digit-with-letter" && N ? (g(null), p({
      section: v,
      newSectionValue: D,
      shouldGoToNextSection: !0
    })) : !T && !I && (g(null), m(D));
  }), A = de((k) => {
    k.preventDefault(), k.dataTransfer.dropEffect = "none";
  }), $ = x.useCallback((k) => () => {
    b || h(k);
  }, [b, h]);
  return x.useCallback((k, v) => {
    const D = u[k.type]({
      currentDate: l.getDateFromSection(f, k),
      contentType: k.contentType,
      format: k.format
    });
    return {
      // Event handlers
      onInput: P,
      onPaste: F,
      onMouseUp: M,
      onDragOver: A,
      onFocus: $(v),
      // Aria attributes
      "aria-readonly": C,
      "aria-valuenow": OS(k, t),
      "aria-valuemin": D.minimum,
      "aria-valuemax": D.maximum,
      "aria-valuetext": k.value ? ES(k, t) : n.empty,
      "aria-label": n[k.type],
      "aria-disabled": b,
      // Other
      tabIndex: !w || O || v > 0 ? -1 : 0,
      contentEditable: !O && !b && !C,
      role: "spinbutton",
      "data-range-position": k.dateName || void 0,
      spellCheck: w ? !1 : void 0,
      // Firefox hydrates this as `'none`' instead of `'off'`. No problems in chromium with both values.
      // For reference https://github.com/mui/mui-x/issues/19012
      autoCapitalize: w ? "none" : void 0,
      autoCorrect: w ? "off" : void 0,
      children: k.value || k.placeholder,
      inputMode: k.contentType === "letter" ? "text" : "numeric"
    };
  }, [u, O, b, C, w, n, t, P, F, M, A, $, l, f]);
}
function ES(e, t) {
  if (e.value)
    switch (e.type) {
      case "month": {
        if (e.contentType === "digit") {
          const r = t.setMonth(t.date(), Number(e.value) - 1);
          return t.isValid(r) ? t.format(r, "month") : "";
        }
        const n = t.parse(e.value, e.format);
        return n && t.isValid(n) ? t.format(n, "month") : void 0;
      }
      case "day":
        if (e.contentType === "digit") {
          const n = t.setDate(t.startOfYear(t.date()), Number(e.value));
          return t.isValid(n) ? t.format(n, "dayOfMonthFull") : "";
        }
        return e.value;
      case "weekDay":
        return;
      default:
        return;
    }
}
function OS(e, t) {
  if (e.value)
    switch (e.type) {
      case "weekDay":
        return e.contentType === "letter" ? void 0 : Number(e.value);
      case "meridiem": {
        const n = t.parse(`01:00 ${e.value}`, `${t.formats.hours12h}:${t.formats.minutes} ${e.format}`);
        return n ? t.getHours(n) >= 12 ? 1 : 0 : void 0;
      }
      case "day":
        return e.contentType === "digit-with-letter" ? parseInt(e.value, 10) : Number(e.value);
      case "month": {
        if (e.contentType === "digit")
          return Number(e.value);
        const n = t.parse(e.value, e.format);
        return n ? t.getMonth(n) + 1 : void 0;
      }
      default:
        return e.contentType !== "letter" ? Number(e.value) : void 0;
    }
}
const CS = (e) => {
  const {
    props: t,
    manager: n,
    skipContextFieldRefAssignment: r,
    manager: {
      valueType: s,
      internal_useOpenPickerButtonAriaLabel: i
    }
  } = e, {
    internalProps: a,
    forwardedProps: l
  } = Hf(t, s), c = _p({
    manager: n,
    internalProps: a,
    skipContextFieldRefAssignment: r
  }), {
    sectionListRef: u,
    onBlur: d,
    onClick: f,
    onFocus: y,
    onInput: g,
    onPaste: h,
    onKeyDown: p,
    onClear: m,
    clearable: b
  } = l, {
    disabled: C = !1,
    readOnly: O = !1,
    autoFocus: w = !1,
    focused: S,
    unstableFieldRef: P
  } = c, M = x.useRef(null), F = Ne(u, M), A = x.useMemo(() => ({
    isReady: () => M.current != null,
    getRoot: () => M.current.getRoot(),
    getSectionContainer: (W) => M.current.getSectionContainer(W),
    getSectionContent: (W) => M.current.getSectionContent(W),
    getSectionIndexFromDOMElement: (W) => M.current.getSectionIndexFromDOMElement(W)
  }), [M]), $ = jp({
    manager: n,
    internalPropsWithDefaults: c,
    forwardedProps: l
  }), {
    // States and derived states
    areAllSectionsEmpty: k,
    error: v,
    parsedSelectedSections: D,
    sectionOrder: T,
    state: I,
    value: N,
    // Methods to update the states
    clearValue: _,
    setSelectedSections: G
  } = $, L = $p({
    stateResponse: $
  }), V = i(N), [R, B] = x.useState(!1);
  function H(W = 0) {
    if (C || !M.current || // if the field is already focused, we don't need to focus it again
    Vu(M) != null)
      return;
    const oe = ka(W, I.sections);
    B(!0), M.current.getSectionContent(oe).focus();
  }
  const K = vS({
    manager: n,
    internalPropsWithDefaults: c,
    stateResponse: $,
    applyCharacterEditing: L,
    focused: R,
    setFocused: B,
    domGetters: A
  }), te = xS({
    manager: n,
    stateResponse: $
  }), ee = wS({
    stateResponse: $,
    internalPropsWithDefaults: c
  }), J = SS({
    manager: n,
    stateResponse: $,
    applyCharacterEditing: L,
    internalPropsWithDefaults: c,
    domGetters: A,
    focused: R
  }), ie = de((W) => {
    p?.(W), K.onKeyDown(W);
  }), re = de((W) => {
    d?.(W), K.onBlur(W);
  }), q = de((W) => {
    y?.(W), K.onFocus(W);
  }), X = de((W) => {
    W.isDefaultPrevented() || (f?.(W), K.onClick(W));
  }), z = de((W) => {
    h?.(W), K.onPaste(W);
  }), ne = de((W) => {
    g?.(W), K.onInput(W);
  }), Y = de((W, ...oe) => {
    W.preventDefault(), m?.(W, ...oe), _(), Lu(M) ? G(T.startIndex) : H(0);
  }), ae = x.useMemo(() => I.sections.map((W, oe) => {
    const ye = J(W, oe);
    return {
      container: ee(oe),
      content: J(W, oe),
      before: {
        children: W.startSeparator
      },
      after: {
        children: W.endSeparator,
        "data-range-position": W.isEndFormatSeparator ? ye["data-range-position"] : void 0
      }
    };
  }), [I.sections, ee, J]);
  return x.useEffect(() => {
    if (M.current == null)
      throw new Error(["MUI X: The `sectionListRef` prop has not been initialized by `PickersSectionList`", "You probably tried to pass a component to the `textField` slot that contains an `<input />` element instead of a `PickersSectionList`.", "", "If you want to keep using an `<input />` HTML element for the editing, please add the `enableAccessibleFieldDOMStructure={false}` prop to your Picker or Field component:", "", "<DatePicker enableAccessibleFieldDOMStructure={false} slots={{ textField: MyCustomTextField }} />", "", "Learn more about the field accessible DOM structure on the MUI documentation: https://mui.com/x/react-date-pickers/fields/#fields-to-edit-a-single-element"].join(`
`));
    w && !C && M.current && M.current.getSectionContent(T.startIndex).focus();
  }, []), dt(() => {
    if (!(!R || !M.current)) {
      if (D === "all")
        M.current.getRoot().focus();
      else if (typeof D == "number") {
        const W = M.current.getSectionContent(D);
        W && W.focus();
      }
    }
  }, [D, R]), dt(() => {
    jl({
      focused: R,
      domGetters: A,
      stateResponse: $
    });
  }), x.useImperativeHandle(P, () => ({
    getSections: () => I.sections,
    getActiveSectionIndex: () => Vu(M),
    setSelectedSections: (W) => {
      if (C || !M.current)
        return;
      const oe = ka(W, I.sections);
      B((oe === "all" ? 0 : oe) !== null), G(W);
    },
    focusField: H,
    isFieldFocused: () => Lu(M)
  })), j({}, l, K, {
    onBlur: re,
    onClick: X,
    onFocus: q,
    onInput: ne,
    onPaste: z,
    onKeyDown: ie,
    onClear: Y
  }, te, {
    error: v,
    clearable: !!(b && !k && !O && !C),
    focused: S ?? R,
    sectionListRef: F,
    // Additional
    enableAccessibleFieldDOMStructure: !0,
    elements: ae,
    areAllSectionsEmpty: k,
    disabled: C,
    readOnly: O,
    autoFocus: w,
    openPickerAriaLabel: V
  });
};
function Vu(e) {
  const t = Et(e.current?.getRoot());
  return !t || !e.current || !e.current.getRoot().contains(t) ? null : e.current.getSectionIndexFromDOMElement(t);
}
function Lu(e) {
  const t = Et(e.current?.getRoot());
  return !!e.current && e.current.getRoot().contains(t);
}
const Cr = (e) => e.replace(/[\u2066\u2067\u2068\u2069]/g, ""), PS = (e, t, n) => {
  let r = 0, s = n ? 1 : 0;
  const i = [];
  for (let a = 0; a < e.length; a += 1) {
    const l = e[a], c = hl(l, n ? "input-rtl" : "input-ltr", t), u = `${l.startSeparator}${c}${l.endSeparator}`, d = Cr(u).length, f = u.length, y = Cr(c), g = s + (y === "" ? 0 : c.indexOf(y[0])) + l.startSeparator.length, h = g + y.length;
    i.push(j({}, l, {
      start: r,
      end: r + d,
      startInInput: g,
      endInInput: h
    })), r += d, s += f;
  }
  return i;
}, TS = (e) => {
  const t = Ut(), n = Dn(), r = Dn(), {
    props: s,
    manager: i,
    skipContextFieldRefAssignment: a,
    manager: {
      valueType: l,
      internal_valueManager: c,
      internal_fieldValueManager: u,
      internal_useOpenPickerButtonAriaLabel: d
    }
  } = e, {
    internalProps: f,
    forwardedProps: y
  } = Hf(s, l), g = _p({
    manager: i,
    internalProps: f,
    skipContextFieldRefAssignment: a
  }), {
    onFocus: h,
    onClick: p,
    onPaste: m,
    onBlur: b,
    onKeyDown: C,
    onClear: O,
    clearable: w,
    inputRef: S,
    placeholder: P
  } = y, {
    readOnly: M = !1,
    disabled: F = !1,
    autoFocus: A = !1,
    focused: $,
    unstableFieldRef: k
  } = g, v = x.useRef(null), D = Ne(S, v), T = jp({
    manager: i,
    internalPropsWithDefaults: g,
    forwardedProps: y
  }), {
    // States and derived states
    activeSectionIndex: I,
    areAllSectionsEmpty: N,
    error: _,
    localizedDigits: G,
    parsedSelectedSections: L,
    sectionOrder: V,
    state: R,
    value: B,
    // Methods to update the states
    clearValue: H,
    clearActiveSection: K,
    setCharacterQuery: te,
    setSelectedSections: ee,
    setTempAndroidValueStr: J,
    updateSectionValue: ie,
    updateValueFromValueStr: re,
    // Utilities methods
    getSectionsFromValue: q
  } = T, X = $p({
    stateResponse: T
  }), z = d(B), ne = x.useMemo(() => PS(R.sections, G, t), [R.sections, G, t]);
  function Y() {
    const Se = v.current.selectionStart ?? 0;
    let Oe;
    Se <= ne[0].startInInput || Se >= ne[ne.length - 1].endInInput ? Oe = 1 : Oe = ne.findIndex((Ve) => Ve.startInInput - Ve.startSeparator.length > Se);
    const me = Oe === -1 ? ne.length - 1 : Oe - 1;
    ee(me);
  }
  function ae(Se = 0) {
    Et(v.current) !== v.current && (v.current?.focus(), ee(Se));
  }
  const W = de((Se) => {
    h?.(Se);
    const Oe = v.current;
    n.start(0, () => {
      !Oe || Oe !== v.current || I == null && (// avoid selecting all sections when focusing empty field without value
      Oe.value.length && Number(Oe.selectionEnd) - Number(Oe.selectionStart) === Oe.value.length ? ee("all") : Y());
    });
  }), oe = de((Se, ...Oe) => {
    Se.isDefaultPrevented() || (p?.(Se, ...Oe), Y());
  }), ye = de((Se) => {
    if (m?.(Se), Se.preventDefault(), M || F)
      return;
    const Oe = Se.clipboardData.getData("text");
    if (typeof L == "number") {
      const me = R.sections[L], Ve = /^[a-zA-Z]+$/.test(Oe), Ye = /^[0-9]+$/.test(Oe), ct = /^(([a-zA-Z]+)|)([0-9]+)(([a-zA-Z]+)|)$/.test(Oe);
      if (me.contentType === "letter" && Ve || me.contentType === "digit" && Ye || me.contentType === "digit-with-letter" && ct) {
        te(null), ie({
          section: me,
          newSectionValue: Oe,
          shouldGoToNextSection: !0
        });
        return;
      }
      if (Ve || Ye)
        return;
    }
    te(null), re(Oe);
  }), ge = de((Se) => {
    b?.(Se), ee(null);
  }), se = de((Se) => {
    if (M)
      return;
    const Oe = Se.target.value;
    if (Oe === "") {
      H();
      return;
    }
    const me = Se.nativeEvent.data, Ve = me && me.length > 1, Ye = Ve ? me : Oe, ct = Cr(Ye);
    if (L === "all" && ee(I), I == null || Ve) {
      re(Ve ? me : ct);
      return;
    }
    let Je;
    if (L === "all" && ct.length === 1)
      Je = ct;
    else {
      const he = Cr(u.getV6InputValueFromSections(ne, G, t));
      let fe = -1, Re = -1;
      for (let Yt = 0; Yt < he.length; Yt += 1)
        fe === -1 && he[Yt] !== ct[Yt] && (fe = Yt), Re === -1 && he[he.length - Yt - 1] !== ct[ct.length - Yt - 1] && (Re = Yt);
      const et = ne[I];
      if (fe < et.start || he.length - Re - 1 > et.end)
        return;
      const Kr = ct.length - he.length + et.end - Cr(et.endSeparator || "").length;
      Je = ct.slice(et.start + Cr(et.startSeparator || "").length, Kr);
    }
    if (Je.length === 0) {
      cv() && J(Ye), K();
      return;
    }
    X({
      keyPressed: Je,
      sectionIndex: I
    });
  }), ce = de((Se, ...Oe) => {
    Se.preventDefault(), O?.(Se, ...Oe), H(), Bu(v) ? ee(V.startIndex) : ae(0);
  }), ue = Vp({
    manager: i,
    internalPropsWithDefaults: g,
    stateResponse: T
  }), ke = de((Se) => {
    C?.(Se), ue(Se);
  }), Te = x.useMemo(() => P !== void 0 ? P : u.getV6InputValueFromSections(q(c.emptyValue), G, t), [P, u, q, c.emptyValue, G, t]), Me = x.useMemo(() => R.tempValueStrAndroid ?? u.getV6InputValueFromSections(R.sections, G, t), [R.sections, u, R.tempValueStrAndroid, G, t]);
  x.useEffect(() => {
    v.current && v.current === Et(v.current) && ee("all");
  }, []), dt(() => {
    function Se() {
      if (!v.current)
        return;
      if (L == null) {
        v.current.scrollLeft && (v.current.scrollLeft = 0);
        return;
      }
      if (v.current !== Et(v.current))
        return;
      const Oe = v.current.scrollTop;
      if (L === "all")
        v.current.select();
      else {
        const me = ne[L], Ve = me.type === "empty" ? me.startInInput - me.startSeparator.length : me.startInInput, Ye = me.type === "empty" ? me.endInInput + me.endSeparator.length : me.endInInput;
        (Ve !== v.current.selectionStart || Ye !== v.current.selectionEnd) && v.current === Et(v.current) && v.current.setSelectionRange(Ve, Ye), r.start(0, () => {
          v.current && v.current === Et(v.current) && // The section might loose all selection, where `selectionStart === selectionEnd`
          // https://github.com/mui/mui-x/pull/13652
          v.current.selectionStart === v.current.selectionEnd && (v.current.selectionStart !== Ve || v.current.selectionEnd !== Ye) && Se();
        });
      }
      v.current.scrollTop = Oe;
    }
    Se();
  });
  const _e = x.useMemo(() => I == null || R.sections[I].contentType === "letter" ? "text" : "numeric", [I, R.sections]), ht = !(v.current && v.current === Et(v.current)) && N;
  return x.useImperativeHandle(k, () => ({
    getSections: () => R.sections,
    getActiveSectionIndex: () => {
      const Se = v.current.selectionStart ?? 0, Oe = v.current.selectionEnd ?? 0;
      if (Se === 0 && Oe === 0)
        return null;
      const me = Se <= ne[0].startInInput ? 1 : ne.findIndex((Ve) => Ve.startInInput - Ve.startSeparator.length > Se);
      return me === -1 ? ne.length - 1 : me - 1;
    },
    setSelectedSections: (Se) => ee(Se),
    focusField: ae,
    isFieldFocused: () => Bu(v)
  })), j({}, y, {
    error: _,
    clearable: !!(w && !N && !M && !F),
    onBlur: ge,
    onClick: oe,
    onFocus: W,
    onPaste: ye,
    onKeyDown: ke,
    onClear: ce,
    inputRef: D,
    // Additional
    enableAccessibleFieldDOMStructure: !1,
    placeholder: Te,
    inputMode: _e,
    autoComplete: "off",
    value: ht ? "" : Me,
    onChange: se,
    focused: $,
    disabled: F,
    readOnly: M,
    autoFocus: A,
    openPickerAriaLabel: z
  });
};
function Bu(e) {
  return e.current === Et(e.current);
}
const RS = (e) => {
  const t = Vf();
  return (e.props.enableAccessibleFieldDOMStructure ?? t?.enableAccessibleFieldDOMStructure ?? !0 ? CS : TS)(e);
}, kS = (e) => {
  const t = Hv(e);
  return RS({
    manager: t,
    props: e
  });
};
function bs(e) {
  return parseInt(e, 10) || 0;
}
const DS = {
  shadow: {
    // Visibility needed to hide the extra text area on iPads
    visibility: "hidden",
    // Remove from the content flow
    position: "absolute",
    // Ignore the scrollbar width
    overflow: "hidden",
    height: 0,
    top: 0,
    left: 0,
    // Create a new layer, increase the isolation of the computed values
    transform: "translateZ(0)"
  }
};
function MS(e) {
  for (const t in e)
    return !1;
  return !0;
}
function Wu(e) {
  return MS(e) || e.outerHeightStyle === 0 && !e.overflowing;
}
const Lp = /* @__PURE__ */ x.forwardRef(function(t, n) {
  const {
    onChange: r,
    maxRows: s,
    minRows: i = 1,
    style: a,
    value: l,
    ...c
  } = t, {
    current: u
  } = x.useRef(l != null), d = x.useRef(null), f = Ne(n, d), y = x.useRef(null), g = x.useRef(null), h = x.useCallback(() => {
    const O = d.current, w = g.current;
    if (!O || !w)
      return;
    const P = vn(O).getComputedStyle(O);
    if (P.width === "0px")
      return {
        outerHeightStyle: 0,
        overflowing: !1
      };
    w.style.width = P.width, w.value = O.value || t.placeholder || "x", w.value.slice(-1) === `
` && (w.value += " ");
    const M = P.boxSizing, F = bs(P.paddingBottom) + bs(P.paddingTop), A = bs(P.borderBottomWidth) + bs(P.borderTopWidth), $ = w.scrollHeight;
    w.value = "x";
    const k = w.scrollHeight;
    let v = $;
    i && (v = Math.max(Number(i) * k, v)), s && (v = Math.min(Number(s) * k, v)), v = Math.max(v, k);
    const D = v + (M === "border-box" ? F + A : 0), T = Math.abs(v - $) <= 1;
    return {
      outerHeightStyle: D,
      overflowing: T
    };
  }, [s, i, t.placeholder]), p = de(() => {
    const O = d.current, w = h();
    if (!O || !w || Wu(w))
      return !1;
    const S = w.outerHeightStyle;
    return y.current != null && y.current !== S;
  }), m = x.useCallback(() => {
    const O = d.current, w = h();
    if (!O || !w || Wu(w))
      return;
    const S = w.outerHeightStyle;
    y.current !== S && (y.current = S, O.style.height = `${S}px`), O.style.overflow = w.overflowing ? "hidden" : "";
  }, [h]), b = x.useRef(-1);
  dt(() => {
    const O = Ep(m), w = d?.current;
    if (!w)
      return;
    const S = vn(w);
    S.addEventListener("resize", O);
    let P;
    return typeof ResizeObserver < "u" && (P = new ResizeObserver(() => {
      p() && (P.unobserve(w), cancelAnimationFrame(b.current), m(), b.current = requestAnimationFrame(() => {
        P.observe(w);
      }));
    }), P.observe(w)), () => {
      O.clear(), cancelAnimationFrame(b.current), S.removeEventListener("resize", O), P && P.disconnect();
    };
  }, [h, m, p]), dt(() => {
    m();
  });
  const C = (O) => {
    u || m();
    const w = O.target, S = w.value.length, P = w.value.endsWith(`
`), M = w.selectionStart === S;
    P && M && w.setSelectionRange(S, S), r && r(O);
  };
  return /* @__PURE__ */ E.jsxs(x.Fragment, {
    children: [/* @__PURE__ */ E.jsx("textarea", {
      value: l,
      onChange: C,
      ref: f,
      rows: i,
      style: a,
      ...c
    }), /* @__PURE__ */ E.jsx("textarea", {
      "aria-hidden": !0,
      className: t.className,
      readOnly: !0,
      ref: g,
      tabIndex: -1,
      style: {
        ...DS.shadow,
        ...a,
        paddingTop: 0,
        paddingBottom: 0
      }
    })]
  });
});
process.env.NODE_ENV !== "production" && (Lp.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  className: o.string,
  /**
   * Maximum number of rows to display.
   */
  maxRows: o.oneOfType([o.number, o.string]),
  /**
   * Minimum number of rows to display.
   * @default 1
   */
  minRows: o.oneOfType([o.number, o.string]),
  /**
   * @ignore
   */
  onChange: o.func,
  /**
   * @ignore
   */
  placeholder: o.string,
  /**
   * @ignore
   */
  style: o.object,
  /**
   * @ignore
   */
  value: o.oneOfType([o.arrayOf(o.string), o.number, o.string])
});
function qr({
  props: e,
  states: t,
  muiFormControl: n
}) {
  return t.reduce((r, s) => (r[s] = e[s], n && typeof e[s] > "u" && (r[s] = n[s]), r), {});
}
const rs = /* @__PURE__ */ x.createContext(void 0);
process.env.NODE_ENV !== "production" && (rs.displayName = "FormControlContext");
function Sn() {
  return x.useContext(rs);
}
function zu(e) {
  return e != null && !(Array.isArray(e) && e.length === 0);
}
function Ks(e, t = !1) {
  return e && (zu(e.value) && e.value !== "" || t && zu(e.defaultValue) && e.defaultValue !== "");
}
function IS(e) {
  return e.startAdornment;
}
function NS(e) {
  return we("MuiInputBase", e);
}
const Lr = xe("MuiInputBase", ["root", "formControl", "focused", "disabled", "adornedStart", "adornedEnd", "error", "sizeSmall", "multiline", "colorSecondary", "fullWidth", "hiddenLabel", "readOnly", "input", "inputSizeSmall", "inputMultiline", "inputTypeSearch", "inputAdornedStart", "inputAdornedEnd", "inputHiddenLabel"]);
var Uu;
const Oi = (e, t) => {
  const {
    ownerState: n
  } = e;
  return [t.root, n.formControl && t.formControl, n.startAdornment && t.adornedStart, n.endAdornment && t.adornedEnd, n.error && t.error, n.size === "small" && t.sizeSmall, n.multiline && t.multiline, n.color && t[`color${le(n.color)}`], n.fullWidth && t.fullWidth, n.hiddenLabel && t.hiddenLabel];
}, Ci = (e, t) => {
  const {
    ownerState: n
  } = e;
  return [t.input, n.size === "small" && t.inputSizeSmall, n.multiline && t.inputMultiline, n.type === "search" && t.inputTypeSearch, n.startAdornment && t.inputAdornedStart, n.endAdornment && t.inputAdornedEnd, n.hiddenLabel && t.inputHiddenLabel];
}, AS = (e) => {
  const {
    classes: t,
    color: n,
    disabled: r,
    error: s,
    endAdornment: i,
    focused: a,
    formControl: l,
    fullWidth: c,
    hiddenLabel: u,
    multiline: d,
    readOnly: f,
    size: y,
    startAdornment: g,
    type: h
  } = e, p = {
    root: ["root", `color${le(n)}`, r && "disabled", s && "error", c && "fullWidth", a && "focused", l && "formControl", y && y !== "medium" && `size${le(y)}`, d && "multiline", g && "adornedStart", i && "adornedEnd", u && "hiddenLabel", f && "readOnly"],
    input: ["input", r && "disabled", h === "search" && "inputTypeSearch", d && "inputMultiline", y === "small" && "inputSizeSmall", u && "inputHiddenLabel", g && "inputAdornedStart", i && "inputAdornedEnd", f && "readOnly"]
  };
  return be(p, NS, t);
}, Pi = Q("div", {
  name: "MuiInputBase",
  slot: "Root",
  overridesResolver: Oi
})(qe(({
  theme: e
}) => ({
  ...e.typography.body1,
  color: (e.vars || e).palette.text.primary,
  lineHeight: "1.4375em",
  // 23px
  boxSizing: "border-box",
  // Prevent padding issue with fullWidth.
  position: "relative",
  cursor: "text",
  display: "inline-flex",
  alignItems: "center",
  [`&.${Lr.disabled}`]: {
    color: (e.vars || e).palette.text.disabled,
    cursor: "default"
  },
  variants: [{
    props: ({
      ownerState: t
    }) => t.multiline,
    style: {
      padding: "4px 0 5px"
    }
  }, {
    props: ({
      ownerState: t,
      size: n
    }) => t.multiline && n === "small",
    style: {
      paddingTop: 1
    }
  }, {
    props: ({
      ownerState: t
    }) => t.fullWidth,
    style: {
      width: "100%"
    }
  }]
}))), Ti = Q("input", {
  name: "MuiInputBase",
  slot: "Input",
  overridesResolver: Ci
})(qe(({
  theme: e
}) => {
  const t = e.palette.mode === "light", n = {
    color: "currentColor",
    ...e.vars ? {
      opacity: e.vars.opacity.inputPlaceholder
    } : {
      opacity: t ? 0.42 : 0.5
    },
    transition: e.transitions.create("opacity", {
      duration: e.transitions.duration.shorter
    })
  }, r = {
    opacity: "0 !important"
  }, s = e.vars ? {
    opacity: e.vars.opacity.inputPlaceholder
  } : {
    opacity: t ? 0.42 : 0.5
  };
  return {
    font: "inherit",
    letterSpacing: "inherit",
    color: "currentColor",
    padding: "4px 0 5px",
    border: 0,
    boxSizing: "content-box",
    background: "none",
    height: "1.4375em",
    // Reset 23pxthe native input line-height
    margin: 0,
    // Reset for Safari
    WebkitTapHighlightColor: "transparent",
    display: "block",
    // Make the flex item shrink with Firefox
    minWidth: 0,
    width: "100%",
    "&::-webkit-input-placeholder": n,
    "&::-moz-placeholder": n,
    // Firefox 19+
    "&::-ms-input-placeholder": n,
    // Edge
    "&:focus": {
      outline: 0
    },
    // Reset Firefox invalid required input style
    "&:invalid": {
      boxShadow: "none"
    },
    "&::-webkit-search-decoration": {
      // Remove the padding when type=search.
      WebkitAppearance: "none"
    },
    // Show and hide the placeholder logic
    [`label[data-shrink=false] + .${Lr.formControl} &`]: {
      "&::-webkit-input-placeholder": r,
      "&::-moz-placeholder": r,
      // Firefox 19+
      "&::-ms-input-placeholder": r,
      // Edge
      "&:focus::-webkit-input-placeholder": s,
      "&:focus::-moz-placeholder": s,
      // Firefox 19+
      "&:focus::-ms-input-placeholder": s
      // Edge
    },
    [`&.${Lr.disabled}`]: {
      opacity: 1,
      // Reset iOS opacity
      WebkitTextFillColor: (e.vars || e).palette.text.disabled
      // Fix opacity Safari bug
    },
    variants: [{
      props: ({
        ownerState: i
      }) => !i.disableInjectingGlobalStyles,
      style: {
        animationName: "mui-auto-fill-cancel",
        animationDuration: "10ms",
        "&:-webkit-autofill": {
          animationDuration: "5000s",
          animationName: "mui-auto-fill"
        }
      }
    }, {
      props: {
        size: "small"
      },
      style: {
        paddingTop: 1
      }
    }, {
      props: ({
        ownerState: i
      }) => i.multiline,
      style: {
        height: "auto",
        resize: "none",
        padding: 0,
        paddingTop: 0
      }
    }, {
      props: {
        type: "search"
      },
      style: {
        MozAppearance: "textfield"
        // Improve type search style.
      }
    }]
  };
})), qu = pv({
  "@keyframes mui-auto-fill": {
    from: {
      display: "block"
    }
  },
  "@keyframes mui-auto-fill-cancel": {
    from: {
      display: "block"
    }
  }
}), Ri = /* @__PURE__ */ x.forwardRef(function(t, n) {
  const r = Ae({
    props: t,
    name: "MuiInputBase"
  }), {
    "aria-describedby": s,
    autoComplete: i,
    autoFocus: a,
    className: l,
    color: c,
    components: u = {},
    componentsProps: d = {},
    defaultValue: f,
    disabled: y,
    disableInjectingGlobalStyles: g,
    endAdornment: h,
    error: p,
    fullWidth: m = !1,
    id: b,
    inputComponent: C = "input",
    inputProps: O = {},
    inputRef: w,
    margin: S,
    maxRows: P,
    minRows: M,
    multiline: F = !1,
    name: A,
    onBlur: $,
    onChange: k,
    onClick: v,
    onFocus: D,
    onKeyDown: T,
    onKeyUp: I,
    placeholder: N,
    readOnly: _,
    renderSuffix: G,
    rows: L,
    size: V,
    slotProps: R = {},
    slots: B = {},
    startAdornment: H,
    type: K = "text",
    value: te,
    ...ee
  } = r, J = O.value != null ? O.value : te, {
    current: ie
  } = x.useRef(J != null), re = x.useRef(), q = x.useCallback((me) => {
    process.env.NODE_ENV !== "production" && me && me.nodeName !== "INPUT" && !me.focus && console.error(["MUI: You have provided a `inputComponent` to the input component", "that does not correctly handle the `ref` prop.", "Make sure the `ref` prop is called with a HTMLInputElement."].join(`
`));
  }, []), X = Ne(re, w, O.ref, q), [z, ne] = x.useState(!1), Y = Sn();
  process.env.NODE_ENV !== "production" && x.useEffect(() => {
    if (Y)
      return Y.registerEffect();
  }, [Y]);
  const ae = qr({
    props: r,
    muiFormControl: Y,
    states: ["color", "disabled", "error", "hiddenLabel", "size", "required", "filled"]
  });
  ae.focused = Y ? Y.focused : z, x.useEffect(() => {
    !Y && y && z && (ne(!1), $ && $());
  }, [Y, y, z, $]);
  const W = Y && Y.onFilled, oe = Y && Y.onEmpty, ye = x.useCallback((me) => {
    Ks(me) ? W && W() : oe && oe();
  }, [W, oe]);
  dt(() => {
    ie && ye({
      value: J
    });
  }, [J, ye, ie]);
  const ge = (me) => {
    D && D(me), O.onFocus && O.onFocus(me), Y && Y.onFocus ? Y.onFocus(me) : ne(!0);
  }, se = (me) => {
    $ && $(me), O.onBlur && O.onBlur(me), Y && Y.onBlur ? Y.onBlur(me) : ne(!1);
  }, ce = (me, ...Ve) => {
    if (!ie) {
      const Ye = me.target || re.current;
      if (Ye == null)
        throw new Error(process.env.NODE_ENV !== "production" ? "MUI: Expected valid input target. Did you use a custom `inputComponent` and forget to forward refs? See https://mui.com/r/input-component-ref-interface for more info." : sn(1));
      ye({
        value: Ye.value
      });
    }
    O.onChange && O.onChange(me, ...Ve), k && k(me, ...Ve);
  };
  x.useEffect(() => {
    ye(re.current);
  }, []);
  const ue = (me) => {
    re.current && me.currentTarget === me.target && re.current.focus(), v && v(me);
  };
  let ke = C, Te = O;
  F && ke === "input" && (L ? (process.env.NODE_ENV !== "production" && (M || P) && console.warn("MUI: You can not use the `minRows` or `maxRows` props when the input `rows` prop is set."), Te = {
    type: void 0,
    minRows: L,
    maxRows: L,
    ...Te
  }) : Te = {
    type: void 0,
    maxRows: P,
    minRows: M,
    ...Te
  }, ke = Lp);
  const Me = (me) => {
    ye(me.animationName === "mui-auto-fill-cancel" ? re.current : {
      value: "x"
    });
  };
  x.useEffect(() => {
    Y && Y.setAdornedStart(!!H);
  }, [Y, H]);
  const _e = {
    ...r,
    color: ae.color || "primary",
    disabled: ae.disabled,
    endAdornment: h,
    error: ae.error,
    focused: ae.focused,
    formControl: Y,
    fullWidth: m,
    hiddenLabel: ae.hiddenLabel,
    multiline: F,
    size: ae.size,
    startAdornment: H,
    type: K
  }, ft = AS(_e), ht = B.root || u.Root || Pi, Se = R.root || d.root || {}, Oe = B.input || u.Input || Ti;
  return Te = {
    ...Te,
    ...R.input ?? d.input
  }, /* @__PURE__ */ E.jsxs(x.Fragment, {
    children: [!g && typeof qu == "function" && // For Emotion/Styled-components, InputGlobalStyles will be a function
    // For Pigment CSS, this has no effect because the InputGlobalStyles will be null.
    (Uu || (Uu = /* @__PURE__ */ E.jsx(qu, {}))), /* @__PURE__ */ E.jsxs(ht, {
      ...Se,
      ref: n,
      onClick: ue,
      ...ee,
      ...!Ar(ht) && {
        ownerState: {
          ..._e,
          ...Se.ownerState
        }
      },
      className: pe(ft.root, Se.className, l, _ && "MuiInputBase-readOnly"),
      children: [H, /* @__PURE__ */ E.jsx(rs.Provider, {
        value: null,
        children: /* @__PURE__ */ E.jsx(Oe, {
          "aria-invalid": ae.error,
          "aria-describedby": s,
          autoComplete: i,
          autoFocus: a,
          defaultValue: f,
          disabled: ae.disabled,
          id: b,
          onAnimationStart: Me,
          name: A,
          placeholder: N,
          readOnly: _,
          required: ae.required,
          rows: L,
          value: J,
          onKeyDown: T,
          onKeyUp: I,
          type: K,
          ...Te,
          ...!Ar(Oe) && {
            as: ke,
            ownerState: {
              ..._e,
              ...Te.ownerState
            }
          },
          ref: X,
          className: pe(ft.input, Te.className, _ && "MuiInputBase-readOnly"),
          onBlur: se,
          onChange: ce,
          onFocus: ge
        })
      }), h, G ? G({
        ...ae,
        startAdornment: H
      }) : null]
    })]
  });
});
process.env.NODE_ENV !== "production" && (Ri.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  "aria-describedby": o.string,
  /**
   * This prop helps users to fill forms faster, especially on mobile devices.
   * The name can be confusing, as it's more like an autofill.
   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
   */
  autoComplete: o.string,
  /**
   * If `true`, the `input` element is focused during the first mount.
   */
  autoFocus: o.bool,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: o.object,
  /**
   * @ignore
   */
  className: o.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * The prop defaults to the value (`'primary'`) inherited from the parent FormControl component.
   */
  color: o.oneOfType([o.oneOf(["primary", "secondary", "error", "info", "success", "warning"]), o.string]),
  /**
   * The components used for each slot inside.
   *
   * @deprecated use the `slots` prop instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   *
   * @default {}
   */
  components: o.shape({
    Input: o.elementType,
    Root: o.elementType
  }),
  /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   *
   * @deprecated use the `slotProps` prop instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   *
   * @default {}
   */
  componentsProps: o.shape({
    input: o.object,
    root: o.object
  }),
  /**
   * The default value. Use when the component is not controlled.
   */
  defaultValue: o.any,
  /**
   * If `true`, the component is disabled.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */
  disabled: o.bool,
  /**
   * If `true`, GlobalStyles for the auto-fill keyframes will not be injected/removed on mount/unmount. Make sure to inject them at the top of your application.
   * This option is intended to help with boosting the initial rendering performance if you are loading a big amount of Input components at once.
   * @default false
   */
  disableInjectingGlobalStyles: o.bool,
  /**
   * End `InputAdornment` for this component.
   */
  endAdornment: o.node,
  /**
   * If `true`, the `input` will indicate an error.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */
  error: o.bool,
  /**
   * If `true`, the `input` will take up the full width of its container.
   * @default false
   */
  fullWidth: o.bool,
  /**
   * The id of the `input` element.
   */
  id: o.string,
  /**
   * The component used for the `input` element.
   * Either a string to use a HTML element or a component.
   * @default 'input'
   */
  inputComponent: xi,
  /**
   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/input#attributes) applied to the `input` element.
   * @default {}
   */
  inputProps: o.object,
  /**
   * Pass a ref to the `input` element.
   */
  inputRef: lt,
  /**
   * If `dense`, will adjust vertical spacing. This is normally obtained via context from
   * FormControl.
   * The prop defaults to the value (`'none'`) inherited from the parent FormControl component.
   */
  margin: o.oneOf(["dense", "none"]),
  /**
   * Maximum number of rows to display when multiline option is set to true.
   */
  maxRows: o.oneOfType([o.number, o.string]),
  /**
   * Minimum number of rows to display when multiline option is set to true.
   */
  minRows: o.oneOfType([o.number, o.string]),
  /**
   * If `true`, a [TextareaAutosize](https://mui.com/material-ui/react-textarea-autosize/) element is rendered.
   * @default false
   */
  multiline: o.bool,
  /**
   * Name attribute of the `input` element.
   */
  name: o.string,
  /**
   * Callback fired when the `input` is blurred.
   *
   * Notice that the first argument (event) might be undefined.
   */
  onBlur: o.func,
  /**
   * Callback fired when the value is changed.
   *
   * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (string).
   */
  onChange: o.func,
  /**
   * @ignore
   */
  onClick: o.func,
  /**
   * @ignore
   */
  onFocus: o.func,
  /**
   * Callback fired when the `input` doesn't satisfy its constraints.
   */
  onInvalid: o.func,
  /**
   * @ignore
   */
  onKeyDown: o.func,
  /**
   * @ignore
   */
  onKeyUp: o.func,
  /**
   * The short hint displayed in the `input` before the user enters a value.
   */
  placeholder: o.string,
  /**
   * It prevents the user from changing the value of the field
   * (not from interacting with the field).
   */
  readOnly: o.bool,
  /**
   * @ignore
   */
  renderSuffix: o.func,
  /**
   * If `true`, the `input` element is required.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */
  required: o.bool,
  /**
   * Number of rows to display when multiline option is set to true.
   */
  rows: o.oneOfType([o.number, o.string]),
  /**
   * The size of the component.
   */
  size: o.oneOfType([o.oneOf(["medium", "small"]), o.string]),
  /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   *
   * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
   *
   * @default {}
   */
  slotProps: o.shape({
    input: o.object,
    root: o.object
  }),
  /**
   * The components used for each slot inside.
   *
   * This prop is an alias for the `components` prop, which will be deprecated in the future.
   *
   * @default {}
   */
  slots: o.shape({
    input: o.elementType,
    root: o.elementType
  }),
  /**
   * Start `InputAdornment` for this component.
   */
  startAdornment: o.node,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: o.oneOfType([o.arrayOf(o.oneOfType([o.func, o.object, o.bool])), o.func, o.object]),
  /**
   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/input#input_types).
   * @default 'text'
   */
  type: o.string,
  /**
   * The value of the `input` element, required for a controlled component.
   */
  value: o.any
});
function FS(e) {
  return we("MuiInput", e);
}
const ro = {
  ...Lr,
  ...xe("MuiInput", ["root", "underline", "input"])
}, $S = (e) => {
  const {
    classes: t,
    disableUnderline: n
  } = e, s = be({
    root: ["root", !n && "underline"],
    input: ["input"]
  }, FS, t);
  return {
    ...t,
    // forward classes to the InputBase
    ...s
  };
}, jS = Q(Pi, {
  shouldForwardProp: (e) => qt(e) || e === "classes",
  name: "MuiInput",
  slot: "Root",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e;
    return [...Oi(e, t), !n.disableUnderline && t.underline];
  }
})(qe(({
  theme: e
}) => {
  let n = e.palette.mode === "light" ? "rgba(0, 0, 0, 0.42)" : "rgba(255, 255, 255, 0.7)";
  return e.vars && (n = e.alpha(e.vars.palette.common.onBackground, e.vars.opacity.inputUnderline)), {
    position: "relative",
    variants: [{
      props: ({
        ownerState: r
      }) => r.formControl,
      style: {
        "label + &": {
          marginTop: 16
        }
      }
    }, {
      props: ({
        ownerState: r
      }) => !r.disableUnderline,
      style: {
        "&::after": {
          left: 0,
          bottom: 0,
          content: '""',
          position: "absolute",
          right: 0,
          transform: "scaleX(0)",
          transition: e.transitions.create("transform", {
            duration: e.transitions.duration.shorter,
            easing: e.transitions.easing.easeOut
          }),
          pointerEvents: "none"
          // Transparent to the hover style.
        },
        [`&.${ro.focused}:after`]: {
          // translateX(0) is a workaround for Safari transform scale bug
          // See https://github.com/mui/material-ui/issues/31766
          transform: "scaleX(1) translateX(0)"
        },
        [`&.${ro.error}`]: {
          "&::before, &::after": {
            borderBottomColor: (e.vars || e).palette.error.main
          }
        },
        "&::before": {
          borderBottom: `1px solid ${n}`,
          left: 0,
          bottom: 0,
          content: '"\\00a0"',
          position: "absolute",
          right: 0,
          transition: e.transitions.create("border-bottom-color", {
            duration: e.transitions.duration.shorter
          }),
          pointerEvents: "none"
          // Transparent to the hover style.
        },
        [`&:hover:not(.${ro.disabled}, .${ro.error}):before`]: {
          borderBottom: `2px solid ${(e.vars || e).palette.text.primary}`,
          // Reset on touch devices, it doesn't add specificity
          "@media (hover: none)": {
            borderBottom: `1px solid ${n}`
          }
        },
        [`&.${ro.disabled}:before`]: {
          borderBottomStyle: "dotted"
        }
      }
    }, ...Object.entries(e.palette).filter(Mt()).map(([r]) => ({
      props: {
        color: r,
        disableUnderline: !1
      },
      style: {
        "&::after": {
          borderBottom: `2px solid ${(e.vars || e).palette[r].main}`
        }
      }
    }))]
  };
})), _S = Q(Ti, {
  name: "MuiInput",
  slot: "Input",
  overridesResolver: Ci
})({}), ki = /* @__PURE__ */ x.forwardRef(function(t, n) {
  const r = Ae({
    props: t,
    name: "MuiInput"
  }), {
    disableUnderline: s = !1,
    components: i = {},
    componentsProps: a,
    fullWidth: l = !1,
    inputComponent: c = "input",
    multiline: u = !1,
    slotProps: d,
    slots: f = {},
    type: y = "text",
    ...g
  } = r, h = $S(r), m = {
    root: {
      ownerState: {
        disableUnderline: s
      }
    }
  }, b = d ?? a ? wt(d ?? a, m) : m, C = f.root ?? i.Root ?? jS, O = f.input ?? i.Input ?? _S;
  return /* @__PURE__ */ E.jsx(Ri, {
    slots: {
      root: C,
      input: O
    },
    slotProps: b,
    fullWidth: l,
    inputComponent: c,
    multiline: u,
    ref: n,
    type: y,
    ...g,
    classes: h
  });
});
process.env.NODE_ENV !== "production" && (ki.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * This prop helps users to fill forms faster, especially on mobile devices.
   * The name can be confusing, as it's more like an autofill.
   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
   */
  autoComplete: o.string,
  /**
   * If `true`, the `input` element is focused during the first mount.
   */
  autoFocus: o.bool,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: o.object,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * The prop defaults to the value (`'primary'`) inherited from the parent FormControl component.
   */
  color: o.oneOfType([o.oneOf(["primary", "secondary"]), o.string]),
  /**
   * The components used for each slot inside.
   *
   * @deprecated use the `slots` prop instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   *
   * @default {}
   */
  components: o.shape({
    Input: o.elementType,
    Root: o.elementType
  }),
  /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   *
   * @deprecated use the `slotProps` prop instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   *
   * @default {}
   */
  componentsProps: o.shape({
    input: o.object,
    root: o.object
  }),
  /**
   * The default value. Use when the component is not controlled.
   */
  defaultValue: o.any,
  /**
   * If `true`, the component is disabled.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */
  disabled: o.bool,
  /**
   * If `true`, the `input` will not have an underline.
   * @default false
   */
  disableUnderline: o.bool,
  /**
   * End `InputAdornment` for this component.
   */
  endAdornment: o.node,
  /**
   * If `true`, the `input` will indicate an error.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */
  error: o.bool,
  /**
   * If `true`, the `input` will take up the full width of its container.
   * @default false
   */
  fullWidth: o.bool,
  /**
   * The id of the `input` element.
   */
  id: o.string,
  /**
   * The component used for the `input` element.
   * Either a string to use a HTML element or a component.
   * @default 'input'
   */
  inputComponent: o.elementType,
  /**
   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/input#attributes) applied to the `input` element.
   * @default {}
   */
  inputProps: o.object,
  /**
   * Pass a ref to the `input` element.
   */
  inputRef: lt,
  /**
   * If `dense`, will adjust vertical spacing. This is normally obtained via context from
   * FormControl.
   * The prop defaults to the value (`'none'`) inherited from the parent FormControl component.
   */
  margin: o.oneOf(["dense", "none"]),
  /**
   * Maximum number of rows to display when multiline option is set to true.
   */
  maxRows: o.oneOfType([o.number, o.string]),
  /**
   * Minimum number of rows to display when multiline option is set to true.
   */
  minRows: o.oneOfType([o.number, o.string]),
  /**
   * If `true`, a [TextareaAutosize](https://mui.com/material-ui/react-textarea-autosize/) element is rendered.
   * @default false
   */
  multiline: o.bool,
  /**
   * Name attribute of the `input` element.
   */
  name: o.string,
  /**
   * Callback fired when the value is changed.
   *
   * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (string).
   */
  onChange: o.func,
  /**
   * The short hint displayed in the `input` before the user enters a value.
   */
  placeholder: o.string,
  /**
   * It prevents the user from changing the value of the field
   * (not from interacting with the field).
   */
  readOnly: o.bool,
  /**
   * If `true`, the `input` element is required.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */
  required: o.bool,
  /**
   * Number of rows to display when multiline option is set to true.
   */
  rows: o.oneOfType([o.number, o.string]),
  /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   *
   * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
   *
   * @default {}
   */
  slotProps: o.shape({
    input: o.object,
    root: o.object
  }),
  /**
   * The components used for each slot inside.
   *
   * This prop is an alias for the `components` prop, which will be deprecated in the future.
   *
   * @default {}
   */
  slots: o.shape({
    input: o.elementType,
    root: o.elementType
  }),
  /**
   * Start `InputAdornment` for this component.
   */
  startAdornment: o.node,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: o.oneOfType([o.arrayOf(o.oneOfType([o.func, o.object, o.bool])), o.func, o.object]),
  /**
   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/input#input_types).
   * @default 'text'
   */
  type: o.string,
  /**
   * The value of the `input` element, required for a controlled component.
   */
  value: o.any
});
ki.muiName = "Input";
function VS(e) {
  return we("MuiFilledInput", e);
}
const Hn = {
  ...Lr,
  ...xe("MuiFilledInput", ["root", "underline", "input", "adornedStart", "adornedEnd", "sizeSmall", "multiline", "hiddenLabel"])
}, LS = (e) => {
  const {
    classes: t,
    disableUnderline: n,
    startAdornment: r,
    endAdornment: s,
    size: i,
    hiddenLabel: a,
    multiline: l
  } = e, c = {
    root: ["root", !n && "underline", r && "adornedStart", s && "adornedEnd", i === "small" && `size${le(i)}`, a && "hiddenLabel", l && "multiline"],
    input: ["input"]
  }, u = be(c, VS, t);
  return {
    ...t,
    // forward classes to the InputBase
    ...u
  };
}, BS = Q(Pi, {
  shouldForwardProp: (e) => qt(e) || e === "classes",
  name: "MuiFilledInput",
  slot: "Root",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e;
    return [...Oi(e, t), !n.disableUnderline && t.underline];
  }
})(qe(({
  theme: e
}) => {
  const t = e.palette.mode === "light", n = t ? "rgba(0, 0, 0, 0.42)" : "rgba(255, 255, 255, 0.7)", r = t ? "rgba(0, 0, 0, 0.06)" : "rgba(255, 255, 255, 0.09)", s = t ? "rgba(0, 0, 0, 0.09)" : "rgba(255, 255, 255, 0.13)", i = t ? "rgba(0, 0, 0, 0.12)" : "rgba(255, 255, 255, 0.12)";
  return {
    position: "relative",
    backgroundColor: e.vars ? e.vars.palette.FilledInput.bg : r,
    borderTopLeftRadius: (e.vars || e).shape.borderRadius,
    borderTopRightRadius: (e.vars || e).shape.borderRadius,
    transition: e.transitions.create("background-color", {
      duration: e.transitions.duration.shorter,
      easing: e.transitions.easing.easeOut
    }),
    "&:hover": {
      backgroundColor: e.vars ? e.vars.palette.FilledInput.hoverBg : s,
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        backgroundColor: e.vars ? e.vars.palette.FilledInput.bg : r
      }
    },
    [`&.${Hn.focused}`]: {
      backgroundColor: e.vars ? e.vars.palette.FilledInput.bg : r
    },
    [`&.${Hn.disabled}`]: {
      backgroundColor: e.vars ? e.vars.palette.FilledInput.disabledBg : i
    },
    variants: [{
      props: ({
        ownerState: a
      }) => !a.disableUnderline,
      style: {
        "&::after": {
          left: 0,
          bottom: 0,
          content: '""',
          position: "absolute",
          right: 0,
          transform: "scaleX(0)",
          transition: e.transitions.create("transform", {
            duration: e.transitions.duration.shorter,
            easing: e.transitions.easing.easeOut
          }),
          pointerEvents: "none"
          // Transparent to the hover style.
        },
        [`&.${Hn.focused}:after`]: {
          // translateX(0) is a workaround for Safari transform scale bug
          // See https://github.com/mui/material-ui/issues/31766
          transform: "scaleX(1) translateX(0)"
        },
        [`&.${Hn.error}`]: {
          "&::before, &::after": {
            borderBottomColor: (e.vars || e).palette.error.main
          }
        },
        "&::before": {
          borderBottom: `1px solid ${e.vars ? e.alpha(e.vars.palette.common.onBackground, e.vars.opacity.inputUnderline) : n}`,
          left: 0,
          bottom: 0,
          content: '"\\00a0"',
          position: "absolute",
          right: 0,
          transition: e.transitions.create("border-bottom-color", {
            duration: e.transitions.duration.shorter
          }),
          pointerEvents: "none"
          // Transparent to the hover style.
        },
        [`&:hover:not(.${Hn.disabled}, .${Hn.error}):before`]: {
          borderBottom: `1px solid ${(e.vars || e).palette.text.primary}`
        },
        [`&.${Hn.disabled}:before`]: {
          borderBottomStyle: "dotted"
        }
      }
    }, ...Object.entries(e.palette).filter(Mt()).map(([a]) => ({
      props: {
        disableUnderline: !1,
        color: a
      },
      style: {
        "&::after": {
          borderBottom: `2px solid ${(e.vars || e).palette[a]?.main}`
        }
      }
    })), {
      props: ({
        ownerState: a
      }) => a.startAdornment,
      style: {
        paddingLeft: 12
      }
    }, {
      props: ({
        ownerState: a
      }) => a.endAdornment,
      style: {
        paddingRight: 12
      }
    }, {
      props: ({
        ownerState: a
      }) => a.multiline,
      style: {
        padding: "25px 12px 8px"
      }
    }, {
      props: ({
        ownerState: a,
        size: l
      }) => a.multiline && l === "small",
      style: {
        paddingTop: 21,
        paddingBottom: 4
      }
    }, {
      props: ({
        ownerState: a
      }) => a.multiline && a.hiddenLabel,
      style: {
        paddingTop: 16,
        paddingBottom: 17
      }
    }, {
      props: ({
        ownerState: a
      }) => a.multiline && a.hiddenLabel && a.size === "small",
      style: {
        paddingTop: 8,
        paddingBottom: 9
      }
    }]
  };
})), WS = Q(Ti, {
  name: "MuiFilledInput",
  slot: "Input",
  overridesResolver: Ci
})(qe(({
  theme: e
}) => ({
  paddingTop: 25,
  paddingRight: 12,
  paddingBottom: 8,
  paddingLeft: 12,
  ...!e.vars && {
    "&:-webkit-autofill": {
      WebkitBoxShadow: e.palette.mode === "light" ? null : "0 0 0 100px #266798 inset",
      WebkitTextFillColor: e.palette.mode === "light" ? null : "#fff",
      caretColor: e.palette.mode === "light" ? null : "#fff",
      borderTopLeftRadius: "inherit",
      borderTopRightRadius: "inherit"
    }
  },
  ...e.vars && {
    "&:-webkit-autofill": {
      borderTopLeftRadius: "inherit",
      borderTopRightRadius: "inherit"
    },
    [e.getColorSchemeSelector("dark")]: {
      "&:-webkit-autofill": {
        WebkitBoxShadow: "0 0 0 100px #266798 inset",
        WebkitTextFillColor: "#fff",
        caretColor: "#fff"
      }
    }
  },
  variants: [{
    props: {
      size: "small"
    },
    style: {
      paddingTop: 21,
      paddingBottom: 4
    }
  }, {
    props: ({
      ownerState: t
    }) => t.hiddenLabel,
    style: {
      paddingTop: 16,
      paddingBottom: 17
    }
  }, {
    props: ({
      ownerState: t
    }) => t.startAdornment,
    style: {
      paddingLeft: 0
    }
  }, {
    props: ({
      ownerState: t
    }) => t.endAdornment,
    style: {
      paddingRight: 0
    }
  }, {
    props: ({
      ownerState: t
    }) => t.hiddenLabel && t.size === "small",
    style: {
      paddingTop: 8,
      paddingBottom: 9
    }
  }, {
    props: ({
      ownerState: t
    }) => t.multiline,
    style: {
      paddingTop: 0,
      paddingBottom: 0,
      paddingLeft: 0,
      paddingRight: 0
    }
  }]
}))), Di = /* @__PURE__ */ x.forwardRef(function(t, n) {
  const r = Ae({
    props: t,
    name: "MuiFilledInput"
  }), {
    disableUnderline: s = !1,
    components: i = {},
    componentsProps: a,
    fullWidth: l = !1,
    hiddenLabel: c,
    // declare here to prevent spreading to DOM
    inputComponent: u = "input",
    multiline: d = !1,
    slotProps: f,
    slots: y = {},
    type: g = "text",
    ...h
  } = r, p = {
    ...r,
    disableUnderline: s,
    fullWidth: l,
    inputComponent: u,
    multiline: d,
    type: g
  }, m = LS(r), b = {
    root: {
      ownerState: p
    },
    input: {
      ownerState: p
    }
  }, C = f ?? a ? wt(b, f ?? a) : b, O = y.root ?? i.Root ?? BS, w = y.input ?? i.Input ?? WS;
  return /* @__PURE__ */ E.jsx(Ri, {
    slots: {
      root: O,
      input: w
    },
    slotProps: C,
    fullWidth: l,
    inputComponent: u,
    multiline: d,
    ref: n,
    type: g,
    ...h,
    classes: m
  });
});
process.env.NODE_ENV !== "production" && (Di.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * This prop helps users to fill forms faster, especially on mobile devices.
   * The name can be confusing, as it's more like an autofill.
   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
   */
  autoComplete: o.string,
  /**
   * If `true`, the `input` element is focused during the first mount.
   */
  autoFocus: o.bool,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: o.object,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * The prop defaults to the value (`'primary'`) inherited from the parent FormControl component.
   */
  color: o.oneOfType([o.oneOf(["primary", "secondary"]), o.string]),
  /**
   * The components used for each slot inside.
   *
   * @deprecated use the `slots` prop instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   *
   * @default {}
   */
  components: o.shape({
    Input: o.elementType,
    Root: o.elementType
  }),
  /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   *
   * @deprecated use the `slotProps` prop instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   *
   * @default {}
   */
  componentsProps: o.shape({
    input: o.object,
    root: o.object
  }),
  /**
   * The default value. Use when the component is not controlled.
   */
  defaultValue: o.any,
  /**
   * If `true`, the component is disabled.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */
  disabled: o.bool,
  /**
   * If `true`, the input will not have an underline.
   * @default false
   */
  disableUnderline: o.bool,
  /**
   * End `InputAdornment` for this component.
   */
  endAdornment: o.node,
  /**
   * If `true`, the `input` will indicate an error.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */
  error: o.bool,
  /**
   * If `true`, the `input` will take up the full width of its container.
   * @default false
   */
  fullWidth: o.bool,
  /**
   * If `true`, the label is hidden.
   * This is used to increase density for a `FilledInput`.
   * Be sure to add `aria-label` to the `input` element.
   * @default false
   */
  hiddenLabel: o.bool,
  /**
   * The id of the `input` element.
   */
  id: o.string,
  /**
   * The component used for the `input` element.
   * Either a string to use a HTML element or a component.
   * @default 'input'
   */
  inputComponent: o.elementType,
  /**
   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/input#attributes) applied to the `input` element.
   * @default {}
   */
  inputProps: o.object,
  /**
   * Pass a ref to the `input` element.
   */
  inputRef: lt,
  /**
   * If `dense`, will adjust vertical spacing. This is normally obtained via context from
   * FormControl.
   * The prop defaults to the value (`'none'`) inherited from the parent FormControl component.
   */
  margin: o.oneOf(["dense", "none"]),
  /**
   * Maximum number of rows to display when multiline option is set to true.
   */
  maxRows: o.oneOfType([o.number, o.string]),
  /**
   * Minimum number of rows to display when multiline option is set to true.
   */
  minRows: o.oneOfType([o.number, o.string]),
  /**
   * If `true`, a [TextareaAutosize](https://mui.com/material-ui/react-textarea-autosize/) element is rendered.
   * @default false
   */
  multiline: o.bool,
  /**
   * Name attribute of the `input` element.
   */
  name: o.string,
  /**
   * Callback fired when the value is changed.
   *
   * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (string).
   */
  onChange: o.func,
  /**
   * The short hint displayed in the `input` before the user enters a value.
   */
  placeholder: o.string,
  /**
   * It prevents the user from changing the value of the field
   * (not from interacting with the field).
   */
  readOnly: o.bool,
  /**
   * If `true`, the `input` element is required.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */
  required: o.bool,
  /**
   * Number of rows to display when multiline option is set to true.
   */
  rows: o.oneOfType([o.number, o.string]),
  /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   *
   * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
   *
   * @default {}
   */
  slotProps: o.shape({
    input: o.object,
    root: o.object
  }),
  /**
   * The components used for each slot inside.
   *
   * This prop is an alias for the `components` prop, which will be deprecated in the future.
   *
   * @default {}
   */
  slots: o.shape({
    input: o.elementType,
    root: o.elementType
  }),
  /**
   * Start `InputAdornment` for this component.
   */
  startAdornment: o.node,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: o.oneOfType([o.arrayOf(o.oneOfType([o.func, o.object, o.bool])), o.func, o.object]),
  /**
   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/input#input_types).
   * @default 'text'
   */
  type: o.string,
  /**
   * The value of the `input` element, required for a controlled component.
   */
  value: o.any
});
Di.muiName = "Input";
var Hu;
const zS = Q("fieldset", {
  name: "MuiNotchedOutlined",
  shouldForwardProp: qt
})({
  textAlign: "left",
  position: "absolute",
  bottom: 0,
  right: 0,
  top: -5,
  left: 0,
  margin: 0,
  padding: "0 8px",
  pointerEvents: "none",
  borderRadius: "inherit",
  borderStyle: "solid",
  borderWidth: 1,
  overflow: "hidden",
  minWidth: "0%"
}), US = Q("legend", {
  name: "MuiNotchedOutlined",
  shouldForwardProp: qt
})(qe(({
  theme: e
}) => ({
  float: "unset",
  // Fix conflict with bootstrap
  width: "auto",
  // Fix conflict with bootstrap
  overflow: "hidden",
  // Fix Horizontal scroll when label too long
  variants: [{
    props: ({
      ownerState: t
    }) => !t.withLabel,
    style: {
      padding: 0,
      lineHeight: "11px",
      // sync with `height` in `legend` styles
      transition: e.transitions.create("width", {
        duration: 150,
        easing: e.transitions.easing.easeOut
      })
    }
  }, {
    props: ({
      ownerState: t
    }) => t.withLabel,
    style: {
      display: "block",
      // Fix conflict with normalize.css and sanitize.css
      padding: 0,
      height: 11,
      // sync with `lineHeight` in `legend` styles
      fontSize: "0.75em",
      visibility: "hidden",
      maxWidth: 0.01,
      transition: e.transitions.create("max-width", {
        duration: 50,
        easing: e.transitions.easing.easeOut
      }),
      whiteSpace: "nowrap",
      "& > span": {
        paddingLeft: 5,
        paddingRight: 5,
        display: "inline-block",
        opacity: 0,
        visibility: "visible"
      }
    }
  }, {
    props: ({
      ownerState: t
    }) => t.withLabel && t.notched,
    style: {
      maxWidth: "100%",
      transition: e.transitions.create("max-width", {
        duration: 100,
        easing: e.transitions.easing.easeOut,
        delay: 50
      })
    }
  }]
})));
function Bp(e) {
  const {
    children: t,
    classes: n,
    className: r,
    label: s,
    notched: i,
    ...a
  } = e, l = s != null && s !== "", c = {
    ...e,
    notched: i,
    withLabel: l
  };
  return /* @__PURE__ */ E.jsx(zS, {
    "aria-hidden": !0,
    className: r,
    ownerState: c,
    ...a,
    children: /* @__PURE__ */ E.jsx(US, {
      ownerState: c,
      children: l ? /* @__PURE__ */ E.jsx("span", {
        children: s
      }) : (
        // notranslate needed while Google Translate will not fix zero-width space issue
        Hu || (Hu = /* @__PURE__ */ E.jsx("span", {
          className: "notranslate",
          "aria-hidden": !0,
          children: "​"
        }))
      )
    })
  });
}
process.env.NODE_ENV !== "production" && (Bp.propTypes = {
  /**
   * The content of the component.
   */
  children: o.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: o.object,
  /**
   * @ignore
   */
  className: o.string,
  /**
   * The label.
   */
  label: o.node,
  /**
   * If `true`, the outline is notched to accommodate the label.
   */
  notched: o.bool.isRequired,
  /**
   * @ignore
   */
  style: o.object
});
function qS(e) {
  return we("MuiOutlinedInput", e);
}
const Gt = {
  ...Lr,
  ...xe("MuiOutlinedInput", ["root", "notchedOutline", "input"])
}, HS = (e) => {
  const {
    classes: t
  } = e, r = be({
    root: ["root"],
    notchedOutline: ["notchedOutline"],
    input: ["input"]
  }, qS, t);
  return {
    ...t,
    // forward classes to the InputBase
    ...r
  };
}, YS = Q(Pi, {
  shouldForwardProp: (e) => qt(e) || e === "classes",
  name: "MuiOutlinedInput",
  slot: "Root",
  overridesResolver: Oi
})(qe(({
  theme: e
}) => {
  const t = e.palette.mode === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)";
  return {
    position: "relative",
    borderRadius: (e.vars || e).shape.borderRadius,
    [`&:hover .${Gt.notchedOutline}`]: {
      borderColor: (e.vars || e).palette.text.primary
    },
    // Reset on touch devices, it doesn't add specificity
    "@media (hover: none)": {
      [`&:hover .${Gt.notchedOutline}`]: {
        borderColor: e.vars ? e.alpha(e.vars.palette.common.onBackground, 0.23) : t
      }
    },
    [`&.${Gt.focused} .${Gt.notchedOutline}`]: {
      borderWidth: 2
    },
    variants: [...Object.entries(e.palette).filter(Mt()).map(([n]) => ({
      props: {
        color: n
      },
      style: {
        [`&.${Gt.focused} .${Gt.notchedOutline}`]: {
          borderColor: (e.vars || e).palette[n].main
        }
      }
    })), {
      props: {},
      // to override the above style
      style: {
        [`&.${Gt.error} .${Gt.notchedOutline}`]: {
          borderColor: (e.vars || e).palette.error.main
        },
        [`&.${Gt.disabled} .${Gt.notchedOutline}`]: {
          borderColor: (e.vars || e).palette.action.disabled
        }
      }
    }, {
      props: ({
        ownerState: n
      }) => n.startAdornment,
      style: {
        paddingLeft: 14
      }
    }, {
      props: ({
        ownerState: n
      }) => n.endAdornment,
      style: {
        paddingRight: 14
      }
    }, {
      props: ({
        ownerState: n
      }) => n.multiline,
      style: {
        padding: "16.5px 14px"
      }
    }, {
      props: ({
        ownerState: n,
        size: r
      }) => n.multiline && r === "small",
      style: {
        padding: "8.5px 14px"
      }
    }]
  };
})), KS = Q(Bp, {
  name: "MuiOutlinedInput",
  slot: "NotchedOutline"
})(qe(({
  theme: e
}) => {
  const t = e.palette.mode === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)";
  return {
    borderColor: e.vars ? e.alpha(e.vars.palette.common.onBackground, 0.23) : t
  };
})), GS = Q(Ti, {
  name: "MuiOutlinedInput",
  slot: "Input",
  overridesResolver: Ci
})(qe(({
  theme: e
}) => ({
  padding: "16.5px 14px",
  ...!e.vars && {
    "&:-webkit-autofill": {
      WebkitBoxShadow: e.palette.mode === "light" ? null : "0 0 0 100px #266798 inset",
      WebkitTextFillColor: e.palette.mode === "light" ? null : "#fff",
      caretColor: e.palette.mode === "light" ? null : "#fff",
      borderRadius: "inherit"
    }
  },
  ...e.vars && {
    "&:-webkit-autofill": {
      borderRadius: "inherit"
    },
    [e.getColorSchemeSelector("dark")]: {
      "&:-webkit-autofill": {
        WebkitBoxShadow: "0 0 0 100px #266798 inset",
        WebkitTextFillColor: "#fff",
        caretColor: "#fff"
      }
    }
  },
  variants: [{
    props: {
      size: "small"
    },
    style: {
      padding: "8.5px 14px"
    }
  }, {
    props: ({
      ownerState: t
    }) => t.multiline,
    style: {
      padding: 0
    }
  }, {
    props: ({
      ownerState: t
    }) => t.startAdornment,
    style: {
      paddingLeft: 0
    }
  }, {
    props: ({
      ownerState: t
    }) => t.endAdornment,
    style: {
      paddingRight: 0
    }
  }]
}))), Mi = /* @__PURE__ */ x.forwardRef(function(t, n) {
  const r = Ae({
    props: t,
    name: "MuiOutlinedInput"
  }), {
    components: s = {},
    fullWidth: i = !1,
    inputComponent: a = "input",
    label: l,
    multiline: c = !1,
    notched: u,
    slots: d = {},
    slotProps: f = {},
    type: y = "text",
    ...g
  } = r, h = HS(r), p = Sn(), m = qr({
    props: r,
    muiFormControl: p,
    states: ["color", "disabled", "error", "focused", "hiddenLabel", "size", "required"]
  }), b = {
    ...r,
    color: m.color || "primary",
    disabled: m.disabled,
    error: m.error,
    focused: m.focused,
    formControl: p,
    fullWidth: i,
    hiddenLabel: m.hiddenLabel,
    multiline: c,
    size: m.size,
    type: y
  }, C = d.root ?? s.Root ?? YS, O = d.input ?? s.Input ?? GS, [w, S] = Xe("notchedOutline", {
    elementType: KS,
    className: h.notchedOutline,
    shouldForwardComponentProp: !0,
    ownerState: b,
    externalForwardedProps: {
      slots: d,
      slotProps: f
    },
    additionalProps: {
      label: l != null && l !== "" && m.required ? /* @__PURE__ */ E.jsxs(x.Fragment, {
        children: [l, " ", "*"]
      }) : l
    }
  });
  return /* @__PURE__ */ E.jsx(Ri, {
    slots: {
      root: C,
      input: O
    },
    slotProps: f,
    renderSuffix: (P) => /* @__PURE__ */ E.jsx(w, {
      ...S,
      notched: typeof u < "u" ? u : !!(P.startAdornment || P.filled || P.focused)
    }),
    fullWidth: i,
    inputComponent: a,
    multiline: c,
    ref: n,
    type: y,
    ...g,
    classes: {
      ...h,
      notchedOutline: null
    }
  });
});
process.env.NODE_ENV !== "production" && (Mi.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * This prop helps users to fill forms faster, especially on mobile devices.
   * The name can be confusing, as it's more like an autofill.
   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
   */
  autoComplete: o.string,
  /**
   * If `true`, the `input` element is focused during the first mount.
   */
  autoFocus: o.bool,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: o.object,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * The prop defaults to the value (`'primary'`) inherited from the parent FormControl component.
   */
  color: o.oneOfType([o.oneOf(["primary", "secondary"]), o.string]),
  /**
   * The components used for each slot inside.
   *
   * @deprecated use the `slots` prop instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   *
   * @default {}
   */
  components: o.shape({
    Input: o.elementType,
    Root: o.elementType
  }),
  /**
   * The default value. Use when the component is not controlled.
   */
  defaultValue: o.any,
  /**
   * If `true`, the component is disabled.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */
  disabled: o.bool,
  /**
   * End `InputAdornment` for this component.
   */
  endAdornment: o.node,
  /**
   * If `true`, the `input` will indicate an error.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */
  error: o.bool,
  /**
   * If `true`, the `input` will take up the full width of its container.
   * @default false
   */
  fullWidth: o.bool,
  /**
   * The id of the `input` element.
   */
  id: o.string,
  /**
   * The component used for the `input` element.
   * Either a string to use a HTML element or a component.
   * @default 'input'
   */
  inputComponent: o.elementType,
  /**
   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/input#attributes) applied to the `input` element.
   * @default {}
   */
  inputProps: o.object,
  /**
   * Pass a ref to the `input` element.
   */
  inputRef: lt,
  /**
   * The label of the `input`. It is only used for layout. The actual labelling
   * is handled by `InputLabel`.
   */
  label: o.node,
  /**
   * If `dense`, will adjust vertical spacing. This is normally obtained via context from
   * FormControl.
   * The prop defaults to the value (`'none'`) inherited from the parent FormControl component.
   */
  margin: o.oneOf(["dense", "none"]),
  /**
   * Maximum number of rows to display when multiline option is set to true.
   */
  maxRows: o.oneOfType([o.number, o.string]),
  /**
   * Minimum number of rows to display when multiline option is set to true.
   */
  minRows: o.oneOfType([o.number, o.string]),
  /**
   * If `true`, a [TextareaAutosize](https://mui.com/material-ui/react-textarea-autosize/) element is rendered.
   * @default false
   */
  multiline: o.bool,
  /**
   * Name attribute of the `input` element.
   */
  name: o.string,
  /**
   * If `true`, the outline is notched to accommodate the label.
   */
  notched: o.bool,
  /**
   * Callback fired when the value is changed.
   *
   * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (string).
   */
  onChange: o.func,
  /**
   * The short hint displayed in the `input` before the user enters a value.
   */
  placeholder: o.string,
  /**
   * It prevents the user from changing the value of the field
   * (not from interacting with the field).
   */
  readOnly: o.bool,
  /**
   * If `true`, the `input` element is required.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */
  required: o.bool,
  /**
   * Number of rows to display when multiline option is set to true.
   */
  rows: o.oneOfType([o.number, o.string]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: o.shape({
    input: o.object,
    notchedOutline: o.oneOfType([o.func, o.object]),
    root: o.object
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: o.shape({
    input: o.elementType,
    notchedOutline: o.elementType,
    root: o.elementType
  }),
  /**
   * Start `InputAdornment` for this component.
   */
  startAdornment: o.node,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: o.oneOfType([o.arrayOf(o.oneOfType([o.func, o.object, o.bool])), o.func, o.object]),
  /**
   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/input#input_types).
   * @default 'text'
   */
  type: o.string,
  /**
   * The value of the `input` element, required for a controlled component.
   */
  value: o.any
});
Mi.muiName = "Input";
function XS(e) {
  return we("MuiFormLabel", e);
}
const So = xe("MuiFormLabel", ["root", "colorSecondary", "focused", "disabled", "error", "filled", "required", "asterisk"]), QS = (e) => {
  const {
    classes: t,
    color: n,
    focused: r,
    disabled: s,
    error: i,
    filled: a,
    required: l
  } = e, c = {
    root: ["root", `color${le(n)}`, s && "disabled", i && "error", a && "filled", r && "focused", l && "required"],
    asterisk: ["asterisk", i && "error"]
  };
  return be(c, XS, t);
}, ZS = Q("label", {
  name: "MuiFormLabel",
  slot: "Root",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e;
    return [t.root, n.color === "secondary" && t.colorSecondary, n.filled && t.filled];
  }
})(qe(({
  theme: e
}) => ({
  color: (e.vars || e).palette.text.secondary,
  ...e.typography.body1,
  lineHeight: "1.4375em",
  padding: 0,
  position: "relative",
  variants: [...Object.entries(e.palette).filter(Mt()).map(([t]) => ({
    props: {
      color: t
    },
    style: {
      [`&.${So.focused}`]: {
        color: (e.vars || e).palette[t].main
      }
    }
  })), {
    props: {},
    style: {
      [`&.${So.disabled}`]: {
        color: (e.vars || e).palette.text.disabled
      },
      [`&.${So.error}`]: {
        color: (e.vars || e).palette.error.main
      }
    }
  }]
}))), JS = Q("span", {
  name: "MuiFormLabel",
  slot: "Asterisk"
})(qe(({
  theme: e
}) => ({
  [`&.${So.error}`]: {
    color: (e.vars || e).palette.error.main
  }
}))), Wp = /* @__PURE__ */ x.forwardRef(function(t, n) {
  const r = Ae({
    props: t,
    name: "MuiFormLabel"
  }), {
    children: s,
    className: i,
    color: a,
    component: l = "label",
    disabled: c,
    error: u,
    filled: d,
    focused: f,
    required: y,
    ...g
  } = r, h = Sn(), p = qr({
    props: r,
    muiFormControl: h,
    states: ["color", "required", "focused", "disabled", "error", "filled"]
  }), m = {
    ...r,
    color: p.color || "primary",
    component: l,
    disabled: p.disabled,
    error: p.error,
    filled: p.filled,
    focused: p.focused,
    required: p.required
  }, b = QS(m);
  return /* @__PURE__ */ E.jsxs(ZS, {
    as: l,
    ownerState: m,
    className: pe(b.root, i),
    ref: n,
    ...g,
    children: [s, p.required && /* @__PURE__ */ E.jsxs(JS, {
      ownerState: m,
      "aria-hidden": !0,
      className: b.asterisk,
      children: [" ", "*"]
    })]
  });
});
process.env.NODE_ENV !== "production" && (Wp.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: o.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: o.object,
  /**
   * @ignore
   */
  className: o.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   */
  color: o.oneOfType([o.oneOf(["error", "info", "primary", "secondary", "success", "warning"]), o.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: o.elementType,
  /**
   * If `true`, the label should be displayed in a disabled state.
   */
  disabled: o.bool,
  /**
   * If `true`, the label is displayed in an error state.
   */
  error: o.bool,
  /**
   * If `true`, the label should use filled classes key.
   */
  filled: o.bool,
  /**
   * If `true`, the input of this label is focused (used by `FormGroup` components).
   */
  focused: o.bool,
  /**
   * If `true`, the label will indicate that the `input` is required.
   */
  required: o.bool,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: o.oneOfType([o.arrayOf(o.oneOfType([o.func, o.object, o.bool])), o.func, o.object])
});
function eE(e) {
  return we("MuiInputLabel", e);
}
xe("MuiInputLabel", ["root", "focused", "disabled", "error", "required", "asterisk", "formControl", "sizeSmall", "shrink", "animated", "standard", "filled", "outlined"]);
const tE = (e) => {
  const {
    classes: t,
    formControl: n,
    size: r,
    shrink: s,
    disableAnimation: i,
    variant: a,
    required: l
  } = e, c = {
    root: ["root", n && "formControl", !i && "animated", s && "shrink", r && r !== "medium" && `size${le(r)}`, a],
    asterisk: [l && "asterisk"]
  }, u = be(c, eE, t);
  return {
    ...t,
    // forward the focused, disabled, etc. classes to the FormLabel
    ...u
  };
}, nE = Q(Wp, {
  shouldForwardProp: (e) => qt(e) || e === "classes",
  name: "MuiInputLabel",
  slot: "Root",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e;
    return [{
      [`& .${So.asterisk}`]: t.asterisk
    }, t.root, n.formControl && t.formControl, n.size === "small" && t.sizeSmall, n.shrink && t.shrink, !n.disableAnimation && t.animated, n.focused && t.focused, t[n.variant]];
  }
})(qe(({
  theme: e
}) => ({
  display: "block",
  transformOrigin: "top left",
  whiteSpace: "nowrap",
  overflow: "hidden",
  textOverflow: "ellipsis",
  maxWidth: "100%",
  variants: [{
    props: ({
      ownerState: t
    }) => t.formControl,
    style: {
      position: "absolute",
      left: 0,
      top: 0,
      // slight alteration to spec spacing to match visual spec result
      transform: "translate(0, 20px) scale(1)"
    }
  }, {
    props: {
      size: "small"
    },
    style: {
      // Compensation for the `Input.inputSizeSmall` style.
      transform: "translate(0, 17px) scale(1)"
    }
  }, {
    props: ({
      ownerState: t
    }) => t.shrink,
    style: {
      transform: "translate(0, -1.5px) scale(0.75)",
      transformOrigin: "top left",
      maxWidth: "133%"
    }
  }, {
    props: ({
      ownerState: t
    }) => !t.disableAnimation,
    style: {
      transition: e.transitions.create(["color", "transform", "max-width"], {
        duration: e.transitions.duration.shorter,
        easing: e.transitions.easing.easeOut
      })
    }
  }, {
    props: {
      variant: "filled"
    },
    style: {
      // Chrome's autofill feature gives the input field a yellow background.
      // Since the input field is behind the label in the HTML tree,
      // the input field is drawn last and hides the label with an opaque background color.
      // zIndex: 1 will raise the label above opaque background-colors of input.
      zIndex: 1,
      pointerEvents: "none",
      transform: "translate(12px, 16px) scale(1)",
      maxWidth: "calc(100% - 24px)"
    }
  }, {
    props: {
      variant: "filled",
      size: "small"
    },
    style: {
      transform: "translate(12px, 13px) scale(1)"
    }
  }, {
    props: ({
      variant: t,
      ownerState: n
    }) => t === "filled" && n.shrink,
    style: {
      userSelect: "none",
      pointerEvents: "auto",
      transform: "translate(12px, 7px) scale(0.75)",
      maxWidth: "calc(133% - 24px)"
    }
  }, {
    props: ({
      variant: t,
      ownerState: n,
      size: r
    }) => t === "filled" && n.shrink && r === "small",
    style: {
      transform: "translate(12px, 4px) scale(0.75)"
    }
  }, {
    props: {
      variant: "outlined"
    },
    style: {
      // see comment above on filled.zIndex
      zIndex: 1,
      pointerEvents: "none",
      transform: "translate(14px, 16px) scale(1)",
      maxWidth: "calc(100% - 24px)"
    }
  }, {
    props: {
      variant: "outlined",
      size: "small"
    },
    style: {
      transform: "translate(14px, 9px) scale(1)"
    }
  }, {
    props: ({
      variant: t,
      ownerState: n
    }) => t === "outlined" && n.shrink,
    style: {
      userSelect: "none",
      pointerEvents: "auto",
      // Theoretically, we should have (8+5)*2/0.75 = 34px
      // but it feels a better when it bleeds a bit on the left, so 32px.
      maxWidth: "calc(133% - 32px)",
      transform: "translate(14px, -9px) scale(0.75)"
    }
  }]
}))), _l = /* @__PURE__ */ x.forwardRef(function(t, n) {
  const r = Ae({
    name: "MuiInputLabel",
    props: t
  }), {
    disableAnimation: s = !1,
    margin: i,
    shrink: a,
    variant: l,
    className: c,
    ...u
  } = r, d = Sn();
  let f = a;
  typeof f > "u" && d && (f = d.filled || d.focused || d.adornedStart);
  const y = qr({
    props: r,
    muiFormControl: d,
    states: ["size", "variant", "required", "focused"]
  }), g = {
    ...r,
    disableAnimation: s,
    formControl: d,
    shrink: f,
    size: y.size,
    variant: y.variant,
    required: y.required,
    focused: y.focused
  }, h = tE(g);
  return /* @__PURE__ */ E.jsx(nE, {
    "data-shrink": f,
    ref: n,
    className: pe(h.root, c),
    ...u,
    ownerState: g,
    classes: h
  });
});
process.env.NODE_ENV !== "production" && (_l.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: o.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: o.object,
  /**
   * @ignore
   */
  className: o.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   */
  color: o.oneOfType([o.oneOf(["error", "info", "primary", "secondary", "success", "warning"]), o.string]),
  /**
   * If `true`, the transition animation is disabled.
   * @default false
   */
  disableAnimation: o.bool,
  /**
   * If `true`, the component is disabled.
   */
  disabled: o.bool,
  /**
   * If `true`, the label is displayed in an error state.
   */
  error: o.bool,
  /**
   * If `true`, the `input` of this label is focused.
   */
  focused: o.bool,
  /**
   * If `dense`, will adjust vertical spacing. This is normally obtained via context from
   * FormControl.
   */
  margin: o.oneOf(["dense"]),
  /**
   * if `true`, the label will indicate that the `input` is required.
   */
  required: o.bool,
  /**
   * If `true`, the label is shrunk.
   */
  shrink: o.bool,
  /**
   * The size of the component.
   * @default 'medium'
   */
  size: o.oneOfType([o.oneOf(["medium", "small"]), o.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: o.oneOfType([o.arrayOf(o.oneOfType([o.func, o.object, o.bool])), o.func, o.object]),
  /**
   * The variant to use.
   */
  variant: o.oneOf(["filled", "outlined", "standard"])
});
function rE(e) {
  return we("MuiFormControl", e);
}
xe("MuiFormControl", ["root", "marginNone", "marginNormal", "marginDense", "fullWidth", "disabled"]);
const oE = (e) => {
  const {
    classes: t,
    margin: n,
    fullWidth: r
  } = e, s = {
    root: ["root", n !== "none" && `margin${le(n)}`, r && "fullWidth"]
  };
  return be(s, rE, t);
}, sE = Q("div", {
  name: "MuiFormControl",
  slot: "Root",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e;
    return [t.root, t[`margin${le(n.margin)}`], n.fullWidth && t.fullWidth];
  }
})({
  display: "inline-flex",
  flexDirection: "column",
  position: "relative",
  // Reset fieldset default style.
  minWidth: 0,
  padding: 0,
  margin: 0,
  border: 0,
  verticalAlign: "top",
  // Fix alignment issue on Safari.
  variants: [{
    props: {
      margin: "normal"
    },
    style: {
      marginTop: 16,
      marginBottom: 8
    }
  }, {
    props: {
      margin: "dense"
    },
    style: {
      marginTop: 8,
      marginBottom: 4
    }
  }, {
    props: {
      fullWidth: !0
    },
    style: {
      width: "100%"
    }
  }]
}), Vl = /* @__PURE__ */ x.forwardRef(function(t, n) {
  const r = Ae({
    props: t,
    name: "MuiFormControl"
  }), {
    children: s,
    className: i,
    color: a = "primary",
    component: l = "div",
    disabled: c = !1,
    error: u = !1,
    focused: d,
    fullWidth: f = !1,
    hiddenLabel: y = !1,
    margin: g = "none",
    required: h = !1,
    size: p = "medium",
    variant: m = "outlined",
    ...b
  } = r, C = {
    ...r,
    color: a,
    component: l,
    disabled: c,
    error: u,
    fullWidth: f,
    hiddenLabel: y,
    margin: g,
    required: h,
    size: p,
    variant: m
  }, O = oE(C), [w, S] = x.useState(() => {
    let N = !1;
    return s && x.Children.forEach(s, (_) => {
      if (!vo(_, ["Input", "Select"]))
        return;
      const G = vo(_, ["Select"]) ? _.props.input : _;
      G && IS(G.props) && (N = !0);
    }), N;
  }), [P, M] = x.useState(() => {
    let N = !1;
    return s && x.Children.forEach(s, (_) => {
      vo(_, ["Input", "Select"]) && (Ks(_.props, !0) || Ks(_.props.inputProps, !0)) && (N = !0);
    }), N;
  }), [F, A] = x.useState(!1);
  c && F && A(!1);
  const $ = d !== void 0 && !c ? d : F;
  let k;
  const v = x.useRef(!1);
  process.env.NODE_ENV !== "production" && (k = () => (v.current && console.error(["MUI: There are multiple `InputBase` components inside a FormControl.", "This creates visual inconsistencies, only use one `InputBase`."].join(`
`)), v.current = !0, () => {
    v.current = !1;
  }));
  const D = x.useCallback(() => {
    M(!0);
  }, []), T = x.useCallback(() => {
    M(!1);
  }, []), I = x.useMemo(() => ({
    adornedStart: w,
    setAdornedStart: S,
    color: a,
    disabled: c,
    error: u,
    filled: P,
    focused: $,
    fullWidth: f,
    hiddenLabel: y,
    size: p,
    onBlur: () => {
      A(!1);
    },
    onFocus: () => {
      A(!0);
    },
    onEmpty: T,
    onFilled: D,
    registerEffect: k,
    required: h,
    variant: m
  }), [w, a, c, u, P, $, f, y, k, T, D, h, p, m]);
  return /* @__PURE__ */ E.jsx(rs.Provider, {
    value: I,
    children: /* @__PURE__ */ E.jsx(sE, {
      as: l,
      ownerState: C,
      className: pe(O.root, i),
      ref: n,
      ...b,
      children: s
    })
  });
});
process.env.NODE_ENV !== "production" && (Vl.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: o.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: o.object,
  /**
   * @ignore
   */
  className: o.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * @default 'primary'
   */
  color: o.oneOfType([o.oneOf(["primary", "secondary", "error", "info", "success", "warning"]), o.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: o.elementType,
  /**
   * If `true`, the label, input and helper text should be displayed in a disabled state.
   * @default false
   */
  disabled: o.bool,
  /**
   * If `true`, the label is displayed in an error state.
   * @default false
   */
  error: o.bool,
  /**
   * If `true`, the component is displayed in focused state.
   */
  focused: o.bool,
  /**
   * If `true`, the component will take up the full width of its container.
   * @default false
   */
  fullWidth: o.bool,
  /**
   * If `true`, the label is hidden.
   * This is used to increase density for a `FilledInput`.
   * Be sure to add `aria-label` to the `input` element.
   * @default false
   */
  hiddenLabel: o.bool,
  /**
   * If `dense` or `normal`, will adjust vertical spacing of this and contained components.
   * @default 'none'
   */
  margin: o.oneOf(["dense", "none", "normal"]),
  /**
   * If `true`, the label will indicate that the `input` is required.
   * @default false
   */
  required: o.bool,
  /**
   * The size of the component.
   * @default 'medium'
   */
  size: o.oneOfType([o.oneOf(["medium", "small"]), o.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: o.oneOfType([o.arrayOf(o.oneOfType([o.func, o.object, o.bool])), o.func, o.object]),
  /**
   * The variant to use.
   * @default 'outlined'
   */
  variant: o.oneOf(["filled", "outlined", "standard"])
});
function iE(e) {
  return we("MuiFormHelperText", e);
}
const Yu = xe("MuiFormHelperText", ["root", "error", "disabled", "sizeSmall", "sizeMedium", "contained", "focused", "filled", "required"]);
var Ku;
const aE = (e) => {
  const {
    classes: t,
    contained: n,
    size: r,
    disabled: s,
    error: i,
    filled: a,
    focused: l,
    required: c
  } = e, u = {
    root: ["root", s && "disabled", i && "error", r && `size${le(r)}`, n && "contained", l && "focused", a && "filled", c && "required"]
  };
  return be(u, iE, t);
}, lE = Q("p", {
  name: "MuiFormHelperText",
  slot: "Root",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e;
    return [t.root, n.size && t[`size${le(n.size)}`], n.contained && t.contained, n.filled && t.filled];
  }
})(qe(({
  theme: e
}) => ({
  color: (e.vars || e).palette.text.secondary,
  ...e.typography.caption,
  textAlign: "left",
  marginTop: 3,
  marginRight: 0,
  marginBottom: 0,
  marginLeft: 0,
  [`&.${Yu.disabled}`]: {
    color: (e.vars || e).palette.text.disabled
  },
  [`&.${Yu.error}`]: {
    color: (e.vars || e).palette.error.main
  },
  variants: [{
    props: {
      size: "small"
    },
    style: {
      marginTop: 4
    }
  }, {
    props: ({
      ownerState: t
    }) => t.contained,
    style: {
      marginLeft: 14,
      marginRight: 14
    }
  }]
}))), Ll = /* @__PURE__ */ x.forwardRef(function(t, n) {
  const r = Ae({
    props: t,
    name: "MuiFormHelperText"
  }), {
    children: s,
    className: i,
    component: a = "p",
    disabled: l,
    error: c,
    filled: u,
    focused: d,
    margin: f,
    required: y,
    variant: g,
    ...h
  } = r, p = Sn(), m = qr({
    props: r,
    muiFormControl: p,
    states: ["variant", "size", "disabled", "error", "filled", "focused", "required"]
  }), b = {
    ...r,
    component: a,
    contained: m.variant === "filled" || m.variant === "outlined",
    variant: m.variant,
    size: m.size,
    disabled: m.disabled,
    error: m.error,
    filled: m.filled,
    focused: m.focused,
    required: m.required
  };
  delete b.ownerState;
  const C = aE(b);
  return /* @__PURE__ */ E.jsx(lE, {
    as: a,
    className: pe(C.root, i),
    ref: n,
    ...h,
    ownerState: b,
    children: s === " " ? (
      // notranslate needed while Google Translate will not fix zero-width space issue
      Ku || (Ku = /* @__PURE__ */ E.jsx("span", {
        className: "notranslate",
        "aria-hidden": !0,
        children: "​"
      }))
    ) : s
  });
});
process.env.NODE_ENV !== "production" && (Ll.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   *
   * If `' '` is provided, the component reserves one line height for displaying a future message.
   */
  children: o.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: o.object,
  /**
   * @ignore
   */
  className: o.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: o.elementType,
  /**
   * If `true`, the helper text should be displayed in a disabled state.
   */
  disabled: o.bool,
  /**
   * If `true`, helper text should be displayed in an error state.
   */
  error: o.bool,
  /**
   * If `true`, the helper text should use filled classes key.
   */
  filled: o.bool,
  /**
   * If `true`, the helper text should use focused classes key.
   */
  focused: o.bool,
  /**
   * If `dense`, will adjust vertical spacing. This is normally obtained via context from
   * FormControl.
   */
  margin: o.oneOf(["dense"]),
  /**
   * If `true`, the helper text should use required classes key.
   */
  required: o.bool,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: o.oneOfType([o.arrayOf(o.oneOfType([o.func, o.object, o.bool])), o.func, o.object]),
  /**
   * The variant to use.
   */
  variant: o.oneOfType([o.oneOf(["filled", "outlined", "standard"]), o.string])
});
function zp(e = window) {
  const t = e.document.documentElement.clientWidth;
  return e.innerWidth - t;
}
function oa(e, t, n) {
  return e === t ? e.firstChild : t && t.nextElementSibling ? t.nextElementSibling : n ? null : e.firstChild;
}
function Gu(e, t, n) {
  return e === t ? n ? e.firstChild : e.lastChild : t && t.previousElementSibling ? t.previousElementSibling : n ? null : e.lastChild;
}
function Up(e, t) {
  if (t === void 0)
    return !0;
  let n = e.innerText;
  return n === void 0 && (n = e.textContent), n = n.trim().toLowerCase(), n.length === 0 ? !1 : t.repeating ? n[0] === t.keys[0] : n.startsWith(t.keys.join(""));
}
function oo(e, t, n, r, s, i) {
  let a = !1, l = s(e, t, t ? n : !1);
  for (; l; ) {
    if (l === e.firstChild) {
      if (a)
        return !1;
      a = !0;
    }
    const c = r ? !1 : l.disabled || l.getAttribute("aria-disabled") === "true";
    if (!l.hasAttribute("tabindex") || !Up(l, i) || c)
      l = s(e, l, n);
    else
      return l.focus(), !0;
  }
  return !1;
}
const qp = /* @__PURE__ */ x.forwardRef(function(t, n) {
  const {
    // private
    // eslint-disable-next-line react/prop-types
    actions: r,
    autoFocus: s = !1,
    autoFocusItem: i = !1,
    children: a,
    className: l,
    disabledItemsFocusable: c = !1,
    disableListWrap: u = !1,
    onKeyDown: d,
    variant: f = "selectedMenu",
    ...y
  } = t, g = x.useRef(null), h = x.useRef({
    keys: [],
    repeating: !0,
    previousKeyMatched: !0,
    lastTime: null
  });
  dt(() => {
    s && g.current.focus();
  }, [s]), x.useImperativeHandle(r, () => ({
    adjustStyleForScrollbar: (O, {
      direction: w
    }) => {
      const S = !g.current.style.width;
      if (O.clientHeight < g.current.clientHeight && S) {
        const P = `${zp(vn(O))}px`;
        g.current.style[w === "rtl" ? "paddingLeft" : "paddingRight"] = P, g.current.style.width = `calc(100% + ${P})`;
      }
      return g.current;
    }
  }), []);
  const p = (O) => {
    const w = g.current, S = O.key;
    if (O.ctrlKey || O.metaKey || O.altKey) {
      d && d(O);
      return;
    }
    const M = pt(w).activeElement;
    if (S === "ArrowDown")
      O.preventDefault(), oo(w, M, u, c, oa);
    else if (S === "ArrowUp")
      O.preventDefault(), oo(w, M, u, c, Gu);
    else if (S === "Home")
      O.preventDefault(), oo(w, null, u, c, oa);
    else if (S === "End")
      O.preventDefault(), oo(w, null, u, c, Gu);
    else if (S.length === 1) {
      const F = h.current, A = S.toLowerCase(), $ = performance.now();
      F.keys.length > 0 && ($ - F.lastTime > 500 ? (F.keys = [], F.repeating = !0, F.previousKeyMatched = !0) : F.repeating && A !== F.keys[0] && (F.repeating = !1)), F.lastTime = $, F.keys.push(A);
      const k = M && !F.repeating && Up(M, F);
      F.previousKeyMatched && (k || oo(w, M, !1, c, oa, F)) ? O.preventDefault() : F.previousKeyMatched = !1;
    }
    d && d(O);
  }, m = Ne(g, n);
  let b = -1;
  x.Children.forEach(a, (O, w) => {
    if (!/* @__PURE__ */ x.isValidElement(O)) {
      b === w && (b += 1, b >= a.length && (b = -1));
      return;
    }
    process.env.NODE_ENV !== "production" && lr.isFragment(O) && console.error(["MUI: The Menu component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join(`
`)), O.props.disabled || (f === "selectedMenu" && O.props.selected || b === -1) && (b = w), b === w && (O.props.disabled || O.props.muiSkipListHighlight || O.type.muiSkipListHighlight) && (b += 1, b >= a.length && (b = -1));
  });
  const C = x.Children.map(a, (O, w) => {
    if (w === b) {
      const S = {};
      return i && (S.autoFocus = !0), O.props.tabIndex === void 0 && f === "selectedMenu" && (S.tabIndex = 0), /* @__PURE__ */ x.cloneElement(O, S);
    }
    return O;
  });
  return /* @__PURE__ */ E.jsx(Al, {
    role: "menu",
    ref: m,
    className: l,
    onKeyDown: p,
    tabIndex: s ? 0 : -1,
    ...y,
    children: C
  });
});
process.env.NODE_ENV !== "production" && (qp.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * If `true`, will focus the `[role="menu"]` container and move into tab order.
   * @default false
   */
  autoFocus: o.bool,
  /**
   * If `true`, will focus the first menuitem if `variant="menu"` or selected item
   * if `variant="selectedMenu"`.
   * @default false
   */
  autoFocusItem: o.bool,
  /**
   * MenuList contents, normally `MenuItem`s.
   */
  children: o.node,
  /**
   * @ignore
   */
  className: o.string,
  /**
   * If `true`, will allow focus on disabled items.
   * @default false
   */
  disabledItemsFocusable: o.bool,
  /**
   * If `true`, the menu items will not wrap focus.
   * @default false
   */
  disableListWrap: o.bool,
  /**
   * @ignore
   */
  onKeyDown: o.func,
  /**
   * The variant to use. Use `menu` to prevent selected items from impacting the initial focus
   * and the vertical alignment relative to the anchor element.
   * @default 'selectedMenu'
   */
  variant: o.oneOf(["menu", "selectedMenu"])
});
function cE(e) {
  const t = pt(e);
  return t.body === e ? vn(e).innerWidth > t.documentElement.clientWidth : e.scrollHeight > e.clientHeight;
}
function Eo(e, t) {
  t ? e.setAttribute("aria-hidden", "true") : e.removeAttribute("aria-hidden");
}
function Xu(e) {
  return parseInt(vn(e).getComputedStyle(e).paddingRight, 10) || 0;
}
function uE(e) {
  const n = ["TEMPLATE", "SCRIPT", "STYLE", "LINK", "MAP", "META", "NOSCRIPT", "PICTURE", "COL", "COLGROUP", "PARAM", "SLOT", "SOURCE", "TRACK"].includes(e.tagName), r = e.tagName === "INPUT" && e.getAttribute("type") === "hidden";
  return n || r;
}
function Qu(e, t, n, r, s) {
  const i = [t, n, ...r];
  [].forEach.call(e.children, (a) => {
    const l = !i.includes(a), c = !uE(a);
    l && c && Eo(a, s);
  });
}
function sa(e, t) {
  let n = -1;
  return e.some((r, s) => t(r) ? (n = s, !0) : !1), n;
}
function dE(e, t) {
  const n = [], r = e.container;
  if (!t.disableScrollLock) {
    if (cE(r)) {
      const a = zp(vn(r));
      n.push({
        value: r.style.paddingRight,
        property: "padding-right",
        el: r
      }), r.style.paddingRight = `${Xu(r) + a}px`;
      const l = pt(r).querySelectorAll(".mui-fixed");
      [].forEach.call(l, (c) => {
        n.push({
          value: c.style.paddingRight,
          property: "padding-right",
          el: c
        }), c.style.paddingRight = `${Xu(c) + a}px`;
      });
    }
    let i;
    if (r.parentNode instanceof DocumentFragment)
      i = pt(r).body;
    else {
      const a = r.parentElement, l = vn(r);
      i = a?.nodeName === "HTML" && l.getComputedStyle(a).overflowY === "scroll" ? a : r;
    }
    n.push({
      value: i.style.overflow,
      property: "overflow",
      el: i
    }, {
      value: i.style.overflowX,
      property: "overflow-x",
      el: i
    }, {
      value: i.style.overflowY,
      property: "overflow-y",
      el: i
    }), i.style.overflow = "hidden";
  }
  return () => {
    n.forEach(({
      value: i,
      el: a,
      property: l
    }) => {
      i ? a.style.setProperty(l, i) : a.style.removeProperty(l);
    });
  };
}
function fE(e) {
  const t = [];
  return [].forEach.call(e.children, (n) => {
    n.getAttribute("aria-hidden") === "true" && t.push(n);
  }), t;
}
class pE {
  constructor() {
    this.modals = [], this.containers = [];
  }
  add(t, n) {
    let r = this.modals.indexOf(t);
    if (r !== -1)
      return r;
    r = this.modals.length, this.modals.push(t), t.modalRef && Eo(t.modalRef, !1);
    const s = fE(n);
    Qu(n, t.mount, t.modalRef, s, !0);
    const i = sa(this.containers, (a) => a.container === n);
    return i !== -1 ? (this.containers[i].modals.push(t), r) : (this.containers.push({
      modals: [t],
      container: n,
      restore: null,
      hiddenSiblings: s
    }), r);
  }
  mount(t, n) {
    const r = sa(this.containers, (i) => i.modals.includes(t)), s = this.containers[r];
    s.restore || (s.restore = dE(s, n));
  }
  remove(t, n = !0) {
    const r = this.modals.indexOf(t);
    if (r === -1)
      return r;
    const s = sa(this.containers, (a) => a.modals.includes(t)), i = this.containers[s];
    if (i.modals.splice(i.modals.indexOf(t), 1), this.modals.splice(r, 1), i.modals.length === 0)
      i.restore && i.restore(), t.modalRef && Eo(t.modalRef, n), Qu(i.container, t.mount, t.modalRef, i.hiddenSiblings, !1), this.containers.splice(s, 1);
    else {
      const a = i.modals[i.modals.length - 1];
      a.modalRef && Eo(a.modalRef, !1);
    }
    return r;
  }
  isTopModal(t) {
    return this.modals.length > 0 && this.modals[this.modals.length - 1] === t;
  }
}
function hE(e) {
  return we("MuiBackdrop", e);
}
xe("MuiBackdrop", ["root", "invisible"]);
const mE = (e) => {
  const {
    classes: t,
    invisible: n
  } = e;
  return be({
    root: ["root", n && "invisible"]
  }, hE, t);
}, yE = Q("div", {
  name: "MuiBackdrop",
  slot: "Root",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e;
    return [t.root, n.invisible && t.invisible];
  }
})({
  position: "fixed",
  display: "flex",
  alignItems: "center",
  justifyContent: "center",
  right: 0,
  bottom: 0,
  top: 0,
  left: 0,
  backgroundColor: "rgba(0, 0, 0, 0.5)",
  WebkitTapHighlightColor: "transparent",
  variants: [{
    props: {
      invisible: !0
    },
    style: {
      backgroundColor: "transparent"
    }
  }]
}), Bl = /* @__PURE__ */ x.forwardRef(function(t, n) {
  const r = Ae({
    props: t,
    name: "MuiBackdrop"
  }), {
    children: s,
    className: i,
    component: a = "div",
    invisible: l = !1,
    open: c,
    components: u = {},
    componentsProps: d = {},
    slotProps: f = {},
    slots: y = {},
    TransitionComponent: g,
    transitionDuration: h,
    ...p
  } = r, m = {
    ...r,
    component: a,
    invisible: l
  }, b = mE(m), C = {
    transition: g,
    root: u.Root,
    ...y
  }, O = {
    ...d,
    ...f
  }, w = {
    component: a,
    slots: C,
    slotProps: O
  }, [S, P] = Xe("root", {
    elementType: yE,
    externalForwardedProps: w,
    className: pe(b.root, i),
    ownerState: m
  }), [M, F] = Xe("transition", {
    elementType: An,
    externalForwardedProps: w,
    ownerState: m
  });
  return /* @__PURE__ */ E.jsx(M, {
    in: c,
    timeout: h,
    ...p,
    ...F,
    children: /* @__PURE__ */ E.jsx(S, {
      "aria-hidden": !0,
      ...P,
      classes: b,
      ref: n,
      children: s
    })
  });
});
process.env.NODE_ENV !== "production" && (Bl.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: o.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: o.object,
  /**
   * @ignore
   */
  className: o.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: o.elementType,
  /**
   * The components used for each slot inside.
   *
   * @deprecated Use the `slots` prop instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   *
   * @default {}
   */
  components: o.shape({
    Root: o.elementType
  }),
  /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   *
   * @deprecated Use the `slotProps` prop instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   *
   * @default {}
   */
  componentsProps: o.shape({
    root: o.object
  }),
  /**
   * If `true`, the backdrop is invisible.
   * It can be used when rendering a popover or a custom select component.
   * @default false
   */
  invisible: o.bool,
  /**
   * If `true`, the component is shown.
   */
  open: o.bool.isRequired,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: o.shape({
    root: o.oneOfType([o.func, o.object]),
    transition: o.oneOfType([o.func, o.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: o.shape({
    root: o.elementType,
    transition: o.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: o.oneOfType([o.arrayOf(o.oneOfType([o.func, o.object, o.bool])), o.func, o.object]),
  /**
   * The component used for the transition.
   * [Follow this guide](https://mui.com/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
   * @default Fade
   * @deprecated Use `slots.transition` instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  TransitionComponent: o.elementType,
  /**
   * The duration for the transition, in milliseconds.
   * You may specify a single timeout for all transitions, or individually with an object.
   */
  transitionDuration: o.oneOfType([o.number, o.shape({
    appear: o.number,
    enter: o.number,
    exit: o.number
  })])
});
function gE(e) {
  return typeof e == "function" ? e() : e;
}
function bE(e) {
  return e ? e.props.hasOwnProperty("in") : !1;
}
const Zu = () => {
}, vs = new pE();
function vE(e) {
  const {
    container: t,
    disableEscapeKeyDown: n = !1,
    disableScrollLock: r = !1,
    closeAfterTransition: s = !1,
    onTransitionEnter: i,
    onTransitionExited: a,
    children: l,
    onClose: c,
    open: u,
    rootRef: d
  } = e, f = x.useRef({}), y = x.useRef(null), g = x.useRef(null), h = Ne(g, d), [p, m] = x.useState(!u), b = bE(l);
  let C = !0;
  (e["aria-hidden"] === "false" || e["aria-hidden"] === !1) && (C = !1);
  const O = () => pt(y.current), w = () => (f.current.modalRef = g.current, f.current.mount = y.current, f.current), S = () => {
    vs.mount(w(), {
      disableScrollLock: r
    }), g.current && (g.current.scrollTop = 0);
  }, P = de(() => {
    const I = gE(t) || O().body;
    vs.add(w(), I), g.current && S();
  }), M = () => vs.isTopModal(w()), F = de((I) => {
    y.current = I, I && (u && M() ? S() : g.current && Eo(g.current, C));
  }), A = x.useCallback(() => {
    vs.remove(w(), C);
  }, [C]);
  x.useEffect(() => () => {
    A();
  }, [A]), x.useEffect(() => {
    u ? P() : (!b || !s) && A();
  }, [u, A, b, s, P]);
  const $ = (I) => (N) => {
    I.onKeyDown?.(N), !(N.key !== "Escape" || N.which === 229 || // Wait until IME is settled.
    !M()) && (n || (N.stopPropagation(), c && c(N, "escapeKeyDown")));
  }, k = (I) => (N) => {
    I.onClick?.(N), N.target === N.currentTarget && c && c(N, "backdropClick");
  };
  return {
    getRootProps: (I = {}) => {
      const N = Xf(e);
      delete N.onTransitionEnter, delete N.onTransitionExited;
      const _ = {
        ...N,
        ...I
      };
      return {
        /*
         * Marking an element with the role presentation indicates to assistive technology
         * that this element should be ignored; it exists to support the web application and
         * is not meant for humans to interact with directly.
         * https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/no-static-element-interactions.md
         */
        role: "presentation",
        ..._,
        onKeyDown: $(_),
        ref: h
      };
    },
    getBackdropProps: (I = {}) => {
      const N = I;
      return {
        "aria-hidden": !0,
        ...N,
        onClick: k(N),
        open: u
      };
    },
    getTransitionProps: () => {
      const I = () => {
        m(!1), i && i();
      }, N = () => {
        m(!0), a && a(), s && A();
      };
      return {
        onEnter: Fu(I, l?.props.onEnter ?? Zu),
        onExited: Fu(N, l?.props.onExited ?? Zu)
      };
    },
    rootRef: h,
    portalRef: F,
    isTopModal: M,
    exited: p,
    hasTransition: b
  };
}
function xE(e) {
  return we("MuiModal", e);
}
xe("MuiModal", ["root", "hidden", "backdrop"]);
const wE = (e) => {
  const {
    open: t,
    exited: n,
    classes: r
  } = e;
  return be({
    root: ["root", !t && n && "hidden"],
    backdrop: ["backdrop"]
  }, xE, r);
}, SE = Q("div", {
  name: "MuiModal",
  slot: "Root",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e;
    return [t.root, !n.open && n.exited && t.hidden];
  }
})(qe(({
  theme: e
}) => ({
  position: "fixed",
  zIndex: (e.vars || e).zIndex.modal,
  right: 0,
  bottom: 0,
  top: 0,
  left: 0,
  variants: [{
    props: ({
      ownerState: t
    }) => !t.open && t.exited,
    style: {
      visibility: "hidden"
    }
  }]
}))), EE = Q(Bl, {
  name: "MuiModal",
  slot: "Backdrop"
})({
  zIndex: -1
}), Wl = /* @__PURE__ */ x.forwardRef(function(t, n) {
  const r = Ae({
    name: "MuiModal",
    props: t
  }), {
    BackdropComponent: s = EE,
    BackdropProps: i,
    classes: a,
    className: l,
    closeAfterTransition: c = !1,
    children: u,
    container: d,
    component: f,
    components: y = {},
    componentsProps: g = {},
    disableAutoFocus: h = !1,
    disableEnforceFocus: p = !1,
    disableEscapeKeyDown: m = !1,
    disablePortal: b = !1,
    disableRestoreFocus: C = !1,
    disableScrollLock: O = !1,
    hideBackdrop: w = !1,
    keepMounted: S = !1,
    onClose: P,
    onTransitionEnter: M,
    onTransitionExited: F,
    open: A,
    slotProps: $ = {},
    slots: k = {},
    // eslint-disable-next-line react/prop-types
    theme: v,
    ...D
  } = r, T = {
    ...r,
    closeAfterTransition: c,
    disableAutoFocus: h,
    disableEnforceFocus: p,
    disableEscapeKeyDown: m,
    disablePortal: b,
    disableRestoreFocus: C,
    disableScrollLock: O,
    hideBackdrop: w,
    keepMounted: S
  }, {
    getRootProps: I,
    getBackdropProps: N,
    getTransitionProps: _,
    portalRef: G,
    isTopModal: L,
    exited: V,
    hasTransition: R
  } = vE({
    ...T,
    rootRef: n
  }), B = {
    ...T,
    exited: V
  }, H = wE(B), K = {};
  if (u.props.tabIndex === void 0 && (K.tabIndex = "-1"), R) {
    const {
      onEnter: q,
      onExited: X
    } = _();
    K.onEnter = q, K.onExited = X;
  }
  const te = {
    slots: {
      root: y.Root,
      backdrop: y.Backdrop,
      ...k
    },
    slotProps: {
      ...g,
      ...$
    }
  }, [ee, J] = Xe("root", {
    ref: n,
    elementType: SE,
    externalForwardedProps: {
      ...te,
      ...D,
      component: f
    },
    getSlotProps: I,
    ownerState: B,
    className: pe(l, H?.root, !B.open && B.exited && H?.hidden)
  }), [ie, re] = Xe("backdrop", {
    ref: i?.ref,
    elementType: s,
    externalForwardedProps: te,
    shouldForwardComponentProp: !0,
    additionalProps: i,
    getSlotProps: (q) => N({
      ...q,
      onClick: (X) => {
        q?.onClick && q.onClick(X);
      }
    }),
    className: pe(i?.className, H?.backdrop),
    ownerState: B
  });
  return !S && !A && (!R || V) ? null : /* @__PURE__ */ E.jsx(Io, {
    ref: G,
    container: d,
    disablePortal: b,
    children: /* @__PURE__ */ E.jsxs(ee, {
      ...J,
      children: [!w && s ? /* @__PURE__ */ E.jsx(ie, {
        ...re
      }) : null, /* @__PURE__ */ E.jsx(No, {
        disableEnforceFocus: p,
        disableAutoFocus: h,
        disableRestoreFocus: C,
        isEnabled: L,
        open: A,
        children: /* @__PURE__ */ x.cloneElement(u, K)
      })]
    })
  });
});
process.env.NODE_ENV !== "production" && (Wl.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * A backdrop component. This prop enables custom backdrop rendering.
   * @deprecated Use `slots.backdrop` instead. While this prop currently works, it will be removed in the next major version.
   * Use the `slots.backdrop` prop to make your application ready for the next version of Material UI.
   * @default styled(Backdrop, {
   *   name: 'MuiModal',
   *   slot: 'Backdrop',
   * })({
   *   zIndex: -1,
   * })
   */
  BackdropComponent: o.elementType,
  /**
   * Props applied to the [`Backdrop`](https://mui.com/material-ui/api/backdrop/) element.
   * @deprecated Use `slotProps.backdrop` instead.
   */
  BackdropProps: o.object,
  /**
   * A single child content element.
   */
  children: Xo.isRequired,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: o.object,
  /**
   * @ignore
   */
  className: o.string,
  /**
   * When set to true the Modal waits until a nested Transition is completed before closing.
   * @default false
   */
  closeAfterTransition: o.bool,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: o.elementType,
  /**
   * The components used for each slot inside.
   *
   * @deprecated Use the `slots` prop instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   *
   * @default {}
   */
  components: o.shape({
    Backdrop: o.elementType,
    Root: o.elementType
  }),
  /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   *
   * @deprecated Use the `slotProps` prop instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   *
   * @default {}
   */
  componentsProps: o.shape({
    backdrop: o.oneOfType([o.func, o.object]),
    root: o.oneOfType([o.func, o.object])
  }),
  /**
   * An HTML element or function that returns one.
   * The `container` will have the portal children appended to it.
   *
   * You can also provide a callback, which is called in a React layout effect.
   * This lets you set the container from a ref, and also makes server-side rendering possible.
   *
   * By default, it uses the body of the top-level document object,
   * so it's simply `document.body` most of the time.
   */
  container: o.oneOfType([gn, o.func]),
  /**
   * If `true`, the modal will not automatically shift focus to itself when it opens, and
   * replace it to the last focused element when it closes.
   * This also works correctly with any modal children that have the `disableAutoFocus` prop.
   *
   * Generally this should never be set to `true` as it makes the modal less
   * accessible to assistive technologies, like screen readers.
   * @default false
   */
  disableAutoFocus: o.bool,
  /**
   * If `true`, the modal will not prevent focus from leaving the modal while open.
   *
   * Generally this should never be set to `true` as it makes the modal less
   * accessible to assistive technologies, like screen readers.
   * @default false
   */
  disableEnforceFocus: o.bool,
  /**
   * If `true`, hitting escape will not fire the `onClose` callback.
   * @default false
   */
  disableEscapeKeyDown: o.bool,
  /**
   * The `children` will be under the DOM hierarchy of the parent component.
   * @default false
   */
  disablePortal: o.bool,
  /**
   * If `true`, the modal will not restore focus to previously focused element once
   * modal is hidden or unmounted.
   * @default false
   */
  disableRestoreFocus: o.bool,
  /**
   * Disable the scroll lock behavior.
   * @default false
   */
  disableScrollLock: o.bool,
  /**
   * If `true`, the backdrop is not rendered.
   * @default false
   */
  hideBackdrop: o.bool,
  /**
   * Always keep the children in the DOM.
   * This prop can be useful in SEO situation or
   * when you want to maximize the responsiveness of the Modal.
   * @default false
   */
  keepMounted: o.bool,
  /**
   * Callback fired when the component requests to be closed.
   * The `reason` parameter can optionally be used to control the response to `onClose`.
   *
   * @param {object} event The event source of the callback.
   * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`.
   */
  onClose: o.func,
  /**
   * A function called when a transition enters.
   */
  onTransitionEnter: o.func,
  /**
   * A function called when a transition has exited.
   */
  onTransitionExited: o.func,
  /**
   * If `true`, the component is shown.
   */
  open: o.bool.isRequired,
  /**
   * The props used for each slot inside the Modal.
   * @default {}
   */
  slotProps: o.shape({
    backdrop: o.oneOfType([o.func, o.object]),
    root: o.oneOfType([o.func, o.object])
  }),
  /**
   * The components used for each slot inside the Modal.
   * Either a string to use a HTML element or a component.
   * @default {}
   */
  slots: o.shape({
    backdrop: o.elementType,
    root: o.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: o.oneOfType([o.arrayOf(o.oneOfType([o.func, o.object, o.bool])), o.func, o.object])
});
function OE(e) {
  return we("MuiPopover", e);
}
xe("MuiPopover", ["root", "paper"]);
function Ju(e, t) {
  let n = 0;
  return typeof t == "number" ? n = t : t === "center" ? n = e.height / 2 : t === "bottom" && (n = e.height), n;
}
function ed(e, t) {
  let n = 0;
  return typeof t == "number" ? n = t : t === "center" ? n = e.width / 2 : t === "right" && (n = e.width), n;
}
function td(e) {
  return [e.horizontal, e.vertical].map((t) => typeof t == "number" ? `${t}px` : t).join(" ");
}
function yo(e) {
  return typeof e == "function" ? e() : e;
}
const CE = (e) => {
  const {
    classes: t
  } = e;
  return be({
    root: ["root"],
    paper: ["paper"]
  }, OE, t);
}, PE = Q(Wl, {
  name: "MuiPopover",
  slot: "Root"
})({}), Hp = Q(Jo, {
  name: "MuiPopover",
  slot: "Paper"
})({
  position: "absolute",
  overflowY: "auto",
  overflowX: "hidden",
  // So we see the popover when it's empty.
  // It's most likely on issue on userland.
  minWidth: 16,
  minHeight: 16,
  maxWidth: "calc(100% - 32px)",
  maxHeight: "calc(100% - 32px)",
  // We disable the focus ring for mouse, touch and keyboard users.
  outline: 0
}), Yp = /* @__PURE__ */ x.forwardRef(function(t, n) {
  const r = Ae({
    props: t,
    name: "MuiPopover"
  }), {
    action: s,
    anchorEl: i,
    anchorOrigin: a = {
      vertical: "top",
      horizontal: "left"
    },
    anchorPosition: l,
    anchorReference: c = "anchorEl",
    children: u,
    className: d,
    container: f,
    elevation: y = 8,
    marginThreshold: g = 16,
    open: h,
    PaperProps: p = {},
    // TODO: remove in v7
    slots: m = {},
    slotProps: b = {},
    transformOrigin: C = {
      vertical: "top",
      horizontal: "left"
    },
    TransitionComponent: O,
    // TODO: remove in v7
    transitionDuration: w = "auto",
    TransitionProps: S = {},
    // TODO: remove in v7
    disableScrollLock: P = !1,
    ...M
  } = r, F = x.useRef(), A = {
    ...r,
    anchorOrigin: a,
    anchorReference: c,
    elevation: y,
    marginThreshold: g,
    transformOrigin: C,
    TransitionComponent: O,
    transitionDuration: w,
    TransitionProps: S
  }, $ = CE(A), k = x.useCallback(() => {
    if (c === "anchorPosition")
      return process.env.NODE_ENV !== "production" && (l || console.error('MUI: You need to provide a `anchorPosition` prop when using <Popover anchorReference="anchorPosition" />.')), l;
    const q = yo(i), X = q && q.nodeType === 1 ? q : pt(F.current).body, z = X.getBoundingClientRect();
    if (process.env.NODE_ENV !== "production") {
      const ne = X.getBoundingClientRect();
      process.env.NODE_ENV !== "test" && ne.top === 0 && ne.left === 0 && ne.right === 0 && ne.bottom === 0 && console.warn(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join(`
`));
    }
    return {
      top: z.top + Ju(z, a.vertical),
      left: z.left + ed(z, a.horizontal)
    };
  }, [i, a.horizontal, a.vertical, l, c]), v = x.useCallback((q) => ({
    vertical: Ju(q, C.vertical),
    horizontal: ed(q, C.horizontal)
  }), [C.horizontal, C.vertical]), D = x.useCallback((q) => {
    const X = {
      width: q.offsetWidth,
      height: q.offsetHeight
    }, z = v(X);
    if (c === "none")
      return {
        top: null,
        left: null,
        transformOrigin: td(z)
      };
    const ne = k();
    let Y = ne.top - z.vertical, ae = ne.left - z.horizontal;
    const W = Y + X.height, oe = ae + X.width, ye = vn(yo(i)), ge = ye.innerHeight - g, se = ye.innerWidth - g;
    if (g !== null && Y < g) {
      const ce = Y - g;
      Y -= ce, z.vertical += ce;
    } else if (g !== null && W > ge) {
      const ce = W - ge;
      Y -= ce, z.vertical += ce;
    }
    if (process.env.NODE_ENV !== "production" && X.height > ge && X.height && ge && console.error(["MUI: The popover component is too tall.", `Some part of it can not be seen on the screen (${X.height - ge}px).`, "Please consider adding a `max-height` to improve the user-experience."].join(`
`)), g !== null && ae < g) {
      const ce = ae - g;
      ae -= ce, z.horizontal += ce;
    } else if (oe > se) {
      const ce = oe - se;
      ae -= ce, z.horizontal += ce;
    }
    return {
      top: `${Math.round(Y)}px`,
      left: `${Math.round(ae)}px`,
      transformOrigin: td(z)
    };
  }, [i, c, k, v, g]), [T, I] = x.useState(h), N = x.useCallback(() => {
    const q = F.current;
    if (!q)
      return;
    const X = D(q);
    X.top !== null && q.style.setProperty("top", X.top), X.left !== null && (q.style.left = X.left), q.style.transformOrigin = X.transformOrigin, I(!0);
  }, [D]);
  x.useEffect(() => (P && window.addEventListener("scroll", N), () => window.removeEventListener("scroll", N)), [i, P, N]);
  const _ = () => {
    N();
  }, G = () => {
    I(!1);
  };
  x.useEffect(() => {
    h && N();
  }), x.useImperativeHandle(s, () => h ? {
    updatePosition: () => {
      N();
    }
  } : null, [h, N]), x.useEffect(() => {
    if (!h)
      return;
    const q = Ep(() => {
      N();
    }), X = vn(yo(i));
    return X.addEventListener("resize", q), () => {
      q.clear(), X.removeEventListener("resize", q);
    };
  }, [i, h, N]);
  let L = w;
  const V = {
    slots: {
      transition: O,
      ...m
    },
    slotProps: {
      transition: S,
      paper: p,
      ...b
    }
  }, [R, B] = Xe("transition", {
    elementType: ko,
    externalForwardedProps: V,
    ownerState: A,
    getSlotProps: (q) => ({
      ...q,
      onEntering: (X, z) => {
        q.onEntering?.(X, z), _();
      },
      onExited: (X) => {
        q.onExited?.(X), G();
      }
    }),
    additionalProps: {
      appear: !0,
      in: h
    }
  });
  w === "auto" && !R.muiSupportAuto && (L = void 0);
  const H = f || (i ? pt(yo(i)).body : void 0), [K, {
    slots: te,
    slotProps: ee,
    ...J
  }] = Xe("root", {
    ref: n,
    elementType: PE,
    externalForwardedProps: {
      ...V,
      ...M
    },
    shouldForwardComponentProp: !0,
    additionalProps: {
      slots: {
        backdrop: m.backdrop
      },
      slotProps: {
        backdrop: sw(typeof b.backdrop == "function" ? b.backdrop(A) : b.backdrop, {
          invisible: !0
        })
      },
      container: H,
      open: h
    },
    ownerState: A,
    className: pe($.root, d)
  }), [ie, re] = Xe("paper", {
    ref: F,
    className: $.paper,
    elementType: Hp,
    externalForwardedProps: V,
    shouldForwardComponentProp: !0,
    additionalProps: {
      elevation: y,
      style: T ? void 0 : {
        opacity: 0
      }
    },
    ownerState: A
  });
  return /* @__PURE__ */ E.jsx(K, {
    ...J,
    ...!Ar(K) && {
      slots: te,
      slotProps: ee,
      disableScrollLock: P
    },
    children: /* @__PURE__ */ E.jsx(R, {
      ...B,
      timeout: L,
      children: /* @__PURE__ */ E.jsx(ie, {
        ...re,
        children: u
      })
    })
  });
});
process.env.NODE_ENV !== "production" && (Yp.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * A ref for imperative actions.
   * It currently only supports updatePosition() action.
   */
  action: lt,
  /**
   * An HTML element, [PopoverVirtualElement](https://mui.com/material-ui/react-popover/#virtual-element),
   * or a function that returns either.
   * It's used to set the position of the popover.
   */
  anchorEl: wn(o.oneOfType([gn, o.func]), (e) => {
    if (e.open && (!e.anchorReference || e.anchorReference === "anchorEl")) {
      const t = yo(e.anchorEl);
      if (t && t.nodeType === 1) {
        const n = t.getBoundingClientRect();
        if (process.env.NODE_ENV !== "test" && n.top === 0 && n.left === 0 && n.right === 0 && n.bottom === 0)
          return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join(`
`));
      } else
        return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", `It should be an Element or PopoverVirtualElement instance but it's \`${t}\` instead.`].join(`
`));
    }
    return null;
  }),
  /**
   * This is the point on the anchor where the popover's
   * `anchorEl` will attach to. This is not used when the
   * anchorReference is 'anchorPosition'.
   *
   * Options:
   * vertical: [top, center, bottom];
   * horizontal: [left, center, right].
   * @default {
   *   vertical: 'top',
   *   horizontal: 'left',
   * }
   */
  anchorOrigin: o.shape({
    horizontal: o.oneOfType([o.oneOf(["center", "left", "right"]), o.number]).isRequired,
    vertical: o.oneOfType([o.oneOf(["bottom", "center", "top"]), o.number]).isRequired
  }),
  /**
   * This is the position that may be used to set the position of the popover.
   * The coordinates are relative to the application's client area.
   */
  anchorPosition: o.shape({
    left: o.number.isRequired,
    top: o.number.isRequired
  }),
  /**
   * This determines which anchor prop to refer to when setting
   * the position of the popover.
   * @default 'anchorEl'
   */
  anchorReference: o.oneOf(["anchorEl", "anchorPosition", "none"]),
  /**
   * A backdrop component. This prop enables custom backdrop rendering.
   * @deprecated Use `slots.backdrop` instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   * @default styled(Backdrop, {
   *   name: 'MuiModal',
   *   slot: 'Backdrop',
   *   overridesResolver: (props, styles) => {
   *     return styles.backdrop;
   *   },
   * })({
   *   zIndex: -1,
   * })
   */
  BackdropComponent: o.elementType,
  /**
   * Props applied to the [`Backdrop`](/material-ui/api/backdrop/) element.
   * @deprecated Use `slotProps.backdrop` instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  BackdropProps: o.object,
  /**
   * The content of the component.
   */
  children: o.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: o.object,
  /**
   * @ignore
   */
  className: o.string,
  /**
   * An HTML element, component instance, or function that returns either.
   * The `container` will passed to the Modal component.
   *
   * By default, it uses the body of the anchorEl's top-level document object,
   * so it's simply `document.body` most of the time.
   */
  container: o.oneOfType([gn, o.func]),
  /**
   * Disable the scroll lock behavior.
   * @default false
   */
  disableScrollLock: o.bool,
  /**
   * The elevation of the popover.
   * @default 8
   */
  elevation: op,
  /**
   * Specifies how close to the edge of the window the popover can appear.
   * If null, the popover will not be constrained by the window.
   * @default 16
   */
  marginThreshold: o.number,
  /**
   * Callback fired when the component requests to be closed.
   * The `reason` parameter can optionally be used to control the response to `onClose`.
   */
  onClose: o.func,
  /**
   * If `true`, the component is shown.
   */
  open: o.bool.isRequired,
  /**
   * Props applied to the [`Paper`](https://mui.com/material-ui/api/paper/) element.
   *
   * This prop is an alias for `slotProps.paper` and will be overridden by it if both are used.
   * @deprecated Use `slotProps.paper` instead.
   *
   * @default {}
   */
  PaperProps: o.shape({
    component: xi
  }),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: o.shape({
    backdrop: o.oneOfType([o.func, o.object]),
    paper: o.oneOfType([o.func, o.object]),
    root: o.oneOfType([o.func, o.object]),
    transition: o.oneOfType([o.func, o.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: o.shape({
    backdrop: o.elementType,
    paper: o.elementType,
    root: o.elementType,
    transition: o.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: o.oneOfType([o.arrayOf(o.oneOfType([o.func, o.object, o.bool])), o.func, o.object]),
  /**
   * This is the point on the popover which
   * will attach to the anchor's origin.
   *
   * Options:
   * vertical: [top, center, bottom, x(px)];
   * horizontal: [left, center, right, x(px)].
   * @default {
   *   vertical: 'top',
   *   horizontal: 'left',
   * }
   */
  transformOrigin: o.shape({
    horizontal: o.oneOfType([o.oneOf(["center", "left", "right"]), o.number]).isRequired,
    vertical: o.oneOfType([o.oneOf(["bottom", "center", "top"]), o.number]).isRequired
  }),
  /**
   * The component used for the transition.
   * [Follow this guide](https://mui.com/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
   * @deprecated use the `slots.transition` prop instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   * @default Grow
   */
  TransitionComponent: o.elementType,
  /**
   * Set to 'auto' to automatically calculate transition time based on height.
   * @default 'auto'
   */
  transitionDuration: o.oneOfType([o.oneOf(["auto"]), o.number, o.shape({
    appear: o.number,
    enter: o.number,
    exit: o.number
  })]),
  /**
   * Props applied to the transition element.
   * By default, the element is based on this [`Transition`](https://reactcommunity.org/react-transition-group/transition/) component.
   * @deprecated use the `slotProps.transition` prop instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   * @default {}
   */
  TransitionProps: o.object
});
function TE(e) {
  return we("MuiMenu", e);
}
xe("MuiMenu", ["root", "paper", "list"]);
const RE = {
  vertical: "top",
  horizontal: "right"
}, kE = {
  vertical: "top",
  horizontal: "left"
}, DE = (e) => {
  const {
    classes: t
  } = e;
  return be({
    root: ["root"],
    paper: ["paper"],
    list: ["list"]
  }, TE, t);
}, ME = Q(Yp, {
  shouldForwardProp: (e) => qt(e) || e === "classes",
  name: "MuiMenu",
  slot: "Root"
})({}), IE = Q(Hp, {
  name: "MuiMenu",
  slot: "Paper"
})({
  // specZ: The maximum height of a simple menu should be one or more rows less than the view
  // height. This ensures a tappable area outside of the simple menu with which to dismiss
  // the menu.
  maxHeight: "calc(100% - 96px)",
  // Add iOS momentum scrolling for iOS < 13.0
  WebkitOverflowScrolling: "touch"
}), NE = Q(qp, {
  name: "MuiMenu",
  slot: "List"
})({
  // We disable the focus ring for mouse, touch and keyboard users.
  outline: 0
}), Kp = /* @__PURE__ */ x.forwardRef(function(t, n) {
  const r = Ae({
    props: t,
    name: "MuiMenu"
  }), {
    autoFocus: s = !0,
    children: i,
    className: a,
    disableAutoFocusItem: l = !1,
    MenuListProps: c = {},
    onClose: u,
    open: d,
    PaperProps: f = {},
    PopoverClasses: y,
    transitionDuration: g = "auto",
    TransitionProps: {
      onEntering: h,
      ...p
    } = {},
    variant: m = "selectedMenu",
    slots: b = {},
    slotProps: C = {},
    ...O
  } = r, w = Ut(), S = {
    ...r,
    autoFocus: s,
    disableAutoFocusItem: l,
    MenuListProps: c,
    onEntering: h,
    PaperProps: f,
    transitionDuration: g,
    TransitionProps: p,
    variant: m
  }, P = DE(S), M = s && !l && d, F = x.useRef(null), A = (L, V) => {
    F.current && F.current.adjustStyleForScrollbar(L, {
      direction: w ? "rtl" : "ltr"
    }), h && h(L, V);
  }, $ = (L) => {
    L.key === "Tab" && (L.preventDefault(), u && u(L, "tabKeyDown"));
  };
  let k = -1;
  x.Children.map(i, (L, V) => {
    /* @__PURE__ */ x.isValidElement(L) && (process.env.NODE_ENV !== "production" && lr.isFragment(L) && console.error(["MUI: The Menu component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join(`
`)), L.props.disabled || (m === "selectedMenu" && L.props.selected || k === -1) && (k = V));
  });
  const v = {
    slots: b,
    slotProps: {
      list: c,
      transition: p,
      paper: f,
      ...C
    }
  }, D = Ie({
    elementType: b.root,
    externalSlotProps: C.root,
    ownerState: S,
    className: [P.root, a]
  }), [T, I] = Xe("paper", {
    className: P.paper,
    elementType: IE,
    externalForwardedProps: v,
    shouldForwardComponentProp: !0,
    ownerState: S
  }), [N, _] = Xe("list", {
    className: pe(P.list, c.className),
    elementType: NE,
    shouldForwardComponentProp: !0,
    externalForwardedProps: v,
    getSlotProps: (L) => ({
      ...L,
      onKeyDown: (V) => {
        $(V), L.onKeyDown?.(V);
      }
    }),
    ownerState: S
  }), G = typeof v.slotProps.transition == "function" ? v.slotProps.transition(S) : v.slotProps.transition;
  return /* @__PURE__ */ E.jsx(ME, {
    onClose: u,
    anchorOrigin: {
      vertical: "bottom",
      horizontal: w ? "right" : "left"
    },
    transformOrigin: w ? RE : kE,
    slots: {
      root: b.root,
      paper: T,
      backdrop: b.backdrop,
      ...b.transition && {
        // TODO: pass `slots.transition` directly once `TransitionComponent` is removed from Popover
        transition: b.transition
      }
    },
    slotProps: {
      root: D,
      paper: I,
      backdrop: typeof C.backdrop == "function" ? C.backdrop(S) : C.backdrop,
      transition: {
        ...G,
        onEntering: (...L) => {
          A(...L), G?.onEntering?.(...L);
        }
      }
    },
    open: d,
    ref: n,
    transitionDuration: g,
    ownerState: S,
    ...O,
    classes: y,
    children: /* @__PURE__ */ E.jsx(N, {
      actions: F,
      autoFocus: s && (k === -1 || l),
      autoFocusItem: M,
      variant: m,
      ..._,
      children: i
    })
  });
});
process.env.NODE_ENV !== "production" && (Kp.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * An HTML element, or a function that returns one.
   * It's used to set the position of the menu.
   */
  anchorEl: o.oneOfType([gn, o.func]),
  /**
   * If `true` (Default) will focus the `[role="menu"]` if no focusable child is found. Disabled
   * children are not focusable. If you set this prop to `false` focus will be placed
   * on the parent modal container. This has severe accessibility implications
   * and should only be considered if you manage focus otherwise.
   * @default true
   */
  autoFocus: o.bool,
  /**
   * Menu contents, normally `MenuItem`s.
   */
  children: o.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: o.object,
  /**
   * @ignore
   */
  className: o.string,
  /**
   * When opening the menu will not focus the active item but the `[role="menu"]`
   * unless `autoFocus` is also set to `false`. Not using the default means not
   * following WAI-ARIA authoring practices. Please be considerate about possible
   * accessibility implications.
   * @default false
   */
  disableAutoFocusItem: o.bool,
  /**
   * Props applied to the [`MenuList`](https://mui.com/material-ui/api/menu-list/) element.
   * @deprecated use the `slotProps.list` prop instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   * @default {}
   */
  MenuListProps: o.object,
  /**
   * Callback fired when the component requests to be closed.
   *
   * @param {object} event The event source of the callback.
   * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`, `"tabKeyDown"`.
   */
  onClose: o.func,
  /**
   * If `true`, the component is shown.
   */
  open: o.bool.isRequired,
  /**
   * @ignore
   */
  PaperProps: o.object,
  /**
   * `classes` prop applied to the [`Popover`](https://mui.com/material-ui/api/popover/) element.
   */
  PopoverClasses: o.object,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: o.shape({
    backdrop: o.oneOfType([o.func, o.object]),
    list: o.oneOfType([o.func, o.object]),
    paper: o.oneOfType([o.func, o.object]),
    root: o.oneOfType([o.func, o.object]),
    transition: o.oneOfType([o.func, o.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: o.shape({
    backdrop: o.elementType,
    list: o.elementType,
    paper: o.elementType,
    root: o.elementType,
    transition: o.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: o.oneOfType([o.arrayOf(o.oneOfType([o.func, o.object, o.bool])), o.func, o.object]),
  /**
   * The length of the transition in `ms`, or 'auto'
   * @default 'auto'
   */
  transitionDuration: o.oneOfType([o.oneOf(["auto"]), o.number, o.shape({
    appear: o.number,
    enter: o.number,
    exit: o.number
  })]),
  /**
   * Props applied to the transition element.
   * By default, the element is based on this [`Transition`](https://reactcommunity.org/react-transition-group/transition/) component.
   * @deprecated use the `slotProps.transition` prop instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   * @default {}
   */
  TransitionProps: o.object,
  /**
   * The variant to use. Use `menu` to prevent selected items from impacting the initial focus.
   * @default 'selectedMenu'
   */
  variant: o.oneOf(["menu", "selectedMenu"])
});
function AE(e) {
  return we("MuiNativeSelect", e);
}
const zl = xe("MuiNativeSelect", ["root", "select", "multiple", "filled", "outlined", "standard", "disabled", "icon", "iconOpen", "iconFilled", "iconOutlined", "iconStandard", "nativeInput", "error"]), FE = (e) => {
  const {
    classes: t,
    variant: n,
    disabled: r,
    multiple: s,
    open: i,
    error: a
  } = e, l = {
    select: ["select", n, r && "disabled", s && "multiple", a && "error"],
    icon: ["icon", `icon${le(n)}`, i && "iconOpen", r && "disabled"]
  };
  return be(l, AE, t);
}, Gp = Q("select", {
  name: "MuiNativeSelect"
})(({
  theme: e
}) => ({
  // Reset
  MozAppearance: "none",
  // Reset
  WebkitAppearance: "none",
  // When interacting quickly, the text can end up selected.
  // Native select can't be selected either.
  userSelect: "none",
  // Reset
  borderRadius: 0,
  cursor: "pointer",
  "&:focus": {
    // Reset Chrome style
    borderRadius: 0
  },
  [`&.${zl.disabled}`]: {
    cursor: "default"
  },
  "&[multiple]": {
    height: "auto"
  },
  "&:not([multiple]) option, &:not([multiple]) optgroup": {
    backgroundColor: (e.vars || e).palette.background.paper
  },
  variants: [{
    props: ({
      ownerState: t
    }) => t.variant !== "filled" && t.variant !== "outlined",
    style: {
      // Bump specificity to allow extending custom inputs
      "&&&": {
        paddingRight: 24,
        minWidth: 16
        // So it doesn't collapse.
      }
    }
  }, {
    props: {
      variant: "filled"
    },
    style: {
      "&&&": {
        paddingRight: 32
      }
    }
  }, {
    props: {
      variant: "outlined"
    },
    style: {
      borderRadius: (e.vars || e).shape.borderRadius,
      "&:focus": {
        borderRadius: (e.vars || e).shape.borderRadius
        // Reset the reset for Chrome style
      },
      "&&&": {
        paddingRight: 32
      }
    }
  }]
})), $E = Q(Gp, {
  name: "MuiNativeSelect",
  slot: "Select",
  shouldForwardProp: qt,
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e;
    return [t.select, t[n.variant], n.error && t.error, {
      [`&.${zl.multiple}`]: t.multiple
    }];
  }
})({}), Xp = Q("svg", {
  name: "MuiNativeSelect"
})(({
  theme: e
}) => ({
  // We use a position absolute over a flexbox in order to forward the pointer events
  // to the input and to support wrapping tags..
  position: "absolute",
  right: 0,
  // Center vertically, height is 1em
  top: "calc(50% - .5em)",
  // Don't block pointer events on the select under the icon.
  pointerEvents: "none",
  color: (e.vars || e).palette.action.active,
  [`&.${zl.disabled}`]: {
    color: (e.vars || e).palette.action.disabled
  },
  variants: [{
    props: ({
      ownerState: t
    }) => t.open,
    style: {
      transform: "rotate(180deg)"
    }
  }, {
    props: {
      variant: "filled"
    },
    style: {
      right: 7
    }
  }, {
    props: {
      variant: "outlined"
    },
    style: {
      right: 7
    }
  }]
})), jE = Q(Xp, {
  name: "MuiNativeSelect",
  slot: "Icon",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e;
    return [t.icon, n.variant && t[`icon${le(n.variant)}`], n.open && t.iconOpen];
  }
})({}), Qp = /* @__PURE__ */ x.forwardRef(function(t, n) {
  const {
    className: r,
    disabled: s,
    error: i,
    IconComponent: a,
    inputRef: l,
    variant: c = "standard",
    ...u
  } = t, d = {
    ...t,
    disabled: s,
    variant: c,
    error: i
  }, f = FE(d);
  return /* @__PURE__ */ E.jsxs(x.Fragment, {
    children: [/* @__PURE__ */ E.jsx($E, {
      ownerState: d,
      className: pe(f.select, r),
      disabled: s,
      ref: l || n,
      ...u
    }), t.multiple ? null : /* @__PURE__ */ E.jsx(jE, {
      as: a,
      ownerState: d,
      className: f.icon
    })]
  });
});
process.env.NODE_ENV !== "production" && (Qp.propTypes = {
  /**
   * The option elements to populate the select with.
   * Can be some `<option>` elements.
   */
  children: o.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: o.object,
  /**
   * The CSS class name of the select element.
   */
  className: o.string,
  /**
   * If `true`, the select is disabled.
   */
  disabled: o.bool,
  /**
   * If `true`, the `select input` will indicate an error.
   */
  error: o.bool,
  /**
   * The icon that displays the arrow.
   */
  IconComponent: o.elementType.isRequired,
  /**
   * Use that prop to pass a ref to the native select element.
   * @deprecated
   */
  inputRef: lt,
  /**
   * @ignore
   */
  multiple: o.bool,
  /**
   * Name attribute of the `select` or hidden `input` element.
   */
  name: o.string,
  /**
   * Callback fired when a menu item is selected.
   *
   * @param {object} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (string).
   */
  onChange: o.func,
  /**
   * The input value.
   */
  value: o.any,
  /**
   * The variant to use.
   */
  variant: o.oneOf(["standard", "outlined", "filled"])
});
function Zp(e) {
  return we("MuiSelect", e);
}
const so = xe("MuiSelect", ["root", "select", "multiple", "filled", "outlined", "standard", "disabled", "focused", "icon", "iconOpen", "iconFilled", "iconOutlined", "iconStandard", "nativeInput", "error"]);
var nd;
const _E = Q(Gp, {
  name: "MuiSelect",
  slot: "Select",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e;
    return [
      // Win specificity over the input base
      {
        [`&.${so.select}`]: t.select
      },
      {
        [`&.${so.select}`]: t[n.variant]
      },
      {
        [`&.${so.error}`]: t.error
      },
      {
        [`&.${so.multiple}`]: t.multiple
      }
    ];
  }
})({
  // Win specificity over the input base
  [`&.${so.select}`]: {
    height: "auto",
    // Resets for multiple select with chips
    minHeight: "1.4375em",
    // Required for select\text-field height consistency
    textOverflow: "ellipsis",
    whiteSpace: "nowrap",
    overflow: "hidden"
  }
}), VE = Q(Xp, {
  name: "MuiSelect",
  slot: "Icon",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e;
    return [t.icon, n.variant && t[`icon${le(n.variant)}`], n.open && t.iconOpen];
  }
})({}), LE = Q("input", {
  shouldForwardProp: (e) => Nf(e) && e !== "classes",
  name: "MuiSelect",
  slot: "NativeInput"
})({
  bottom: 0,
  left: 0,
  position: "absolute",
  opacity: 0,
  pointerEvents: "none",
  width: "100%",
  boxSizing: "border-box"
});
function rd(e, t) {
  return typeof t == "object" && t !== null ? e === t : String(e) === String(t);
}
function BE(e) {
  return e == null || typeof e == "string" && !e.trim();
}
const WE = (e) => {
  const {
    classes: t,
    variant: n,
    disabled: r,
    multiple: s,
    open: i,
    error: a
  } = e, l = {
    select: ["select", n, r && "disabled", s && "multiple", a && "error"],
    icon: ["icon", `icon${le(n)}`, i && "iconOpen", r && "disabled"],
    nativeInput: ["nativeInput"]
  };
  return be(l, Zp, t);
}, Jp = /* @__PURE__ */ x.forwardRef(function(t, n) {
  const {
    "aria-describedby": r,
    "aria-label": s,
    autoFocus: i,
    autoWidth: a,
    children: l,
    className: c,
    defaultOpen: u,
    defaultValue: d,
    disabled: f,
    displayEmpty: y,
    error: g = !1,
    IconComponent: h,
    inputRef: p,
    labelId: m,
    MenuProps: b = {},
    multiple: C,
    name: O,
    onBlur: w,
    onChange: S,
    onClose: P,
    onFocus: M,
    onOpen: F,
    open: A,
    readOnly: $,
    renderValue: k,
    required: v,
    SelectDisplayProps: D = {},
    tabIndex: T,
    // catching `type` from Input which makes no sense for SelectInput
    type: I,
    value: N,
    variant: _ = "standard",
    ...G
  } = t, [L, V] = Fn({
    controlled: N,
    default: d,
    name: "Select"
  }), [R, B] = Fn({
    controlled: A,
    default: u,
    name: "Select"
  }), H = x.useRef(null), K = x.useRef(null), [te, ee] = x.useState(null), {
    current: J
  } = x.useRef(A != null), [ie, re] = x.useState(), q = Ne(n, p), X = x.useCallback((he) => {
    K.current = he, he && ee(he);
  }, []), z = te?.parentNode;
  x.useImperativeHandle(q, () => ({
    focus: () => {
      K.current.focus();
    },
    node: H.current,
    value: L
  }), [L]), x.useEffect(() => {
    u && R && te && !J && (re(a ? null : z.clientWidth), K.current.focus());
  }, [te, a]), x.useEffect(() => {
    i && K.current.focus();
  }, [i]), x.useEffect(() => {
    if (!m)
      return;
    const he = pt(K.current).getElementById(m);
    if (he) {
      const fe = () => {
        getSelection().isCollapsed && K.current.focus();
      };
      return he.addEventListener("click", fe), () => {
        he.removeEventListener("click", fe);
      };
    }
  }, [m]);
  const ne = (he, fe) => {
    he ? F && F(fe) : P && P(fe), J || (re(a ? null : z.clientWidth), B(he));
  }, Y = (he) => {
    he.button === 0 && (he.preventDefault(), K.current.focus(), ne(!0, he));
  }, ae = (he) => {
    ne(!1, he);
  }, W = x.Children.toArray(l), oe = (he) => {
    const fe = W.find((Re) => Re.props.value === he.target.value);
    fe !== void 0 && (V(fe.props.value), S && S(he, fe));
  }, ye = (he) => (fe) => {
    let Re;
    if (fe.currentTarget.hasAttribute("tabindex")) {
      if (C) {
        Re = Array.isArray(L) ? L.slice() : [];
        const et = L.indexOf(he.props.value);
        et === -1 ? Re.push(he.props.value) : Re.splice(et, 1);
      } else
        Re = he.props.value;
      if (he.props.onClick && he.props.onClick(fe), L !== Re && (V(Re), S)) {
        const et = fe.nativeEvent || fe, Ot = new et.constructor(et.type, et);
        Object.defineProperty(Ot, "target", {
          writable: !0,
          value: {
            value: Re,
            name: O
          }
        }), S(Ot, he);
      }
      C || ne(!1, fe);
    }
  }, ge = (he) => {
    $ || [
      " ",
      "ArrowUp",
      "ArrowDown",
      // The native select doesn't respond to enter on macOS, but it's recommended by
      // https://www.w3.org/WAI/ARIA/apg/patterns/combobox/examples/combobox-select-only/
      "Enter"
    ].includes(he.key) && (he.preventDefault(), ne(!0, he));
  }, se = te !== null && R, ce = (he) => {
    !se && w && (Object.defineProperty(he, "target", {
      writable: !0,
      value: {
        value: L,
        name: O
      }
    }), w(he));
  };
  delete G["aria-invalid"];
  let ue, ke;
  const Te = [];
  let Me = !1, _e = !1;
  (Ks({
    value: L
  }) || y) && (k ? ue = k(L) : Me = !0);
  const ft = W.map((he) => {
    if (!/* @__PURE__ */ x.isValidElement(he))
      return null;
    process.env.NODE_ENV !== "production" && lr.isFragment(he) && console.error(["MUI: The Select component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join(`
`));
    let fe;
    if (C) {
      if (!Array.isArray(L))
        throw new Error(process.env.NODE_ENV !== "production" ? "MUI: The `value` prop must be an array when using the `Select` component with `multiple`." : sn(2));
      fe = L.some((Re) => rd(Re, he.props.value)), fe && Me && Te.push(he.props.children);
    } else
      fe = rd(L, he.props.value), fe && Me && (ke = he.props.children);
    return fe && (_e = !0), /* @__PURE__ */ x.cloneElement(he, {
      "aria-selected": fe ? "true" : "false",
      onClick: ye(he),
      onKeyUp: (Re) => {
        Re.key === " " && Re.preventDefault(), he.props.onKeyUp && he.props.onKeyUp(Re);
      },
      role: "option",
      selected: fe,
      value: void 0,
      // The value is most likely not a valid HTML attribute.
      "data-value": he.props.value
      // Instead, we provide it as a data attribute.
    });
  });
  process.env.NODE_ENV !== "production" && x.useEffect(() => {
    if (!_e && !C && L !== "") {
      const he = W.map((fe) => fe.props.value);
      console.warn([`MUI: You have provided an out-of-range value \`${L}\` for the select ${O ? `(name="${O}") ` : ""}component.`, "Consider providing a value that matches one of the available options or ''.", `The available values are ${he.filter((fe) => fe != null).map((fe) => `\`${fe}\``).join(", ") || '""'}.`].join(`
`));
    }
  }, [_e, W, C, O, L]), Me && (C ? Te.length === 0 ? ue = null : ue = Te.reduce((he, fe, Re) => (he.push(fe), Re < Te.length - 1 && he.push(", "), he), []) : ue = ke);
  let ht = ie;
  !a && J && te && (ht = z.clientWidth);
  let Se;
  typeof T < "u" ? Se = T : Se = f ? null : 0;
  const Oe = D.id || (O ? `mui-component-select-${O}` : void 0), me = {
    ...t,
    variant: _,
    value: L,
    open: se,
    error: g
  }, Ve = WE(me), Ye = {
    ...b.PaperProps,
    ...typeof b.slotProps?.paper == "function" ? b.slotProps.paper(me) : b.slotProps?.paper
  }, ct = {
    ...b.MenuListProps,
    ...typeof b.slotProps?.list == "function" ? b.slotProps.list(me) : b.slotProps?.list
  }, Je = _n();
  return /* @__PURE__ */ E.jsxs(x.Fragment, {
    children: [/* @__PURE__ */ E.jsx(_E, {
      as: "div",
      ref: X,
      tabIndex: Se,
      role: "combobox",
      "aria-controls": se ? Je : void 0,
      "aria-disabled": f ? "true" : void 0,
      "aria-expanded": se ? "true" : "false",
      "aria-haspopup": "listbox",
      "aria-label": s,
      "aria-labelledby": [m, Oe].filter(Boolean).join(" ") || void 0,
      "aria-describedby": r,
      "aria-required": v ? "true" : void 0,
      "aria-invalid": g ? "true" : void 0,
      onKeyDown: ge,
      onMouseDown: f || $ ? null : Y,
      onBlur: ce,
      onFocus: M,
      ...D,
      ownerState: me,
      className: pe(D.className, Ve.select, c),
      id: Oe,
      children: BE(ue) ? (
        // notranslate needed while Google Translate will not fix zero-width space issue
        nd || (nd = /* @__PURE__ */ E.jsx("span", {
          className: "notranslate",
          "aria-hidden": !0,
          children: "​"
        }))
      ) : ue
    }), /* @__PURE__ */ E.jsx(LE, {
      "aria-invalid": g,
      value: Array.isArray(L) ? L.join(",") : L,
      name: O,
      ref: H,
      "aria-hidden": !0,
      onChange: oe,
      tabIndex: -1,
      disabled: f,
      className: Ve.nativeInput,
      autoFocus: i,
      required: v,
      ...G,
      ownerState: me
    }), /* @__PURE__ */ E.jsx(VE, {
      as: h,
      className: Ve.icon,
      ownerState: me
    }), /* @__PURE__ */ E.jsx(Kp, {
      id: `menu-${O || ""}`,
      anchorEl: z,
      open: se,
      onClose: ae,
      anchorOrigin: {
        vertical: "bottom",
        horizontal: "center"
      },
      transformOrigin: {
        vertical: "top",
        horizontal: "center"
      },
      ...b,
      slotProps: {
        ...b.slotProps,
        list: {
          "aria-labelledby": m,
          role: "listbox",
          "aria-multiselectable": C ? "true" : void 0,
          disableListWrap: !0,
          id: Je,
          ...ct
        },
        paper: {
          ...Ye,
          style: {
            minWidth: ht,
            ...Ye != null ? Ye.style : null
          }
        }
      },
      children: ft
    })]
  });
});
process.env.NODE_ENV !== "production" && (Jp.propTypes = {
  /**
   * @ignore
   */
  "aria-describedby": o.string,
  /**
   * @ignore
   */
  "aria-label": o.string,
  /**
   * @ignore
   */
  autoFocus: o.bool,
  /**
   * If `true`, the width of the popover will automatically be set according to the items inside the
   * menu, otherwise it will be at least the width of the select input.
   */
  autoWidth: o.bool,
  /**
   * The option elements to populate the select with.
   * Can be some `<MenuItem>` elements.
   */
  children: o.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: o.object,
  /**
   * The CSS class name of the select element.
   */
  className: o.string,
  /**
   * If `true`, the component is toggled on mount. Use when the component open state is not controlled.
   * You can only use it when the `native` prop is `false` (default).
   */
  defaultOpen: o.bool,
  /**
   * The default value. Use when the component is not controlled.
   */
  defaultValue: o.any,
  /**
   * If `true`, the select is disabled.
   */
  disabled: o.bool,
  /**
   * If `true`, the selected item is displayed even if its value is empty.
   */
  displayEmpty: o.bool,
  /**
   * If `true`, the `select input` will indicate an error.
   */
  error: o.bool,
  /**
   * The icon that displays the arrow.
   */
  IconComponent: o.elementType.isRequired,
  /**
   * Imperative handle implementing `{ value: T, node: HTMLElement, focus(): void }`
   * Equivalent to `ref`
   */
  inputRef: lt,
  /**
   * The ID of an element that acts as an additional label. The Select will
   * be labelled by the additional label and the selected value.
   */
  labelId: o.string,
  /**
   * Props applied to the [`Menu`](/material-ui/api/menu/) element.
   */
  MenuProps: o.object,
  /**
   * If `true`, `value` must be an array and the menu will support multiple selections.
   */
  multiple: o.bool,
  /**
   * Name attribute of the `select` or hidden `input` element.
   */
  name: o.string,
  /**
   * @ignore
   */
  onBlur: o.func,
  /**
   * Callback fired when a menu item is selected.
   *
   * @param {object} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (any).
   * @param {object} [child] The react element that was selected.
   */
  onChange: o.func,
  /**
   * Callback fired when the component requests to be closed.
   * Use in controlled mode (see open).
   *
   * @param {object} event The event source of the callback.
   */
  onClose: o.func,
  /**
   * @ignore
   */
  onFocus: o.func,
  /**
   * Callback fired when the component requests to be opened.
   * Use in controlled mode (see open).
   *
   * @param {object} event The event source of the callback.
   */
  onOpen: o.func,
  /**
   * If `true`, the component is shown.
   */
  open: o.bool,
  /**
   * @ignore
   */
  readOnly: o.bool,
  /**
   * Render the selected value.
   *
   * @param {any} value The `value` provided to the component.
   * @returns {ReactNode}
   */
  renderValue: o.func,
  /**
   * If `true`, the component is required.
   */
  required: o.bool,
  /**
   * Props applied to the clickable div element.
   */
  SelectDisplayProps: o.object,
  /**
   * @ignore
   */
  tabIndex: o.oneOfType([o.number, o.string]),
  /**
   * @ignore
   */
  type: o.any,
  /**
   * The input value.
   */
  value: o.any,
  /**
   * The variant to use.
   */
  variant: o.oneOf(["standard", "outlined", "filled"])
});
const zE = dn(/* @__PURE__ */ E.jsx("path", {
  d: "M7 10l5 5 5-5z"
}), "ArrowDropDown"), UE = (e) => {
  const {
    classes: t
  } = e, r = be({
    root: ["root"]
  }, Zp, t);
  return {
    ...t,
    ...r
  };
}, Ul = {
  name: "MuiSelect",
  slot: "Root",
  shouldForwardProp: (e) => qt(e) && e !== "variant"
}, qE = Q(ki, Ul)(""), HE = Q(Mi, Ul)(""), YE = Q(Di, Ul)(""), ql = /* @__PURE__ */ x.forwardRef(function(t, n) {
  const r = Ae({
    name: "MuiSelect",
    props: t
  }), {
    autoWidth: s = !1,
    children: i,
    classes: a = {},
    className: l,
    defaultOpen: c = !1,
    displayEmpty: u = !1,
    IconComponent: d = zE,
    id: f,
    input: y,
    inputProps: g,
    label: h,
    labelId: p,
    MenuProps: m,
    multiple: b = !1,
    native: C = !1,
    onClose: O,
    onOpen: w,
    open: S,
    renderValue: P,
    SelectDisplayProps: M,
    variant: F = "outlined",
    ...A
  } = r, $ = C ? Qp : Jp, k = Sn(), v = qr({
    props: r,
    muiFormControl: k,
    states: ["variant", "error"]
  }), D = v.variant || F, T = {
    ...r,
    variant: D,
    classes: a
  }, I = UE(T), {
    root: N,
    ..._
  } = I, G = y || {
    standard: /* @__PURE__ */ E.jsx(qE, {
      ownerState: T
    }),
    outlined: /* @__PURE__ */ E.jsx(HE, {
      label: h,
      ownerState: T
    }),
    filled: /* @__PURE__ */ E.jsx(YE, {
      ownerState: T
    })
  }[D], L = Ne(n, Qo(G));
  return /* @__PURE__ */ E.jsx(x.Fragment, {
    children: /* @__PURE__ */ x.cloneElement(G, {
      // Most of the logic is implemented in `SelectInput`.
      // The `Select` component is a simple API wrapper to expose something better to play with.
      inputComponent: $,
      inputProps: {
        children: i,
        error: v.error,
        IconComponent: d,
        variant: D,
        type: void 0,
        // We render a select. We can ignore the type provided by the `Input`.
        multiple: b,
        ...C ? {
          id: f
        } : {
          autoWidth: s,
          defaultOpen: c,
          displayEmpty: u,
          labelId: p,
          MenuProps: m,
          onClose: O,
          onOpen: w,
          open: S,
          renderValue: P,
          SelectDisplayProps: {
            id: f,
            ...M
          }
        },
        ...g,
        classes: g ? wt(_, g.classes) : _,
        ...y ? y.props.inputProps : {}
      },
      ...(b && C || u) && D === "outlined" ? {
        notched: !0
      } : {},
      ref: L,
      className: pe(G.props.className, l, I.root),
      // If a custom input is provided via 'input' prop, do not allow 'variant' to be propagated to it's root element. See https://github.com/mui/material-ui/issues/33894.
      ...!y && {
        variant: D
      },
      ...A
    })
  });
});
process.env.NODE_ENV !== "production" && (ql.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * If `true`, the width of the popover will automatically be set according to the items inside the
   * menu, otherwise it will be at least the width of the select input.
   * @default false
   */
  autoWidth: o.bool,
  /**
   * The option elements to populate the select with.
   * Can be some `MenuItem` when `native` is false and `option` when `native` is true.
   *
   * ⚠️The `MenuItem` elements **must** be direct descendants when `native` is false.
   */
  children: o.node,
  /**
   * Override or extend the styles applied to the component.
   * @default {}
   */
  classes: o.object,
  /**
   * @ignore
   */
  className: o.string,
  /**
   * If `true`, the component is initially open. Use when the component open state is not controlled (i.e. the `open` prop is not defined).
   * You can only use it when the `native` prop is `false` (default).
   * @default false
   */
  defaultOpen: o.bool,
  /**
   * The default value. Use when the component is not controlled.
   */
  defaultValue: o.any,
  /**
   * If `true`, a value is displayed even if no items are selected.
   *
   * In order to display a meaningful value, a function can be passed to the `renderValue` prop which
   * returns the value to be displayed when no items are selected.
   *
   * ⚠️ When using this prop, make sure the label doesn't overlap with the empty displayed value.
   * The label should either be hidden or forced to a shrunk state.
   * @default false
   */
  displayEmpty: o.bool,
  /**
   * The icon that displays the arrow.
   * @default ArrowDropDownIcon
   */
  IconComponent: o.elementType,
  /**
   * The `id` of the wrapper element or the `select` element when `native`.
   */
  id: o.string,
  /**
   * An `Input` element; does not have to be a material-ui specific `Input`.
   */
  input: o.element,
  /**
   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/input#attributes) applied to the `input` element.
   * When `native` is `true`, the attributes are applied on the `select` element.
   */
  inputProps: o.object,
  /**
   * See [OutlinedInput#label](https://mui.com/material-ui/api/outlined-input/#props)
   */
  label: o.node,
  /**
   * The ID of an element that acts as an additional label. The Select will
   * be labelled by the additional label and the selected value.
   */
  labelId: o.string,
  /**
   * Props applied to the [`Menu`](https://mui.com/material-ui/api/menu/) element.
   */
  MenuProps: o.object,
  /**
   * If `true`, `value` must be an array and the menu will support multiple selections.
   * @default false
   */
  multiple: o.bool,
  /**
   * If `true`, the component uses a native `select` element.
   * @default false
   */
  native: o.bool,
  /**
   * Callback fired when a menu item is selected.
   *
   * @param {SelectChangeEvent<Value>} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (any).
   * **Warning**: This is a generic event, not a change event, unless the change event is caused by browser autofill.
   * @param {object} [child] The react element that was selected when `native` is `false` (default).
   */
  onChange: o.func,
  /**
   * Callback fired when the component requests to be closed.
   * Use it in either controlled (see the `open` prop), or uncontrolled mode (to detect when the Select collapses).
   *
   * @param {object} event The event source of the callback.
   */
  onClose: o.func,
  /**
   * Callback fired when the component requests to be opened.
   * Use it in either controlled (see the `open` prop), or uncontrolled mode (to detect when the Select expands).
   *
   * @param {object} event The event source of the callback.
   */
  onOpen: o.func,
  /**
   * If `true`, the component is shown.
   * You can only use it when the `native` prop is `false` (default).
   */
  open: o.bool,
  /**
   * Render the selected value.
   * You can only use it when the `native` prop is `false` (default).
   *
   * @param {any} value The `value` provided to the component.
   * @returns {ReactNode}
   */
  renderValue: o.func,
  /**
   * Props applied to the clickable div element.
   */
  SelectDisplayProps: o.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: o.oneOfType([o.arrayOf(o.oneOfType([o.func, o.object, o.bool])), o.func, o.object]),
  /**
   * The `input` value. Providing an empty string will select no options.
   * Set to an empty string `''` if you don't want any of the available options to be selected.
   *
   * If the value is an object it must have reference equality with the option in order to be selected.
   * If the value is not an object, the string representation must match with the string representation of the option in order to be selected.
   */
  value: o.oneOfType([o.oneOf([""]), o.any]),
  /**
   * The variant to use.
   * @default 'outlined'
   */
  variant: o.oneOf(["filled", "outlined", "standard"])
});
ql.muiName = "Select";
function KE(e) {
  return we("MuiTextField", e);
}
xe("MuiTextField", ["root"]);
const GE = {
  standard: ki,
  filled: Di,
  outlined: Mi
}, XE = (e) => {
  const {
    classes: t
  } = e;
  return be({
    root: ["root"]
  }, KE, t);
}, QE = Q(Vl, {
  name: "MuiTextField",
  slot: "Root"
})({}), eh = /* @__PURE__ */ x.forwardRef(function(t, n) {
  const r = Ae({
    props: t,
    name: "MuiTextField"
  }), {
    autoComplete: s,
    autoFocus: i = !1,
    children: a,
    className: l,
    color: c = "primary",
    defaultValue: u,
    disabled: d = !1,
    error: f = !1,
    FormHelperTextProps: y,
    fullWidth: g = !1,
    helperText: h,
    id: p,
    InputLabelProps: m,
    inputProps: b,
    InputProps: C,
    inputRef: O,
    label: w,
    maxRows: S,
    minRows: P,
    multiline: M = !1,
    name: F,
    onBlur: A,
    onChange: $,
    onFocus: k,
    placeholder: v,
    required: D = !1,
    rows: T,
    select: I = !1,
    SelectProps: N,
    slots: _ = {},
    slotProps: G = {},
    type: L,
    value: V,
    variant: R = "outlined",
    ...B
  } = r, H = {
    ...r,
    autoFocus: i,
    color: c,
    disabled: d,
    error: f,
    fullWidth: g,
    multiline: M,
    required: D,
    select: I,
    variant: R
  }, K = XE(H);
  process.env.NODE_ENV !== "production" && I && !a && console.error("MUI: `children` must be passed when using the `TextField` component with `select`.");
  const te = _n(p), ee = h && te ? `${te}-helper-text` : void 0, J = w && te ? `${te}-label` : void 0, ie = GE[R], re = {
    slots: _,
    slotProps: {
      input: C,
      inputLabel: m,
      htmlInput: b,
      formHelperText: y,
      select: N,
      ...G
    }
  }, q = {}, X = re.slotProps.inputLabel;
  R === "outlined" && (X && typeof X.shrink < "u" && (q.notched = X.shrink), q.label = w), I && ((!N || !N.native) && (q.id = void 0), q["aria-describedby"] = void 0);
  const [z, ne] = Xe("root", {
    elementType: QE,
    shouldForwardComponentProp: !0,
    externalForwardedProps: {
      ...re,
      ...B
    },
    ownerState: H,
    className: pe(K.root, l),
    ref: n,
    additionalProps: {
      disabled: d,
      error: f,
      fullWidth: g,
      required: D,
      color: c,
      variant: R
    }
  }), [Y, ae] = Xe("input", {
    elementType: ie,
    externalForwardedProps: re,
    additionalProps: q,
    ownerState: H
  }), [W, oe] = Xe("inputLabel", {
    elementType: _l,
    externalForwardedProps: re,
    ownerState: H
  }), [ye, ge] = Xe("htmlInput", {
    elementType: "input",
    externalForwardedProps: re,
    ownerState: H
  }), [se, ce] = Xe("formHelperText", {
    elementType: Ll,
    externalForwardedProps: re,
    ownerState: H
  }), [ue, ke] = Xe("select", {
    elementType: ql,
    externalForwardedProps: re,
    ownerState: H
  }), Te = /* @__PURE__ */ E.jsx(Y, {
    "aria-describedby": ee,
    autoComplete: s,
    autoFocus: i,
    defaultValue: u,
    fullWidth: g,
    multiline: M,
    name: F,
    rows: T,
    maxRows: S,
    minRows: P,
    type: L,
    value: V,
    id: te,
    inputRef: O,
    onBlur: A,
    onChange: $,
    onFocus: k,
    placeholder: v,
    inputProps: ge,
    slots: {
      input: _.htmlInput ? ye : void 0
    },
    ...ae
  });
  return /* @__PURE__ */ E.jsxs(z, {
    ...ne,
    children: [w != null && w !== "" && /* @__PURE__ */ E.jsx(W, {
      htmlFor: te,
      id: J,
      ...oe,
      children: w
    }), I ? /* @__PURE__ */ E.jsx(ue, {
      "aria-describedby": ee,
      id: te,
      labelId: J,
      value: V,
      input: Te,
      ...ke,
      children: a
    }) : Te, h && /* @__PURE__ */ E.jsx(se, {
      id: ee,
      ...ce,
      children: h
    })]
  });
});
process.env.NODE_ENV !== "production" && (eh.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * This prop helps users to fill forms faster, especially on mobile devices.
   * The name can be confusing, as it's more like an autofill.
   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
   */
  autoComplete: o.string,
  /**
   * If `true`, the `input` element is focused during the first mount.
   * @default false
   */
  autoFocus: o.bool,
  /**
   * @ignore
   */
  children: o.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: o.object,
  /**
   * @ignore
   */
  className: o.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * @default 'primary'
   */
  color: o.oneOfType([o.oneOf(["primary", "secondary", "error", "info", "success", "warning"]), o.string]),
  /**
   * The default value. Use when the component is not controlled.
   */
  defaultValue: o.any,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: o.bool,
  /**
   * If `true`, the label is displayed in an error state.
   * @default false
   */
  error: o.bool,
  /**
   * Props applied to the [`FormHelperText`](https://mui.com/material-ui/api/form-helper-text/) element.
   * @deprecated Use `slotProps.formHelperText` instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  FormHelperTextProps: o.object,
  /**
   * If `true`, the input will take up the full width of its container.
   * @default false
   */
  fullWidth: o.bool,
  /**
   * The helper text content.
   */
  helperText: o.node,
  /**
   * The id of the `input` element.
   * Use this prop to make `label` and `helperText` accessible for screen readers.
   */
  id: o.string,
  /**
   * Props applied to the [`InputLabel`](https://mui.com/material-ui/api/input-label/) element.
   * Pointer events like `onClick` are enabled if and only if `shrink` is `true`.
   * @deprecated Use `slotProps.inputLabel` instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  InputLabelProps: o.object,
  /**
   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/input#attributes) applied to the `input` element.
   * @deprecated Use `slotProps.htmlInput` instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  inputProps: o.object,
  /**
   * Props applied to the Input element.
   * It will be a [`FilledInput`](https://mui.com/material-ui/api/filled-input/),
   * [`OutlinedInput`](https://mui.com/material-ui/api/outlined-input/) or [`Input`](https://mui.com/material-ui/api/input/)
   * component depending on the `variant` prop value.
   * @deprecated Use `slotProps.input` instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  InputProps: o.object,
  /**
   * Pass a ref to the `input` element.
   */
  inputRef: lt,
  /**
   * The label content.
   */
  label: o.node,
  /**
   * If `dense` or `normal`, will adjust vertical spacing of this and contained components.
   * @default 'none'
   */
  margin: o.oneOf(["dense", "none", "normal"]),
  /**
   * Maximum number of rows to display when multiline option is set to true.
   */
  maxRows: o.oneOfType([o.number, o.string]),
  /**
   * Minimum number of rows to display when multiline option is set to true.
   */
  minRows: o.oneOfType([o.number, o.string]),
  /**
   * If `true`, a `textarea` element is rendered instead of an input.
   * @default false
   */
  multiline: o.bool,
  /**
   * Name attribute of the `input` element.
   */
  name: o.string,
  /**
   * @ignore
   */
  onBlur: o.func,
  /**
   * Callback fired when the value is changed.
   *
   * @param {object} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (string).
   */
  onChange: o.func,
  /**
   * @ignore
   */
  onFocus: o.func,
  /**
   * The short hint displayed in the `input` before the user enters a value.
   */
  placeholder: o.string,
  /**
   * If `true`, the label is displayed as required and the `input` element is required.
   * @default false
   */
  required: o.bool,
  /**
   * Number of rows to display when multiline option is set to true.
   */
  rows: o.oneOfType([o.number, o.string]),
  /**
   * Render a [`Select`](https://mui.com/material-ui/api/select/) element while passing the Input element to `Select` as `input` parameter.
   * If this option is set you must pass the options of the select as children.
   * @default false
   */
  select: o.bool,
  /**
   * Props applied to the [`Select`](https://mui.com/material-ui/api/select/) element.
   * @deprecated Use `slotProps.select` instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  SelectProps: o.object,
  /**
   * The size of the component.
   * @default 'medium'
   */
  size: o.oneOfType([o.oneOf(["medium", "small"]), o.string]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: o.shape({
    formHelperText: o.oneOfType([o.func, o.object]),
    htmlInput: o.oneOfType([o.func, o.object]),
    input: o.oneOfType([o.func, o.object]),
    inputLabel: o.oneOfType([o.func, o.object]),
    select: o.oneOfType([o.func, o.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: o.shape({
    formHelperText: o.elementType,
    htmlInput: o.elementType,
    input: o.elementType,
    inputLabel: o.elementType,
    root: o.elementType,
    select: o.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: o.oneOfType([o.arrayOf(o.oneOfType([o.func, o.object, o.bool])), o.func, o.object]),
  /**
   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/input#input_types).
   */
  type: o.string,
  /**
   * The value of the `input` element, required for a controlled component.
   */
  value: o.any,
  /**
   * The variant to use.
   * @default 'outlined'
   */
  variant: o.oneOf(["filled", "outlined", "standard"])
});
function ZE(e) {
  return we("MuiIconButton", e);
}
const od = xe("MuiIconButton", ["root", "disabled", "colorInherit", "colorPrimary", "colorSecondary", "colorError", "colorInfo", "colorSuccess", "colorWarning", "edgeStart", "edgeEnd", "sizeSmall", "sizeMedium", "sizeLarge", "loading", "loadingIndicator", "loadingWrapper"]), JE = (e) => {
  const {
    classes: t,
    disabled: n,
    color: r,
    edge: s,
    size: i,
    loading: a
  } = e, l = {
    root: ["root", a && "loading", n && "disabled", r !== "default" && `color${le(r)}`, s && `edge${le(s)}`, `size${le(i)}`],
    loadingIndicator: ["loadingIndicator"],
    loadingWrapper: ["loadingWrapper"]
  };
  return be(l, ZE, t);
}, eO = Q(Vr, {
  name: "MuiIconButton",
  slot: "Root",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e;
    return [t.root, n.loading && t.loading, n.color !== "default" && t[`color${le(n.color)}`], n.edge && t[`edge${le(n.edge)}`], t[`size${le(n.size)}`]];
  }
})(qe(({
  theme: e
}) => ({
  textAlign: "center",
  flex: "0 0 auto",
  fontSize: e.typography.pxToRem(24),
  padding: 8,
  borderRadius: "50%",
  color: (e.vars || e).palette.action.active,
  transition: e.transitions.create("background-color", {
    duration: e.transitions.duration.shortest
  }),
  variants: [{
    props: (t) => !t.disableRipple,
    style: {
      "--IconButton-hoverBg": e.alpha((e.vars || e).palette.action.active, (e.vars || e).palette.action.hoverOpacity),
      "&:hover": {
        backgroundColor: "var(--IconButton-hoverBg)",
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      }
    }
  }, {
    props: {
      edge: "start"
    },
    style: {
      marginLeft: -12
    }
  }, {
    props: {
      edge: "start",
      size: "small"
    },
    style: {
      marginLeft: -3
    }
  }, {
    props: {
      edge: "end"
    },
    style: {
      marginRight: -12
    }
  }, {
    props: {
      edge: "end",
      size: "small"
    },
    style: {
      marginRight: -3
    }
  }]
})), qe(({
  theme: e
}) => ({
  variants: [{
    props: {
      color: "inherit"
    },
    style: {
      color: "inherit"
    }
  }, ...Object.entries(e.palette).filter(Mt()).map(([t]) => ({
    props: {
      color: t
    },
    style: {
      color: (e.vars || e).palette[t].main
    }
  })), ...Object.entries(e.palette).filter(Mt()).map(([t]) => ({
    props: {
      color: t
    },
    style: {
      "--IconButton-hoverBg": e.alpha((e.vars || e).palette[t].main, (e.vars || e).palette.action.hoverOpacity)
    }
  })), {
    props: {
      size: "small"
    },
    style: {
      padding: 5,
      fontSize: e.typography.pxToRem(18)
    }
  }, {
    props: {
      size: "large"
    },
    style: {
      padding: 12,
      fontSize: e.typography.pxToRem(28)
    }
  }],
  [`&.${od.disabled}`]: {
    backgroundColor: "transparent",
    color: (e.vars || e).palette.action.disabled
  },
  [`&.${od.loading}`]: {
    color: "transparent"
  }
}))), tO = Q("span", {
  name: "MuiIconButton",
  slot: "LoadingIndicator"
})(({
  theme: e
}) => ({
  display: "none",
  position: "absolute",
  visibility: "visible",
  top: "50%",
  left: "50%",
  transform: "translate(-50%, -50%)",
  color: (e.vars || e).palette.action.disabled,
  variants: [{
    props: {
      loading: !0
    },
    style: {
      display: "flex"
    }
  }]
})), Fo = /* @__PURE__ */ x.forwardRef(function(t, n) {
  const r = Ae({
    props: t,
    name: "MuiIconButton"
  }), {
    edge: s = !1,
    children: i,
    className: a,
    color: l = "default",
    disabled: c = !1,
    disableFocusRipple: u = !1,
    size: d = "medium",
    id: f,
    loading: y = null,
    loadingIndicator: g,
    ...h
  } = r, p = _n(f), m = g ?? /* @__PURE__ */ E.jsx(Nl, {
    "aria-labelledby": p,
    color: "inherit",
    size: 16
  }), b = {
    ...r,
    edge: s,
    color: l,
    disabled: c,
    disableFocusRipple: u,
    loading: y,
    loadingIndicator: m,
    size: d
  }, C = JE(b);
  return /* @__PURE__ */ E.jsxs(eO, {
    id: y ? p : f,
    className: pe(C.root, a),
    centerRipple: !0,
    focusRipple: !u,
    disabled: c || y,
    ref: n,
    ...h,
    ownerState: b,
    children: [typeof y == "boolean" && // use plain HTML span to minimize the runtime overhead
    /* @__PURE__ */ E.jsx("span", {
      className: C.loadingWrapper,
      style: {
        display: "contents"
      },
      children: /* @__PURE__ */ E.jsx(tO, {
        className: C.loadingIndicator,
        ownerState: b,
        children: y && m
      })
    }), i]
  });
});
process.env.NODE_ENV !== "production" && (Fo.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The icon to display.
   */
  children: wn(o.node, (e) => x.Children.toArray(e.children).some((n) => /* @__PURE__ */ x.isValidElement(n) && n.props.onClick) ? new Error(["MUI: You are providing an onClick event listener to a child of a button element.", "Prefer applying it to the IconButton directly.", "This guarantees that the whole <button> will be responsive to click events."].join(`
`)) : null),
  /**
   * Override or extend the styles applied to the component.
   */
  classes: o.object,
  /**
   * @ignore
   */
  className: o.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * @default 'default'
   */
  color: o.oneOfType([o.oneOf(["inherit", "default", "primary", "secondary", "error", "info", "success", "warning"]), o.string]),
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: o.bool,
  /**
   * If `true`, the  keyboard focus ripple is disabled.
   * @default false
   */
  disableFocusRipple: o.bool,
  /**
   * If `true`, the ripple effect is disabled.
   *
   * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
   * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
   * @default false
   */
  disableRipple: o.bool,
  /**
   * If given, uses a negative margin to counteract the padding on one
   * side (this is often helpful for aligning the left or right
   * side of the icon with content above or below, without ruining the border
   * size and shape).
   * @default false
   */
  edge: o.oneOf(["end", "start", !1]),
  /**
   * @ignore
   */
  id: o.string,
  /**
   * If `true`, the loading indicator is visible and the button is disabled.
   * If `true | false`, the loading wrapper is always rendered before the children to prevent [Google Translation Crash](https://github.com/mui/material-ui/issues/27853).
   * @default null
   */
  loading: o.bool,
  /**
   * Element placed before the children if the button is in loading state.
   * The node should contain an element with `role="progressbar"` with an accessible name.
   * By default, it renders a `CircularProgress` that is labeled by the button itself.
   * @default <CircularProgress color="inherit" size={16} />
   */
  loadingIndicator: o.node,
  /**
   * The size of the component.
   * `small` is equivalent to the dense button styling.
   * @default 'medium'
   */
  size: o.oneOfType([o.oneOf(["small", "medium", "large"]), o.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: o.oneOfType([o.arrayOf(o.oneOfType([o.func, o.object, o.bool])), o.func, o.object])
});
function nO(e) {
  return we("MuiInputAdornment", e);
}
const sd = xe("MuiInputAdornment", ["root", "filled", "standard", "outlined", "positionStart", "positionEnd", "disablePointerEvents", "hiddenLabel", "sizeSmall"]);
var id;
const rO = (e, t) => {
  const {
    ownerState: n
  } = e;
  return [t.root, t[`position${le(n.position)}`], n.disablePointerEvents === !0 && t.disablePointerEvents, t[n.variant]];
}, oO = (e) => {
  const {
    classes: t,
    disablePointerEvents: n,
    hiddenLabel: r,
    position: s,
    size: i,
    variant: a
  } = e, l = {
    root: ["root", n && "disablePointerEvents", s && `position${le(s)}`, a, r && "hiddenLabel", i && `size${le(i)}`]
  };
  return be(l, nO, t);
}, sO = Q("div", {
  name: "MuiInputAdornment",
  slot: "Root",
  overridesResolver: rO
})(qe(({
  theme: e
}) => ({
  display: "flex",
  maxHeight: "2em",
  alignItems: "center",
  whiteSpace: "nowrap",
  color: (e.vars || e).palette.action.active,
  variants: [{
    props: {
      variant: "filled"
    },
    style: {
      [`&.${sd.positionStart}&:not(.${sd.hiddenLabel})`]: {
        marginTop: 16
      }
    }
  }, {
    props: {
      position: "start"
    },
    style: {
      marginRight: 8
    }
  }, {
    props: {
      position: "end"
    },
    style: {
      marginLeft: 8
    }
  }, {
    props: {
      disablePointerEvents: !0
    },
    style: {
      pointerEvents: "none"
    }
  }]
}))), th = /* @__PURE__ */ x.forwardRef(function(t, n) {
  const r = Ae({
    props: t,
    name: "MuiInputAdornment"
  }), {
    children: s,
    className: i,
    component: a = "div",
    disablePointerEvents: l = !1,
    disableTypography: c = !1,
    position: u,
    variant: d,
    ...f
  } = r, y = Sn() || {};
  let g = d;
  d && y.variant && process.env.NODE_ENV !== "production" && d === y.variant && console.error("MUI: The `InputAdornment` variant infers the variant prop you do not have to provide one."), y && !g && (g = y.variant);
  const h = {
    ...r,
    hiddenLabel: y.hiddenLabel,
    size: y.size,
    disablePointerEvents: l,
    position: u,
    variant: g
  }, p = oO(h);
  return /* @__PURE__ */ E.jsx(rs.Provider, {
    value: null,
    children: /* @__PURE__ */ E.jsx(sO, {
      as: a,
      ownerState: h,
      className: pe(p.root, i),
      ref: n,
      ...f,
      children: typeof s == "string" && !c ? /* @__PURE__ */ E.jsx(Vn, {
        color: "textSecondary",
        children: s
      }) : /* @__PURE__ */ E.jsxs(x.Fragment, {
        children: [u === "start" ? (
          /* notranslate needed while Google Translate will not fix zero-width space issue */
          id || (id = /* @__PURE__ */ E.jsx("span", {
            className: "notranslate",
            "aria-hidden": !0,
            children: "​"
          }))
        ) : null, s]
      })
    })
  });
});
process.env.NODE_ENV !== "production" && (th.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component, normally an `IconButton` or string.
   */
  children: o.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: o.object,
  /**
   * @ignore
   */
  className: o.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: o.elementType,
  /**
   * Disable pointer events on the root.
   * This allows for the content of the adornment to focus the `input` on click.
   * @default false
   */
  disablePointerEvents: o.bool,
  /**
   * If children is a string then disable wrapping in a Typography component.
   * @default false
   */
  disableTypography: o.bool,
  /**
   * The position this adornment should appear relative to the `Input`.
   */
  position: o.oneOf(["end", "start"]).isRequired,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: o.oneOfType([o.arrayOf(o.oneOfType([o.func, o.object, o.bool])), o.func, o.object]),
  /**
   * The variant to use.
   * Note: If you are using the `TextField` component or the `FormControl` component
   * you do not have to set this manually.
   */
  variant: o.oneOf(["filled", "outlined", "standard"])
});
const Pn = 7;
function Hl(e) {
  const {
    ownerState: t
  } = gt(), n = Ut();
  return x.useMemo(() => j({}, t, {
    isFieldDisabled: e.disabled ?? !1,
    isFieldReadOnly: e.readOnly ?? !1,
    isFieldRequired: e.required ?? !1,
    fieldDirection: n ? "rtl" : "ltr"
  }), [t, e.disabled, e.readOnly, e.required, n]);
}
const iO = dn(/* @__PURE__ */ E.jsx("path", {
  d: "M7 10l5 5 5-5z"
}), "ArrowDropDown"), aO = dn(/* @__PURE__ */ E.jsx("path", {
  d: "M15.41 16.59L10.83 12l4.58-4.59L14 6l-6 6 6 6 1.41-1.41z"
}), "ArrowLeft"), lO = dn(/* @__PURE__ */ E.jsx("path", {
  d: "M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z"
}), "ArrowRight"), cO = dn(/* @__PURE__ */ E.jsx("path", {
  d: "M17 12h-5v5h5v-5zM16 1v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2h-1V1h-2zm3 18H5V8h14v11z"
}), "Calendar");
dn(/* @__PURE__ */ E.jsxs(x.Fragment, {
  children: [/* @__PURE__ */ E.jsx("path", {
    d: "M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
  }), /* @__PURE__ */ E.jsx("path", {
    d: "M12.5 7H11v6l5.25 3.15.75-1.23-4.5-2.67z"
  })]
}), "Clock");
dn(/* @__PURE__ */ E.jsx("path", {
  d: "M9 11H7v2h2v-2zm4 0h-2v2h2v-2zm4 0h-2v2h2v-2zm2-7h-1V2h-2v2H8V2H6v2H5c-1.11 0-1.99.9-1.99 2L3 20c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 16H5V9h14v11z"
}), "DateRange");
dn(/* @__PURE__ */ E.jsxs(x.Fragment, {
  children: [/* @__PURE__ */ E.jsx("path", {
    d: "M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
  }), /* @__PURE__ */ E.jsx("path", {
    d: "M12.5 7H11v6l5.25 3.15.75-1.23-4.5-2.67z"
  })]
}), "Time");
const uO = dn(/* @__PURE__ */ E.jsx("path", {
  d: "M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
}), "Clear");
function dO(e) {
  return we("MuiPickersTextField", e);
}
xe("MuiPickersTextField", ["root", "focused", "disabled", "error", "required"]);
const fO = {
  border: 0,
  clip: "rect(0 0 0 0)",
  height: "1px",
  margin: "-1px",
  overflow: "hidden",
  padding: 0,
  position: "absolute",
  whiteSpace: "nowrap",
  width: "1px"
};
function pO(e) {
  return we("MuiPickersInputBase", e);
}
const Mr = xe("MuiPickersInputBase", ["root", "focused", "disabled", "error", "notchedOutline", "sectionContent", "sectionBefore", "sectionAfter", "adornedStart", "adornedEnd", "input", "inputSizeSmall", "activeBar"]);
function hO(e) {
  return we("MuiPickersSectionList", e);
}
const io = xe("MuiPickersSectionList", ["root", "section", "sectionContent"]), mO = ["slots", "slotProps", "elements", "sectionListRef", "classes"], nh = Q("div", {
  name: "MuiPickersSectionList",
  slot: "Root"
})({
  direction: "ltr /*! @noflip */",
  outline: "none"
}), rh = Q("span", {
  name: "MuiPickersSectionList",
  slot: "Section"
})({}), oh = Q("span", {
  name: "MuiPickersSectionList",
  slot: "SectionSeparator"
})({
  whiteSpace: "pre"
}), sh = Q("span", {
  name: "MuiPickersSectionList",
  slot: "SectionContent"
})({
  outline: "none"
}), yO = (e) => be({
  root: ["root"],
  section: ["section"],
  sectionContent: ["sectionContent"]
}, hO, e);
function ih(e) {
  const {
    slots: t,
    slotProps: n,
    element: r,
    classes: s
  } = e, {
    ownerState: i
  } = gt(), a = t?.section ?? rh, l = Ie({
    elementType: a,
    externalSlotProps: n?.section,
    externalForwardedProps: r.container,
    className: s.section,
    ownerState: i
  }), c = t?.sectionContent ?? sh, u = Ie({
    elementType: c,
    externalSlotProps: n?.sectionContent,
    externalForwardedProps: r.content,
    additionalProps: {
      suppressContentEditableWarning: !0
    },
    className: s.sectionContent,
    ownerState: i
  }), d = t?.sectionSeparator ?? oh, f = Ie({
    elementType: d,
    externalSlotProps: n?.sectionSeparator,
    externalForwardedProps: r.before,
    ownerState: j({}, i, {
      separatorPosition: "before"
    })
  }), y = Ie({
    elementType: d,
    externalSlotProps: n?.sectionSeparator,
    externalForwardedProps: r.after,
    ownerState: j({}, i, {
      separatorPosition: "after"
    })
  });
  return /* @__PURE__ */ E.jsxs(a, j({}, l, {
    children: [/* @__PURE__ */ E.jsx(d, j({}, f)), /* @__PURE__ */ E.jsx(c, j({}, u)), /* @__PURE__ */ E.jsx(d, j({}, y))]
  }));
}
process.env.NODE_ENV !== "production" && (ih.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  classes: o.object.isRequired,
  element: o.shape({
    after: o.object.isRequired,
    before: o.object.isRequired,
    container: o.object.isRequired,
    content: o.object.isRequired
  }).isRequired,
  /**
   * The props used for each component slot.
   */
  slotProps: o.object,
  /**
   * Overridable component slots.
   */
  slots: o.object
});
const Yl = /* @__PURE__ */ x.forwardRef(function(t, n) {
  const r = Ze({
    props: t,
    name: "MuiPickersSectionList"
  }), {
    slots: s,
    slotProps: i,
    elements: a,
    sectionListRef: l,
    classes: c
  } = r, u = Ee(r, mO), d = yO(c), {
    ownerState: f
  } = gt(), y = x.useRef(null), g = Ne(n, y), h = (b) => {
    if (!y.current)
      throw new Error(`MUI X: Cannot call sectionListRef.${b} before the mount of the component.`);
    return y.current;
  };
  x.useImperativeHandle(l, () => ({
    getRoot() {
      return h("getRoot");
    },
    getSectionContainer(b) {
      return h("getSectionContainer").querySelector(`.${io.section}[data-sectionindex="${b}"]`);
    },
    getSectionContent(b) {
      return h("getSectionContent").querySelector(`.${io.section}[data-sectionindex="${b}"] .${io.sectionContent}`);
    },
    getSectionIndexFromDOMElement(b) {
      const C = h("getSectionIndexFromDOMElement");
      if (b == null || !C.contains(b))
        return null;
      let O = null;
      return b.classList.contains(io.section) ? O = b : b.classList.contains(io.sectionContent) && (O = b.parentElement), O == null ? null : Number(O.dataset.sectionindex);
    }
  }));
  const p = s?.root ?? nh, m = Ie({
    elementType: p,
    externalSlotProps: i?.root,
    externalForwardedProps: u,
    additionalProps: {
      ref: g,
      suppressContentEditableWarning: !0
    },
    className: d.root,
    ownerState: f
  });
  return /* @__PURE__ */ E.jsx(p, j({}, m, {
    children: m.contentEditable ? a.map(({
      content: b,
      before: C,
      after: O
    }) => `${C.children}${b.children}${O.children}`).join("") : /* @__PURE__ */ E.jsx(x.Fragment, {
      children: a.map((b, C) => /* @__PURE__ */ E.jsx(ih, {
        slots: s,
        slotProps: i,
        element: b,
        classes: d
      }, C))
    })
  }));
});
process.env.NODE_ENV !== "production" && (Yl.displayName = "PickersSectionList");
process.env.NODE_ENV !== "production" && (Yl.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Override or extend the styles applied to the component.
   */
  classes: o.object,
  /**
   * If true, the whole element is editable.
   * Useful when all the sections are selected.
   */
  contentEditable: o.bool.isRequired,
  /**
   * The elements to render.
   * Each element contains the prop to edit a section of the value.
   */
  elements: o.arrayOf(o.shape({
    after: o.object.isRequired,
    before: o.object.isRequired,
    container: o.object.isRequired,
    content: o.object.isRequired
  })).isRequired,
  sectionListRef: o.oneOfType([o.func, o.shape({
    current: o.shape({
      getRoot: o.func.isRequired,
      getSectionContainer: o.func.isRequired,
      getSectionContent: o.func.isRequired,
      getSectionIndexFromDOMElement: o.func.isRequired
    })
  })]),
  /**
   * The props used for each component slot.
   */
  slotProps: o.object,
  /**
   * Overridable component slots.
   */
  slots: o.object
});
const Kl = /* @__PURE__ */ x.createContext(null);
process.env.NODE_ENV !== "production" && (Kl.displayName = "PickerTextFieldOwnerStateContext");
const Ii = () => {
  const e = x.useContext(Kl);
  if (e == null)
    throw new Error(["MUI X: The `usePickerTextFieldOwnerState` can only be called in components that are used inside a PickerTextField component"].join(`
`));
  return e;
}, gO = ["elements", "areAllSectionsEmpty", "defaultValue", "label", "value", "onChange", "id", "autoFocus", "endAdornment", "startAdornment", "renderSuffix", "slots", "slotProps", "contentEditable", "tabIndex", "onInput", "onPaste", "onKeyDown", "fullWidth", "name", "readOnly", "inputProps", "inputRef", "sectionListRef", "onFocus", "onBlur", "classes", "ownerState"], bO = (e) => Math.round(e * 1e5) / 1e5, Ni = Q("div", {
  name: "MuiPickersInputBase",
  slot: "Root"
})(({
  theme: e
}) => j({}, e.typography.body1, {
  color: (e.vars || e).palette.text.primary,
  cursor: "text",
  padding: 0,
  display: "flex",
  justifyContent: "flex-start",
  alignItems: "center",
  position: "relative",
  boxSizing: "border-box",
  // Prevent padding issue with fullWidth.
  letterSpacing: `${bO(0.15 / 16)}em`,
  variants: [{
    props: {
      isInputInFullWidth: !0
    },
    style: {
      width: "100%"
    }
  }]
})), Gl = Q(nh, {
  name: "MuiPickersInputBase",
  slot: "SectionsContainer"
})(({
  theme: e
}) => ({
  padding: "4px 0 5px",
  fontFamily: e.typography.fontFamily,
  fontSize: "inherit",
  lineHeight: "1.4375em",
  // 23px
  flexGrow: 1,
  outline: "none",
  display: "flex",
  flexWrap: "nowrap",
  overflow: "hidden",
  letterSpacing: "inherit",
  // Baseline behavior
  width: "182px",
  variants: [{
    props: {
      fieldDirection: "rtl"
    },
    style: {
      justifyContent: "end"
    }
  }, {
    props: {
      inputSize: "small"
    },
    style: {
      paddingTop: 1
    }
  }, {
    props: {
      hasStartAdornment: !1,
      isFieldFocused: !1,
      isFieldValueEmpty: !0
    },
    style: {
      color: "currentColor",
      opacity: 0
    }
  }, {
    props: {
      hasStartAdornment: !1,
      isFieldFocused: !1,
      isFieldValueEmpty: !0,
      inputHasLabel: !1
    },
    style: e.vars ? {
      opacity: e.vars.opacity.inputPlaceholder
    } : {
      opacity: e.palette.mode === "light" ? 0.42 : 0.5
    }
  }, {
    props: {
      hasStartAdornment: !1,
      isFieldFocused: !1,
      isFieldValueEmpty: !0,
      inputHasLabel: !0,
      isLabelShrunk: !0
    },
    style: e.vars ? {
      opacity: e.vars.opacity.inputPlaceholder
    } : {
      opacity: e.palette.mode === "light" ? 0.42 : 0.5
    }
  }]
})), vO = Q(rh, {
  name: "MuiPickersInputBase",
  slot: "Section"
})(({
  theme: e
}) => ({
  fontFamily: e.typography.fontFamily,
  fontSize: "inherit",
  letterSpacing: "inherit",
  lineHeight: "1.4375em",
  // 23px
  display: "inline-block",
  whiteSpace: "nowrap"
})), xO = Q(sh, {
  name: "MuiPickersInputBase",
  slot: "SectionContent",
  overridesResolver: (e, t) => t.content
  // FIXME: Inconsistent naming with slot
})(({
  theme: e
}) => ({
  fontFamily: e.typography.fontFamily,
  lineHeight: "1.4375em",
  // 23px
  letterSpacing: "inherit",
  width: "fit-content",
  outline: "none"
})), wO = Q(oh, {
  name: "MuiPickersInputBase",
  slot: "Separator"
})(() => ({
  whiteSpace: "pre",
  letterSpacing: "inherit"
})), SO = Q("input", {
  name: "MuiPickersInputBase",
  slot: "Input",
  overridesResolver: (e, t) => t.hiddenInput
  // FIXME: Inconsistent naming with slot
})(j({}, fO)), EO = Q("div", {
  name: "MuiPickersInputBase",
  slot: "ActiveBar"
})(({
  theme: e,
  ownerState: t
}) => ({
  display: "none",
  position: "absolute",
  height: 2,
  bottom: 2,
  borderTopLeftRadius: 2,
  borderTopRightRadius: 2,
  transition: e.transitions.create(["width", "left"], {
    duration: e.transitions.duration.shortest
  }),
  backgroundColor: (e.vars || e).palette.primary.main,
  '[data-active-range-position="start"] &, [data-active-range-position="end"] &': {
    display: "block"
  },
  '[data-active-range-position="start"] &': {
    left: t.sectionOffsets[0]
  },
  '[data-active-range-position="end"] &': {
    left: t.sectionOffsets[1]
  }
})), OO = (e, t) => {
  const {
    isFieldFocused: n,
    isFieldDisabled: r,
    isFieldReadOnly: s,
    hasFieldError: i,
    inputSize: a,
    isInputInFullWidth: l,
    inputColor: c,
    hasStartAdornment: u,
    hasEndAdornment: d
  } = t, f = {
    root: ["root", n && !r && "focused", r && "disabled", s && "readOnly", i && "error", l && "fullWidth", `color${le(c)}`, a === "small" && "inputSizeSmall", u && "adornedStart", d && "adornedEnd"],
    notchedOutline: ["notchedOutline"],
    input: ["input"],
    sectionsContainer: ["sectionsContainer"],
    sectionContent: ["sectionContent"],
    sectionBefore: ["sectionBefore"],
    sectionAfter: ["sectionAfter"],
    activeBar: ["activeBar"]
  };
  return be(f, pO, e);
};
function ad(e, t, n, r) {
  if (e.content.id) {
    const s = t.current?.querySelectorAll(`[data-sectionindex="${n}"] [data-range-position="${r}"]`);
    if (s)
      return Array.from(s).reduce((i, a) => i + a.offsetWidth, 0);
  }
  return 0;
}
function CO(e, t) {
  let n = 0;
  if (t.current?.getAttribute("data-active-range-position") === "end")
    for (let s = e.length - 1; s >= e.length / 2; s -= 1)
      n += ad(e[s], t, s, "end");
  else
    for (let s = 0; s < e.length / 2; s += 1)
      n += ad(e[s], t, s, "start");
  return {
    activeBarWidth: n,
    sectionOffsets: [t.current?.querySelector('[data-sectionindex="0"]')?.offsetLeft || 0, t.current?.querySelector(`[data-sectionindex="${e.length / 2}"]`)?.offsetLeft || 0]
  };
}
const os = /* @__PURE__ */ x.forwardRef(function(t, n) {
  const r = Ze({
    props: t,
    name: "MuiPickersInputBase"
  }), {
    elements: s,
    areAllSectionsEmpty: i,
    value: a,
    onChange: l,
    id: c,
    endAdornment: u,
    startAdornment: d,
    renderSuffix: f,
    slots: y,
    slotProps: g,
    contentEditable: h,
    tabIndex: p,
    onInput: m,
    onPaste: b,
    onKeyDown: C,
    name: O,
    readOnly: w,
    inputProps: S,
    inputRef: P,
    sectionListRef: M,
    onFocus: F,
    onBlur: A,
    classes: $,
    ownerState: k
  } = r, v = Ee(r, gO), D = Ii(), T = x.useRef(null), I = x.useRef(null), N = x.useRef([]), _ = Ne(n, T), G = Ne(S?.ref, P), L = Sn();
  if (!L)
    throw new Error("MUI X: PickersInputBase should always be used inside a PickersTextField component");
  const V = k ?? D, R = (q) => {
    L.onFocus?.(q), F?.(q);
  }, B = (q) => {
    R(q);
  }, H = (q) => {
    if (C?.(q), q.key === "Enter" && !q.defaultMuiPrevented) {
      if (T.current?.dataset.multiInput)
        return;
      const X = T.current?.closest("form"), z = X?.querySelector('[type="submit"]');
      if (!X || !z)
        return;
      q.preventDefault(), X.requestSubmit(z);
    }
  }, K = (q) => {
    L.onBlur?.(q), A?.(q);
  };
  x.useEffect(() => {
    L && L.setAdornedStart(!!d);
  }, [L, d]), x.useEffect(() => {
    L && (i ? L.onEmpty() : L.onFilled());
  }, [L, i]);
  const te = OO($, V), ee = y?.root || Ni, J = Ie({
    elementType: ee,
    externalSlotProps: g?.root,
    externalForwardedProps: v,
    additionalProps: {
      "aria-invalid": L.error,
      ref: _
    },
    className: te.root,
    ownerState: V
  }), ie = y?.input || Gl, re = s.some((q) => q.content["data-range-position"] !== void 0);
  return x.useEffect(() => {
    if (!re || !V.isPickerOpen)
      return;
    const {
      activeBarWidth: q,
      sectionOffsets: X
    } = CO(s, T);
    N.current = [X[0], X[1]], I.current && (I.current.style.width = `${q}px`);
  }, [s, re, V.isPickerOpen]), /* @__PURE__ */ E.jsxs(ee, j({}, J, {
    children: [d, /* @__PURE__ */ E.jsx(Yl, {
      sectionListRef: M,
      elements: s,
      contentEditable: h,
      tabIndex: p,
      className: te.sectionsContainer,
      onFocus: R,
      onBlur: K,
      onInput: m,
      onPaste: b,
      onKeyDown: H,
      slots: {
        root: ie,
        section: vO,
        sectionContent: xO,
        sectionSeparator: wO
      },
      slotProps: {
        root: j({}, g?.input, {
          ownerState: V
        }),
        sectionContent: {
          className: Mr.sectionContent
        },
        sectionSeparator: ({
          separatorPosition: q
        }) => ({
          className: q === "before" ? Mr.sectionBefore : Mr.sectionAfter
        })
      }
    }), u, f ? f(j({}, L)) : null, /* @__PURE__ */ E.jsx(SO, j({
      name: O,
      className: te.input,
      value: a,
      onChange: l,
      id: c,
      "aria-hidden": "true",
      tabIndex: -1,
      readOnly: w,
      required: L.required,
      disabled: L.disabled,
      onFocus: B
    }, S, {
      ref: G
    })), re && /* @__PURE__ */ E.jsx(EO, {
      className: te.activeBar,
      ref: I,
      ownerState: {
        sectionOffsets: N.current
      }
    })]
  }));
});
process.env.NODE_ENV !== "production" && (os.displayName = "PickersInputBase");
process.env.NODE_ENV !== "production" && (os.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Is `true` if the current values equals the empty value.
   * For a single item value, it means that `value === null`
   * For a range value, it means that `value === [null, null]`
   */
  areAllSectionsEmpty: o.bool.isRequired,
  className: o.string,
  component: o.elementType,
  /**
   * If true, the whole element is editable.
   * Useful when all the sections are selected.
   */
  contentEditable: o.bool.isRequired,
  "data-multi-input": o.string,
  /**
   * The elements to render.
   * Each element contains the prop to edit a section of the value.
   */
  elements: o.arrayOf(o.shape({
    after: o.object.isRequired,
    before: o.object.isRequired,
    container: o.object.isRequired,
    content: o.object.isRequired
  })).isRequired,
  endAdornment: o.node,
  fullWidth: o.bool,
  id: o.string,
  inputProps: o.object,
  inputRef: lt,
  label: o.node,
  margin: o.oneOf(["dense", "none", "normal"]),
  name: o.string,
  onChange: o.func.isRequired,
  onClick: o.func.isRequired,
  onInput: o.func.isRequired,
  onKeyDown: o.func.isRequired,
  onPaste: o.func.isRequired,
  ownerState: o.any,
  readOnly: o.bool,
  renderSuffix: o.func,
  sectionListRef: o.oneOfType([o.func, o.shape({
    current: o.shape({
      getRoot: o.func.isRequired,
      getSectionContainer: o.func.isRequired,
      getSectionContent: o.func.isRequired,
      getSectionIndexFromDOMElement: o.func.isRequired
    })
  })]),
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: o.object,
  /**
   * The components used for each slot inside.
   *
   * @default {}
   */
  slots: o.object,
  startAdornment: o.node,
  style: o.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: o.oneOfType([o.arrayOf(o.oneOfType([o.func, o.object, o.bool])), o.func, o.object]),
  value: o.string.isRequired
});
function PO(e) {
  return we("MuiPickersOutlinedInput", e);
}
const zt = j({}, Mr, xe("MuiPickersOutlinedInput", ["root", "notchedOutline", "input"])), TO = ["children", "className", "label", "notched", "shrink"], RO = Q("fieldset", {
  name: "MuiPickersOutlinedInput",
  slot: "NotchedOutline"
})(({
  theme: e
}) => {
  const t = e.palette.mode === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)";
  return {
    textAlign: "left",
    position: "absolute",
    bottom: 0,
    right: 0,
    top: -5,
    left: 0,
    margin: 0,
    padding: "0 8px",
    pointerEvents: "none",
    borderRadius: "inherit",
    borderStyle: "solid",
    borderWidth: 1,
    overflow: "hidden",
    minWidth: "0%",
    borderColor: e.vars ? `rgba(${e.vars.palette.common.onBackgroundChannel} / 0.23)` : t
  };
}), ld = Q("span")(({
  theme: e
}) => ({
  fontFamily: e.typography.fontFamily,
  fontSize: "inherit"
})), kO = Q("legend", {
  shouldForwardProp: (e) => rn(e) && e !== "notched"
})(({
  theme: e
}) => ({
  float: "unset",
  // Fix conflict with bootstrap
  width: "auto",
  // Fix conflict with bootstrap
  overflow: "hidden",
  // Fix Horizontal scroll when label too long
  variants: [{
    props: {
      inputHasLabel: !1
    },
    style: {
      padding: 0,
      lineHeight: "11px",
      // sync with `height` in `legend` styles
      transition: e.transitions.create("width", {
        duration: 150,
        easing: e.transitions.easing.easeOut
      })
    }
  }, {
    props: {
      inputHasLabel: !0
    },
    style: {
      display: "block",
      // Fix conflict with normalize.css and sanitize.css
      padding: 0,
      height: 11,
      // sync with `lineHeight` in `legend` styles
      fontSize: "0.75em",
      visibility: "hidden",
      maxWidth: 0.01,
      transition: e.transitions.create("max-width", {
        duration: 50,
        easing: e.transitions.easing.easeOut
      }),
      whiteSpace: "nowrap",
      "& > span": {
        paddingLeft: 5,
        paddingRight: 5,
        display: "inline-block",
        opacity: 0,
        visibility: "visible"
      }
    }
  }, {
    props: {
      inputHasLabel: !0,
      notched: !0
    },
    style: {
      maxWidth: "100%",
      transition: e.transitions.create("max-width", {
        duration: 100,
        easing: e.transitions.easing.easeOut,
        delay: 50
      })
    }
  }]
}));
function DO(e) {
  const {
    className: t,
    label: n,
    notched: r
  } = e, s = Ee(e, TO), i = Ii();
  return /* @__PURE__ */ E.jsx(RO, j({
    "aria-hidden": !0,
    className: t
  }, s, {
    ownerState: i,
    children: /* @__PURE__ */ E.jsx(kO, {
      ownerState: i,
      notched: r,
      children: n ? /* @__PURE__ */ E.jsx(ld, {
        children: n
      }) : (
        // notranslate needed while Google Translate will not fix zero-width space issue
        /* @__PURE__ */ E.jsx(ld, {
          className: "notranslate",
          children: "​"
        })
      )
    })
  }));
}
const MO = ["label", "autoFocus", "ownerState", "classes", "notched"], IO = Q(Ni, {
  name: "MuiPickersOutlinedInput",
  slot: "Root"
})(({
  theme: e
}) => {
  const t = e.palette.mode === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)";
  return {
    padding: "0 14px",
    borderRadius: (e.vars || e).shape.borderRadius,
    [`&:hover .${zt.notchedOutline}`]: {
      borderColor: (e.vars || e).palette.text.primary
    },
    // Reset on touch devices, it doesn't add specificity
    "@media (hover: none)": {
      [`&:hover .${zt.notchedOutline}`]: {
        borderColor: e.vars ? `rgba(${e.vars.palette.common.onBackgroundChannel} / 0.23)` : t
      }
    },
    [`&.${zt.focused} .${zt.notchedOutline}`]: {
      borderStyle: "solid",
      borderWidth: 2
    },
    [`&.${zt.disabled}`]: {
      [`& .${zt.notchedOutline}`]: {
        borderColor: (e.vars || e).palette.action.disabled
      },
      "*": {
        color: (e.vars || e).palette.action.disabled
      }
    },
    [`&.${zt.error} .${zt.notchedOutline}`]: {
      borderColor: (e.vars || e).palette.error.main
    },
    variants: Object.keys((e.vars ?? e).palette).filter((n) => (e.vars ?? e).palette[n]?.main ?? !1).map((n) => ({
      props: {
        inputColor: n
      },
      style: {
        [`&.${zt.focused}:not(.${zt.error}) .${zt.notchedOutline}`]: {
          // @ts-ignore
          borderColor: (e.vars || e).palette[n].main
        }
      }
    }))
  };
}), NO = Q(Gl, {
  name: "MuiPickersOutlinedInput",
  slot: "SectionsContainer"
})({
  padding: "16.5px 0",
  variants: [{
    props: {
      inputSize: "small"
    },
    style: {
      padding: "8.5px 0"
    }
  }]
}), AO = (e) => {
  const n = be({
    root: ["root"],
    notchedOutline: ["notchedOutline"],
    input: ["input"]
  }, PO, e);
  return j({}, e, n);
}, Ai = /* @__PURE__ */ x.forwardRef(function(t, n) {
  const r = Ze({
    props: t,
    name: "MuiPickersOutlinedInput"
  }), {
    label: s,
    classes: i,
    notched: a
  } = r, l = Ee(r, MO), c = Sn(), u = AO(i);
  return /* @__PURE__ */ E.jsx(os, j({
    slots: {
      root: IO,
      input: NO
    },
    renderSuffix: (d) => /* @__PURE__ */ E.jsx(DO, {
      shrink: !!(a || d.adornedStart || d.focused || d.filled),
      notched: !!(a || d.adornedStart || d.focused || d.filled),
      className: u.notchedOutline,
      label: s != null && s !== "" && c?.required ? /* @__PURE__ */ E.jsxs(x.Fragment, {
        children: [s, " ", "*"]
      }) : s
    })
  }, l, {
    label: s,
    classes: u,
    ref: n
  }));
});
process.env.NODE_ENV !== "production" && (Ai.displayName = "PickersOutlinedInput");
process.env.NODE_ENV !== "production" && (Ai.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Is `true` if the current values equals the empty value.
   * For a single item value, it means that `value === null`
   * For a range value, it means that `value === [null, null]`
   */
  areAllSectionsEmpty: o.bool.isRequired,
  className: o.string,
  component: o.elementType,
  /**
   * If true, the whole element is editable.
   * Useful when all the sections are selected.
   */
  contentEditable: o.bool.isRequired,
  "data-multi-input": o.string,
  /**
   * The elements to render.
   * Each element contains the prop to edit a section of the value.
   */
  elements: o.arrayOf(o.shape({
    after: o.object.isRequired,
    before: o.object.isRequired,
    container: o.object.isRequired,
    content: o.object.isRequired
  })).isRequired,
  endAdornment: o.node,
  fullWidth: o.bool,
  id: o.string,
  inputProps: o.object,
  inputRef: lt,
  label: o.node,
  margin: o.oneOf(["dense", "none", "normal"]),
  name: o.string,
  notched: o.bool,
  onChange: o.func.isRequired,
  onClick: o.func.isRequired,
  onInput: o.func.isRequired,
  onKeyDown: o.func.isRequired,
  onPaste: o.func.isRequired,
  ownerState: o.any,
  readOnly: o.bool,
  renderSuffix: o.func,
  sectionListRef: o.oneOfType([o.func, o.shape({
    current: o.shape({
      getRoot: o.func.isRequired,
      getSectionContainer: o.func.isRequired,
      getSectionContent: o.func.isRequired,
      getSectionIndexFromDOMElement: o.func.isRequired
    })
  })]),
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: o.object,
  /**
   * The components used for each slot inside.
   *
   * @default {}
   */
  slots: o.object,
  startAdornment: o.node,
  style: o.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: o.oneOfType([o.arrayOf(o.oneOfType([o.func, o.object, o.bool])), o.func, o.object]),
  value: o.string.isRequired
});
Ai.muiName = "Input";
function FO(e) {
  return we("MuiPickersFilledInput", e);
}
const Yn = j({}, Mr, xe("MuiPickersFilledInput", ["root", "underline", "input"])), $O = ["label", "autoFocus", "disableUnderline", "hiddenLabel", "classes"], jO = Q(Ni, {
  name: "MuiPickersFilledInput",
  slot: "Root",
  shouldForwardProp: (e) => rn(e) && e !== "disableUnderline"
})(({
  theme: e
}) => {
  const t = e.palette.mode === "light", n = t ? "rgba(0, 0, 0, 0.42)" : "rgba(255, 255, 255, 0.7)", r = t ? "rgba(0, 0, 0, 0.06)" : "rgba(255, 255, 255, 0.09)", s = t ? "rgba(0, 0, 0, 0.09)" : "rgba(255, 255, 255, 0.13)", i = t ? "rgba(0, 0, 0, 0.12)" : "rgba(255, 255, 255, 0.12)";
  return {
    backgroundColor: e.vars ? e.vars.palette.FilledInput.bg : r,
    borderTopLeftRadius: (e.vars || e).shape.borderRadius,
    borderTopRightRadius: (e.vars || e).shape.borderRadius,
    transition: e.transitions.create("background-color", {
      duration: e.transitions.duration.shorter,
      easing: e.transitions.easing.easeOut
    }),
    "&:hover": {
      backgroundColor: e.vars ? e.vars.palette.FilledInput.hoverBg : s,
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        backgroundColor: e.vars ? e.vars.palette.FilledInput.bg : r
      }
    },
    [`&.${Yn.focused}`]: {
      backgroundColor: e.vars ? e.vars.palette.FilledInput.bg : r
    },
    [`&.${Yn.disabled}`]: {
      backgroundColor: e.vars ? e.vars.palette.FilledInput.disabledBg : i
    },
    variants: [...Object.keys((e.vars ?? e).palette).filter((a) => (e.vars ?? e).palette[a].main).map((a) => ({
      props: {
        inputColor: a,
        disableUnderline: !1
      },
      style: {
        "&::after": {
          // @ts-ignore
          borderBottom: `2px solid ${(e.vars || e).palette[a]?.main}`
        }
      }
    })), {
      props: {
        disableUnderline: !1
      },
      style: {
        "&::after": {
          left: 0,
          bottom: 0,
          // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
          content: '""',
          position: "absolute",
          right: 0,
          transform: "scaleX(0)",
          transition: e.transitions.create("transform", {
            duration: e.transitions.duration.shorter,
            easing: e.transitions.easing.easeOut
          }),
          pointerEvents: "none"
          // Transparent to the hover style.
        },
        [`&.${Yn.focused}:after`]: {
          // translateX(0) is a workaround for Safari transform scale bug
          // See https://github.com/mui/material-ui/issues/31766
          transform: "scaleX(1) translateX(0)"
        },
        [`&.${Yn.error}`]: {
          "&:before, &:after": {
            borderBottomColor: (e.vars || e).palette.error.main
          }
        },
        "&::before": {
          borderBottom: `1px solid ${e.vars ? `rgba(${e.vars.palette.common.onBackgroundChannel} / ${e.vars.opacity.inputUnderline})` : n}`,
          left: 0,
          bottom: 0,
          // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
          content: '"\\00a0"',
          position: "absolute",
          right: 0,
          transition: e.transitions.create("border-bottom-color", {
            duration: e.transitions.duration.shorter
          }),
          pointerEvents: "none"
          // Transparent to the hover style.
        },
        [`&:hover:not(.${Yn.disabled}, .${Yn.error}):before`]: {
          borderBottom: `1px solid ${(e.vars || e).palette.text.primary}`
        },
        [`&.${Yn.disabled}:before`]: {
          borderBottomStyle: "dotted"
        }
      }
    }, {
      props: {
        hasStartAdornment: !0
      },
      style: {
        paddingLeft: 12
      }
    }, {
      props: {
        hasEndAdornment: !0
      },
      style: {
        paddingRight: 12
      }
    }]
  };
}), _O = Q(Gl, {
  name: "MuiPickersFilledInput",
  slot: "sectionsContainer",
  shouldForwardProp: (e) => rn(e) && e !== "hiddenLabel"
})({
  paddingTop: 25,
  paddingRight: 12,
  paddingBottom: 8,
  paddingLeft: 12,
  variants: [{
    props: {
      inputSize: "small"
    },
    style: {
      paddingTop: 21,
      paddingBottom: 4
    }
  }, {
    props: {
      hasStartAdornment: !0
    },
    style: {
      paddingLeft: 0
    }
  }, {
    props: {
      hasEndAdornment: !0
    },
    style: {
      paddingRight: 0
    }
  }, {
    props: {
      hiddenLabel: !0
    },
    style: {
      paddingTop: 16,
      paddingBottom: 17
    }
  }, {
    props: {
      hiddenLabel: !0,
      inputSize: "small"
    },
    style: {
      paddingTop: 8,
      paddingBottom: 9
    }
  }]
}), VO = (e, t) => {
  const {
    inputHasUnderline: n
  } = t, s = be({
    root: ["root", n && "underline"],
    input: ["input"]
  }, FO, e);
  return j({}, e, s);
}, Fi = /* @__PURE__ */ x.forwardRef(function(t, n) {
  const r = Ze({
    props: t,
    name: "MuiPickersFilledInput"
  }), {
    label: s,
    disableUnderline: i = !1,
    hiddenLabel: a = !1,
    classes: l
  } = r, c = Ee(r, $O), u = Ii(), d = j({}, u, {
    inputHasUnderline: !i
  }), f = VO(l, d);
  return /* @__PURE__ */ E.jsx(os, j({
    slots: {
      root: jO,
      input: _O
    },
    slotProps: {
      root: {
        disableUnderline: i
      },
      input: {
        hiddenLabel: a
      }
    }
  }, c, {
    label: s,
    classes: f,
    ref: n,
    ownerState: d
  }));
});
process.env.NODE_ENV !== "production" && (Fi.displayName = "PickersFilledInput");
process.env.NODE_ENV !== "production" && (Fi.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Is `true` if the current values equals the empty value.
   * For a single item value, it means that `value === null`
   * For a range value, it means that `value === [null, null]`
   */
  areAllSectionsEmpty: o.bool.isRequired,
  className: o.string,
  component: o.elementType,
  /**
   * If true, the whole element is editable.
   * Useful when all the sections are selected.
   */
  contentEditable: o.bool.isRequired,
  "data-multi-input": o.string,
  disableUnderline: o.bool,
  /**
   * The elements to render.
   * Each element contains the prop to edit a section of the value.
   */
  elements: o.arrayOf(o.shape({
    after: o.object.isRequired,
    before: o.object.isRequired,
    container: o.object.isRequired,
    content: o.object.isRequired
  })).isRequired,
  endAdornment: o.node,
  fullWidth: o.bool,
  hiddenLabel: o.bool,
  id: o.string,
  inputProps: o.object,
  inputRef: lt,
  label: o.node,
  margin: o.oneOf(["dense", "none", "normal"]),
  name: o.string,
  onChange: o.func.isRequired,
  onClick: o.func.isRequired,
  onInput: o.func.isRequired,
  onKeyDown: o.func.isRequired,
  onPaste: o.func.isRequired,
  ownerState: o.any,
  readOnly: o.bool,
  renderSuffix: o.func,
  sectionListRef: o.oneOfType([o.func, o.shape({
    current: o.shape({
      getRoot: o.func.isRequired,
      getSectionContainer: o.func.isRequired,
      getSectionContent: o.func.isRequired,
      getSectionIndexFromDOMElement: o.func.isRequired
    })
  })]),
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: o.object,
  /**
   * The components used for each slot inside.
   *
   * @default {}
   */
  slots: o.object,
  startAdornment: o.node,
  style: o.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: o.oneOfType([o.arrayOf(o.oneOfType([o.func, o.object, o.bool])), o.func, o.object]),
  value: o.string.isRequired
});
Fi.muiName = "Input";
function LO(e) {
  return we("MuiPickersFilledInput", e);
}
const ao = j({}, Mr, xe("MuiPickersInput", ["root", "underline", "input"])), BO = ["label", "autoFocus", "disableUnderline", "ownerState", "classes"], WO = Q(Ni, {
  name: "MuiPickersInput",
  slot: "Root",
  shouldForwardProp: (e) => rn(e) && e !== "disableUnderline"
})(({
  theme: e
}) => {
  let n = e.palette.mode === "light" ? "rgba(0, 0, 0, 0.42)" : "rgba(255, 255, 255, 0.7)";
  return e.vars && (n = `rgba(${e.vars.palette.common.onBackgroundChannel} / ${e.vars.opacity.inputUnderline})`), {
    "label + &": {
      marginTop: 16
    },
    variants: [...Object.keys((e.vars ?? e).palette).filter((r) => (e.vars ?? e).palette[r].main).map((r) => ({
      props: {
        inputColor: r,
        inputHasUnderline: !0
      },
      style: {
        "&::after": {
          // @ts-ignore
          borderBottom: `2px solid ${(e.vars || e).palette[r].main}`
        }
      }
    })), {
      props: {
        inputHasUnderline: !0
      },
      style: {
        "&::after": {
          background: "red",
          left: 0,
          bottom: 0,
          // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
          content: '""',
          position: "absolute",
          right: 0,
          transform: "scaleX(0)",
          transition: e.transitions.create("transform", {
            duration: e.transitions.duration.shorter,
            easing: e.transitions.easing.easeOut
          }),
          pointerEvents: "none"
          // Transparent to the hover style.
        },
        [`&.${ao.focused}:after`]: {
          // translateX(0) is a workaround for Safari transform scale bug
          // See https://github.com/mui/material-ui/issues/31766
          transform: "scaleX(1) translateX(0)"
        },
        [`&.${ao.error}`]: {
          "&:before, &:after": {
            borderBottomColor: (e.vars || e).palette.error.main
          }
        },
        "&::before": {
          borderBottom: `1px solid ${n}`,
          left: 0,
          bottom: 0,
          // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
          content: '"\\00a0"',
          position: "absolute",
          right: 0,
          transition: e.transitions.create("border-bottom-color", {
            duration: e.transitions.duration.shorter
          }),
          pointerEvents: "none"
          // Transparent to the hover style.
        },
        [`&:hover:not(.${ao.disabled}, .${ao.error}):before`]: {
          borderBottom: `2px solid ${(e.vars || e).palette.text.primary}`,
          // Reset on touch devices, it doesn't add specificity
          "@media (hover: none)": {
            borderBottom: `1px solid ${n}`
          }
        },
        [`&.${ao.disabled}:before`]: {
          borderBottomStyle: "dotted"
        }
      }
    }]
  };
}), zO = (e, t) => {
  const {
    inputHasUnderline: n
  } = t, s = be({
    root: ["root", !n && "underline"],
    input: ["input"]
  }, LO, e);
  return j({}, e, s);
}, $i = /* @__PURE__ */ x.forwardRef(function(t, n) {
  const r = Ze({
    props: t,
    name: "MuiPickersInput"
  }), {
    label: s,
    disableUnderline: i = !1,
    classes: a
  } = r, l = Ee(r, BO), c = Ii(), u = j({}, c, {
    inputHasUnderline: !i
  }), d = zO(a, u);
  return /* @__PURE__ */ E.jsx(os, j({
    slots: {
      root: WO
    },
    slotProps: {
      root: {
        disableUnderline: i
      }
    }
  }, l, {
    ownerState: u,
    label: s,
    classes: d,
    ref: n
  }));
});
process.env.NODE_ENV !== "production" && ($i.displayName = "PickersInput");
process.env.NODE_ENV !== "production" && ($i.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Is `true` if the current values equals the empty value.
   * For a single item value, it means that `value === null`
   * For a range value, it means that `value === [null, null]`
   */
  areAllSectionsEmpty: o.bool.isRequired,
  className: o.string,
  component: o.elementType,
  /**
   * If true, the whole element is editable.
   * Useful when all the sections are selected.
   */
  contentEditable: o.bool.isRequired,
  "data-multi-input": o.string,
  disableUnderline: o.bool,
  /**
   * The elements to render.
   * Each element contains the prop to edit a section of the value.
   */
  elements: o.arrayOf(o.shape({
    after: o.object.isRequired,
    before: o.object.isRequired,
    container: o.object.isRequired,
    content: o.object.isRequired
  })).isRequired,
  endAdornment: o.node,
  fullWidth: o.bool,
  id: o.string,
  inputProps: o.object,
  inputRef: lt,
  label: o.node,
  margin: o.oneOf(["dense", "none", "normal"]),
  name: o.string,
  onChange: o.func.isRequired,
  onClick: o.func.isRequired,
  onInput: o.func.isRequired,
  onKeyDown: o.func.isRequired,
  onPaste: o.func.isRequired,
  ownerState: o.any,
  readOnly: o.bool,
  renderSuffix: o.func,
  sectionListRef: o.oneOfType([o.func, o.shape({
    current: o.shape({
      getRoot: o.func.isRequired,
      getSectionContainer: o.func.isRequired,
      getSectionContent: o.func.isRequired,
      getSectionIndexFromDOMElement: o.func.isRequired
    })
  })]),
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: o.object,
  /**
   * The components used for each slot inside.
   *
   * @default {}
   */
  slots: o.object,
  startAdornment: o.node,
  style: o.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: o.oneOfType([o.arrayOf(o.oneOfType([o.func, o.object, o.bool])), o.func, o.object]),
  value: o.string.isRequired
});
$i.muiName = "Input";
const UO = ["onFocus", "onBlur", "className", "classes", "color", "disabled", "error", "variant", "required", "hiddenLabel", "InputProps", "inputProps", "inputRef", "sectionListRef", "elements", "areAllSectionsEmpty", "onClick", "onKeyDown", "onKeyUp", "onPaste", "onInput", "endAdornment", "startAdornment", "tabIndex", "contentEditable", "focused", "value", "onChange", "fullWidth", "id", "name", "helperText", "FormHelperTextProps", "label", "InputLabelProps", "data-active-range-position"], qO = {
  standard: $i,
  filled: Fi,
  outlined: Ai
}, HO = Q(Vl, {
  name: "MuiPickersTextField",
  slot: "Root"
})({
  maxWidth: "100%"
}), YO = (e, t) => {
  const {
    isFieldFocused: n,
    isFieldDisabled: r,
    isFieldRequired: s
  } = t;
  return be({
    root: ["root", n && !r && "focused", r && "disabled", s && "required"]
  }, dO, e);
}, ji = /* @__PURE__ */ x.forwardRef(function(t, n) {
  const r = Ze({
    props: t,
    name: "MuiPickersTextField"
  }), {
    // Props used by FormControl
    onFocus: s,
    onBlur: i,
    className: a,
    classes: l,
    color: c = "primary",
    disabled: u = !1,
    error: d = !1,
    variant: f = "outlined",
    required: y = !1,
    hiddenLabel: g = !1,
    // Props used by PickersInput
    InputProps: h,
    inputProps: p,
    inputRef: m,
    sectionListRef: b,
    elements: C,
    areAllSectionsEmpty: O,
    onClick: w,
    onKeyDown: S,
    onKeyUp: P,
    onPaste: M,
    onInput: F,
    endAdornment: A,
    startAdornment: $,
    tabIndex: k,
    contentEditable: v,
    focused: D,
    value: T,
    onChange: I,
    fullWidth: N,
    id: _,
    name: G,
    // Props used by FormHelperText
    helperText: L,
    FormHelperTextProps: V,
    // Props used by InputLabel
    label: R,
    InputLabelProps: B,
    // @ts-ignore
    "data-active-range-position": H
  } = r, K = Ee(r, UO), te = x.useRef(null), ee = Ne(n, te), J = _n(_), ie = L && J ? `${J}-helper-text` : void 0, re = R && J ? `${J}-label` : void 0, q = Hl({
    disabled: r.disabled,
    required: r.required,
    readOnly: h?.readOnly
  }), X = x.useMemo(() => j({}, q, {
    isFieldValueEmpty: O,
    isFieldFocused: D ?? !1,
    hasFieldError: d ?? !1,
    inputSize: r.size ?? "medium",
    inputColor: c ?? "primary",
    isInputInFullWidth: N ?? !1,
    hasStartAdornment: !!($ ?? h?.startAdornment),
    hasEndAdornment: !!(A ?? h?.endAdornment),
    inputHasLabel: !!R,
    isLabelShrunk: !!B?.shrink
  }), [q, O, D, d, r.size, c, N, $, A, h?.startAdornment, h?.endAdornment, R, B?.shrink]), z = YO(l, X), ne = qO[f], Y = {};
  return f === "outlined" ? (B && typeof B.shrink < "u" && (Y.notched = B.shrink), Y.label = R) : f === "filled" && (Y.hiddenLabel = g), /* @__PURE__ */ E.jsx(Kl.Provider, {
    value: X,
    children: /* @__PURE__ */ E.jsxs(HO, j({
      className: pe(z.root, a),
      ref: ee,
      focused: D,
      disabled: u,
      variant: f,
      error: d,
      color: c,
      fullWidth: N,
      required: y,
      ownerState: X
    }, K, {
      children: [R != null && R !== "" && /* @__PURE__ */ E.jsx(_l, j({
        htmlFor: J,
        id: re
      }, B, {
        children: R
      })), /* @__PURE__ */ E.jsx(ne, j({
        elements: C,
        areAllSectionsEmpty: O,
        onClick: w,
        onKeyDown: S,
        onKeyUp: P,
        onInput: F,
        onPaste: M,
        onFocus: s,
        onBlur: i,
        endAdornment: A,
        startAdornment: $,
        tabIndex: k,
        contentEditable: v,
        value: T,
        onChange: I,
        id: J,
        fullWidth: N,
        inputProps: p,
        inputRef: m,
        sectionListRef: b,
        label: R,
        name: G,
        role: "group",
        "aria-labelledby": re,
        "aria-describedby": ie,
        "aria-live": ie ? "polite" : void 0,
        "data-active-range-position": H
      }, Y, h)), L && /* @__PURE__ */ E.jsx(Ll, j({
        id: ie
      }, V, {
        children: L
      }))]
    }))
  });
});
process.env.NODE_ENV !== "production" && (ji.displayName = "PickersTextField");
process.env.NODE_ENV !== "production" && (ji.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Is `true` if the current values equals the empty value.
   * For a single item value, it means that `value === null`
   * For a range value, it means that `value === [null, null]`
   */
  areAllSectionsEmpty: o.bool.isRequired,
  className: o.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * @default 'primary'
   */
  color: o.oneOf(["error", "info", "primary", "secondary", "success", "warning"]),
  component: o.elementType,
  /**
   * If true, the whole element is editable.
   * Useful when all the sections are selected.
   */
  contentEditable: o.bool.isRequired,
  disabled: o.bool.isRequired,
  /**
   * The elements to render.
   * Each element contains the prop to edit a section of the value.
   */
  elements: o.arrayOf(o.shape({
    after: o.object.isRequired,
    before: o.object.isRequired,
    container: o.object.isRequired,
    content: o.object.isRequired
  })).isRequired,
  endAdornment: o.node,
  error: o.bool.isRequired,
  /**
   * If `true`, the component is displayed in focused state.
   */
  focused: o.bool,
  FormHelperTextProps: o.object,
  fullWidth: o.bool,
  /**
   * The helper text content.
   */
  helperText: o.node,
  /**
   * If `true`, the label is hidden.
   * This is used to increase density for a `FilledInput`.
   * Be sure to add `aria-label` to the `input` element.
   * @default false
   */
  hiddenLabel: o.bool,
  id: o.string,
  InputLabelProps: o.object,
  inputProps: o.object,
  /**
   * Props applied to the Input element.
   * It will be a [`FilledInput`](/material-ui/api/filled-input/),
   * [`OutlinedInput`](/material-ui/api/outlined-input/) or [`Input`](/material-ui/api/input/)
   * component depending on the `variant` prop value.
   */
  InputProps: o.object,
  inputRef: lt,
  label: o.node,
  /**
   * If `dense` or `normal`, will adjust vertical spacing of this and contained components.
   * @default 'none'
   */
  margin: o.oneOf(["dense", "none", "normal"]),
  name: o.string,
  onBlur: o.func.isRequired,
  onChange: o.func.isRequired,
  onClick: o.func.isRequired,
  onFocus: o.func.isRequired,
  onInput: o.func.isRequired,
  onKeyDown: o.func.isRequired,
  onPaste: o.func.isRequired,
  readOnly: o.bool,
  /**
   * If `true`, the label will indicate that the `input` is required.
   * @default false
   */
  required: o.bool,
  sectionListRef: o.oneOfType([o.func, o.shape({
    current: o.shape({
      getRoot: o.func.isRequired,
      getSectionContainer: o.func.isRequired,
      getSectionContent: o.func.isRequired,
      getSectionIndexFromDOMElement: o.func.isRequired
    })
  })]),
  /**
   * The size of the component.
   * @default 'medium'
   */
  size: o.oneOf(["medium", "small"]),
  startAdornment: o.node,
  style: o.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: o.oneOfType([o.arrayOf(o.oneOfType([o.func, o.object, o.bool])), o.func, o.object]),
  value: o.string.isRequired,
  /**
   * The variant to use.
   * @default 'outlined'
   */
  variant: o.oneOf(["filled", "outlined", "standard"])
});
const KO = ["enableAccessibleFieldDOMStructure"], GO = ["InputProps", "readOnly", "onClear", "clearable", "clearButtonPosition", "openPickerButtonPosition", "openPickerAriaLabel"], XO = ["onPaste", "onKeyDown", "inputMode", "readOnly", "InputProps", "inputProps", "inputRef", "onClear", "clearable", "clearButtonPosition", "openPickerButtonPosition", "openPickerAriaLabel"], QO = ["ownerState"], ZO = ["ownerState"], JO = ["ownerState"], eC = ["ownerState"], tC = ["InputProps", "inputProps"], ia = () => {
}, nC = (e) => {
  let {
    enableAccessibleFieldDOMStructure: t
  } = e, n = Ee(e, KO);
  if (t) {
    const {
      InputProps: C,
      readOnly: O,
      onClear: w,
      clearable: S,
      clearButtonPosition: P,
      openPickerButtonPosition: M,
      openPickerAriaLabel: F
    } = n, A = Ee(n, GO), $ = Pn >= 6 && A?.slotProps?.input ? Oo(A?.slotProps?.input, C) : ia;
    return {
      clearable: S,
      onClear: w,
      clearButtonPosition: P,
      openPickerButtonPosition: M,
      openPickerAriaLabel: F,
      textFieldProps: j({}, A, Pn >= 6 && A?.slotProps?.input ? {
        slotProps: j({}, A?.slotProps, {
          input: (k) => j({}, $t($, k), {
            readOnly: O
          })
        })
      } : {
        InputProps: j({}, C ?? {}, {
          readOnly: O
        })
      })
    };
  }
  const {
    onPaste: r,
    onKeyDown: s,
    inputMode: i,
    readOnly: a,
    InputProps: l,
    inputProps: c,
    inputRef: u,
    onClear: d,
    clearable: f,
    clearButtonPosition: y,
    openPickerButtonPosition: g,
    openPickerAriaLabel: h
  } = n, p = Ee(n, XO), m = Pn >= 6 && p?.slotProps?.input ? Oo(p?.slotProps?.input, l) : ia, b = Pn >= 6 && p?.slotProps?.htmlInput ? Oo(p?.slotProps?.htmlInput, c) : ia;
  return {
    clearable: f,
    onClear: d,
    clearButtonPosition: y,
    openPickerButtonPosition: g,
    openPickerAriaLabel: h,
    textFieldProps: j({}, p, Pn >= 6 && (p?.slotProps?.input || p?.slotProps?.htmlInput) ? {
      slotProps: j({}, p?.slotProps, {
        input: (C) => j({}, $t(m, C), {
          readOnly: a
        }),
        htmlInput: (C) => j({}, $t(b, C), {
          inputMode: i,
          onPaste: r,
          onKeyDown: s,
          ref: u
        })
      })
    } : {
      InputProps: j({}, l ?? {}, {
        readOnly: a
      }),
      inputProps: j({}, c ?? {}, {
        inputMode: i,
        onPaste: r,
        onKeyDown: s,
        ref: u
      })
    })
  };
}, _i = /* @__PURE__ */ x.createContext({
  slots: {},
  slotProps: {},
  inputRef: void 0
});
process.env.NODE_ENV !== "production" && (_i.displayName = "PickerFieldUIContext");
function rC(e) {
  const {
    fieldResponse: t,
    defaultOpenPickerIcon: n
  } = e, r = Ln(), s = xl(), i = x.useContext(_i), {
    textFieldProps: a,
    onClear: l,
    clearable: c,
    openPickerAriaLabel: u,
    clearButtonPosition: d = "end",
    openPickerButtonPosition: f = "end"
  } = nC(t), y = Hl(a), g = de((V) => {
    V.preventDefault(), s?.setOpen((R) => !R);
  }), h = s ? s.triggerStatus : "hidden", p = c ? d : null, m = h !== "hidden" ? f : null, b = i.slots.textField ?? (t.enableAccessibleFieldDOMStructure === !1 ? eh : ji), C = i.slots.inputAdornment ?? th, O = Ie({
    elementType: C,
    externalSlotProps: i.slotProps.inputAdornment,
    additionalProps: {
      position: "start"
    },
    ownerState: j({}, y, {
      position: "start"
    })
  }), w = Ee(O, QO), S = Ie({
    elementType: C,
    externalSlotProps: i.slotProps.inputAdornment,
    additionalProps: {
      position: "end"
    },
    ownerState: j({}, y, {
      position: "end"
    })
  }), P = Ee(S, ZO), M = i.slots.openPickerButton ?? Fo, F = Ie({
    elementType: M,
    externalSlotProps: i.slotProps.openPickerButton,
    additionalProps: {
      disabled: h === "disabled",
      onClick: g,
      "aria-label": u,
      edge: (
        // open button is always rendered at the edge
        a.variant !== "standard" ? m : !1
      )
    },
    ownerState: y
  }), A = Ee(F, JO), $ = i.slots.openPickerIcon ?? n, k = Ie({
    elementType: $,
    externalSlotProps: i.slotProps.openPickerIcon,
    ownerState: y
  }), v = i.slots.clearButton ?? Fo, D = Ie({
    elementType: v,
    externalSlotProps: i.slotProps.clearButton,
    className: "clearButton",
    additionalProps: {
      title: r.fieldClearLabel,
      tabIndex: -1,
      onClick: l,
      disabled: t.disabled || t.readOnly,
      edge: (
        // clear button can only be at the edge if it's position differs from the open button
        a.variant !== "standard" && p !== m ? p : !1
      )
    },
    ownerState: y
  }), T = Ee(D, eC), I = i.slots.clearIcon ?? uO, N = Ie({
    elementType: I,
    externalSlotProps: i.slotProps.clearIcon,
    additionalProps: {
      fontSize: "small"
    },
    ownerState: y
  });
  a.ref = Ne(a.ref, s?.rootRef);
  const _ = {}, G = $t((Pn >= 6 && a?.slotProps?.input) ?? a.InputProps, y);
  s && (_.ref = s.triggerRef), !G?.startAdornment && (p === "start" || m === "start") && (_.startAdornment = /* @__PURE__ */ E.jsxs(C, j({}, w, {
    children: [m === "start" && /* @__PURE__ */ E.jsx(M, j({}, A, {
      children: /* @__PURE__ */ E.jsx($, j({}, k))
    })), p === "start" && /* @__PURE__ */ E.jsx(v, j({}, T, {
      children: /* @__PURE__ */ E.jsx(I, j({}, N))
    }))]
  }))), !G?.endAdornment && (p === "end" || m === "end") && (_.endAdornment = /* @__PURE__ */ E.jsxs(C, j({}, P, {
    children: [p === "end" && /* @__PURE__ */ E.jsx(v, j({}, T, {
      children: /* @__PURE__ */ E.jsx(I, j({}, N))
    })), m === "end" && /* @__PURE__ */ E.jsx(M, j({}, A, {
      children: /* @__PURE__ */ E.jsx($, j({}, k))
    }))]
  }))), !_?.endAdornment && !_?.startAdornment && i.slots.inputAdornment && (_.endAdornment = /* @__PURE__ */ E.jsx(C, j({}, P))), p != null && (a.sx = [{
    "& .clearButton": {
      opacity: 1
    },
    "@media (pointer: fine)": {
      "& .clearButton": {
        opacity: 0
      },
      "&:hover, &:focus-within": {
        ".clearButton": {
          opacity: 1
        }
      }
    }
  }, ...Array.isArray(a.sx) ? a.sx : [a.sx]]);
  const L = Pn >= 6 && a?.slotProps?.input ? $t(Oo(G, _), y) : j({}, G, _);
  return a.inputProps = Pn >= 6 && a?.slotProps?.htmlInput ? $t(a.slotProps.htmlInput, y) : a.inputProps, delete a?.slotProps?.input, t.enableAccessibleFieldDOMStructure && delete a?.slotProps, /* @__PURE__ */ E.jsx(b, j({}, a, {
    InputProps: L
  }));
}
function Oo(e, t) {
  return e ? t ? (n) => j({}, $t(t, n), $t(e, n)) : e : t;
}
function oC(e) {
  const {
    ref: t,
    externalForwardedProps: n,
    slotProps: r
  } = e, s = x.useContext(_i), i = xl(), a = Hl(n), {
    InputProps: l,
    inputProps: c
  } = n, u = Ee(n, tC), d = Ie({
    elementType: ji,
    externalSlotProps: Oo(s.slotProps.textField, r?.textField),
    externalForwardedProps: u,
    additionalProps: {
      ref: t,
      sx: i?.rootSx,
      label: i?.label,
      name: i?.name,
      className: i?.rootClassName,
      inputRef: s.inputRef
    },
    ownerState: a
  });
  return d.inputProps = j({}, c, d.inputProps), d.InputProps = j({}, l, d.InputProps), d;
}
function sC(e) {
  const {
    slots: t = {},
    slotProps: n = {},
    inputRef: r,
    children: s
  } = e, i = x.useMemo(() => ({
    inputRef: r,
    slots: {
      openPickerButton: t.openPickerButton,
      openPickerIcon: t.openPickerIcon,
      textField: t.textField,
      inputAdornment: t.inputAdornment,
      clearIcon: t.clearIcon,
      clearButton: t.clearButton
    },
    slotProps: {
      openPickerButton: n.openPickerButton,
      openPickerIcon: n.openPickerIcon,
      textField: n.textField,
      inputAdornment: n.inputAdornment,
      clearIcon: n.clearIcon,
      clearButton: n.clearButton
    }
  }), [r, t.openPickerButton, t.openPickerIcon, t.textField, t.inputAdornment, t.clearIcon, t.clearButton, n.openPickerButton, n.openPickerIcon, n.textField, n.inputAdornment, n.clearIcon, n.clearButton]);
  return /* @__PURE__ */ E.jsx(_i.Provider, {
    value: i,
    children: s
  });
}
const iC = ["slots", "slotProps"], Vi = /* @__PURE__ */ x.forwardRef(function(t, n) {
  const r = Ze({
    props: t,
    name: "MuiDateField"
  }), {
    slots: s,
    slotProps: i
  } = r, a = Ee(r, iC), l = oC({
    slotProps: i,
    ref: n,
    externalForwardedProps: a
  }), c = kS(l);
  return /* @__PURE__ */ E.jsx(sC, {
    slots: s,
    slotProps: i,
    inputRef: a.inputRef,
    children: /* @__PURE__ */ E.jsx(rC, {
      fieldResponse: c,
      defaultOpenPickerIcon: cO
    })
  });
});
process.env.NODE_ENV !== "production" && (Vi.displayName = "DateField");
process.env.NODE_ENV !== "production" && (Vi.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * If `true`, the `input` element is focused during the first mount.
   * @default false
   */
  autoFocus: o.bool,
  className: o.string,
  /**
   * If `true`, a clear button will be shown in the field allowing value clearing.
   * @default false
   */
  clearable: o.bool,
  /**
   * The position at which the clear button is placed.
   * If the field is not clearable, the button is not rendered.
   * @default 'end'
   */
  clearButtonPosition: o.oneOf(["end", "start"]),
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * @default 'primary'
   */
  color: o.oneOf(["error", "info", "primary", "secondary", "success", "warning"]),
  component: o.elementType,
  /**
   * The default value. Use when the component is not controlled.
   */
  defaultValue: o.object,
  /**
   * If `true`, the component is disabled.
   * When disabled, the value cannot be changed and no interaction is possible.
   * @default false
   */
  disabled: o.bool,
  /**
   * If `true`, disable values after the current date for date components, time for time components and both for date time components.
   * @default false
   */
  disableFuture: o.bool,
  /**
   * If `true`, disable values before the current date for date components, time for time components and both for date time components.
   * @default false
   */
  disablePast: o.bool,
  /**
   * @default true
   */
  enableAccessibleFieldDOMStructure: o.bool,
  /**
   * If `true`, the component is displayed in focused state.
   */
  focused: o.bool,
  /**
   * Format of the date when rendered in the input(s).
   */
  format: o.string,
  /**
   * Density of the format when rendered in the input.
   * Setting `formatDensity` to `"spacious"` will add a space before and after each `/`, `-` and `.` character.
   * @default "dense"
   */
  formatDensity: o.oneOf(["dense", "spacious"]),
  /**
   * Props applied to the [`FormHelperText`](https://mui.com/material-ui/api/form-helper-text/) element.
   * @deprecated Use `slotProps.formHelperText` instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  FormHelperTextProps: o.object,
  /**
   * If `true`, the input will take up the full width of its container.
   * @default false
   */
  fullWidth: o.bool,
  /**
   * The helper text content.
   */
  helperText: o.node,
  /**
   * If `true`, the label is hidden.
   * This is used to increase density for a `FilledInput`.
   * Be sure to add `aria-label` to the `input` element.
   * @default false
   */
  hiddenLabel: o.bool,
  /**
   * The id of the `input` element.
   * Use this prop to make `label` and `helperText` accessible for screen readers.
   */
  id: o.string,
  /**
   * Props applied to the [`InputLabel`](https://mui.com/material-ui/api/input-label/) element.
   * Pointer events like `onClick` are enabled if and only if `shrink` is `true`.
   * @deprecated Use `slotProps.inputLabel` instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  InputLabelProps: o.object,
  /**
   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/input#attributes) applied to the `input` element.
   * @deprecated Use `slotProps.htmlInput` instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  inputProps: o.object,
  /**
   * Props applied to the Input element.
   * It will be a [`FilledInput`](https://mui.com/material-ui/api/filled-input/),
   * [`OutlinedInput`](https://mui.com/material-ui/api/outlined-input/) or [`Input`](https://mui.com/material-ui/api/input/)
   * component depending on the `variant` prop value.
   * @deprecated Use `slotProps.input` instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  InputProps: o.object,
  /**
   * Pass a ref to the `input` element.
   */
  inputRef: lt,
  /**
   * The label content.
   */
  label: o.node,
  /**
   * If `dense` or `normal`, will adjust vertical spacing of this and contained components.
   * @default 'none'
   */
  margin: o.oneOf(["dense", "none", "normal"]),
  /**
   * Maximal selectable date.
   * @default 2099-12-31
   */
  maxDate: o.object,
  /**
   * Minimal selectable date.
   * @default 1900-01-01
   */
  minDate: o.object,
  /**
   * Name attribute of the `input` element.
   */
  name: o.string,
  onBlur: o.func,
  /**
   * Callback fired when the value changes.
   * @template TValue The value type. It will be the same type as `value` or `null`. It can be in `[start, end]` format in case of range value.
   * @template TError The validation error type. It will be either `string` or a `null`. It can be in `[start, end]` format in case of range value.
   * @param {TValue} value The new value.
   * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.
   */
  onChange: o.func,
  /**
   * Callback fired when the clear button is clicked.
   */
  onClear: o.func,
  /**
   * Callback fired when the error associated with the current value changes.
   * When a validation error is detected, the `error` parameter contains a non-null value.
   * This can be used to render an appropriate form error.
   * @template TError The validation error type. It will be either `string` or a `null`. It can be in `[start, end]` format in case of range value.
   * @template TValue The value type. It will be the same type as `value` or `null`. It can be in `[start, end]` format in case of range value.
   * @param {TError} error The reason why the current value is not valid.
   * @param {TValue} value The value associated with the error.
   */
  onError: o.func,
  onFocus: o.func,
  /**
   * Callback fired when the selected sections change.
   * @param {FieldSelectedSections} newValue The new selected sections.
   */
  onSelectedSectionsChange: o.func,
  /**
   * The position at which the opening button is placed.
   * If there is no Picker to open, the button is not rendered
   * @default 'end'
   */
  openPickerButtonPosition: o.oneOf(["end", "start"]),
  /**
   * If `true`, the component is read-only.
   * When read-only, the value cannot be changed but the user can interact with the interface.
   * @default false
   */
  readOnly: o.bool,
  /**
   * The date used to generate a part of the new value that is not present in the format when both `value` and `defaultValue` are empty.
   * For example, on time fields it will be used to determine the date to set.
   * @default The closest valid date using the validation props, except callbacks such as `shouldDisableDate`. Value is rounded to the most granular section used.
   */
  referenceDate: o.object,
  /**
   * If `true`, the label is displayed as required and the `input` element is required.
   * @default false
   */
  required: o.bool,
  /**
   * The currently selected sections.
   * This prop accepts four formats:
   * 1. If a number is provided, the section at this index will be selected.
   * 2. If a string of type `FieldSectionType` is provided, the first section with that name will be selected.
   * 3. If `"all"` is provided, all the sections will be selected.
   * 4. If `null` is provided, no section will be selected.
   * If not provided, the selected sections will be handled internally.
   */
  selectedSections: o.oneOfType([o.oneOf(["all", "day", "empty", "hours", "meridiem", "minutes", "month", "seconds", "weekDay", "year"]), o.number]),
  /**
   * Disable specific date.
   *
   * Warning: This function can be called multiple times (for example when rendering date calendar, checking if focus can be moved to a certain date, etc.). Expensive computations can impact performance.
   *
   * @param {PickerValidDate} day The date to test.
   * @returns {boolean} If `true` the date will be disabled.
   */
  shouldDisableDate: o.func,
  /**
   * Disable specific month.
   * @param {PickerValidDate} month The month to test.
   * @returns {boolean} If `true`, the month will be disabled.
   */
  shouldDisableMonth: o.func,
  /**
   * Disable specific year.
   * @param {PickerValidDate} year The year to test.
   * @returns {boolean} If `true`, the year will be disabled.
   */
  shouldDisableYear: o.func,
  /**
   * If `true`, the format will respect the leading zeroes (for example on dayjs, the format `M/D/YYYY` will render `8/16/2018`)
   * If `false`, the format will always add leading zeroes (for example on dayjs, the format `M/D/YYYY` will render `08/16/2018`)
   *
   * Warning n°1: Luxon is not able to respect the leading zeroes when using macro tokens (for example "DD"), so `shouldRespectLeadingZeros={true}` might lead to inconsistencies when using `AdapterLuxon`.
   *
   * Warning n°2: When `shouldRespectLeadingZeros={true}`, the field will add an invisible character on the sections containing a single digit to make sure `onChange` is fired.
   * If you need to get the clean value from the input, you can remove this character using `input.value.replace(/\u200e/g, '')`.
   *
   * Warning n°3: When used in strict mode, dayjs and moment require to respect the leading zeros.
   * This mean that when using `shouldRespectLeadingZeros={false}`, if you retrieve the value directly from the input (not listening to `onChange`) and your format contains tokens without leading zeros, the value will not be parsed by your library.
   *
   * @default false
   */
  shouldRespectLeadingZeros: o.bool,
  /**
   * The size of the component.
   * @default 'medium'
   */
  size: o.oneOf(["medium", "small"]),
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: o.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: o.object,
  style: o.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: o.oneOfType([o.arrayOf(o.oneOfType([o.func, o.object, o.bool])), o.func, o.object]),
  /**
   * Choose which timezone to use for the value.
   * Example: "default", "system", "UTC", "America/New_York".
   * If you pass values from other timezones to some props, they will be converted to this timezone before being used.
   * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documentation} for more details.
   * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.
   */
  timezone: o.string,
  /**
   * The ref object used to imperatively interact with the field.
   */
  unstableFieldRef: o.oneOfType([o.func, o.object]),
  /**
   * The selected value.
   * Used when the component is controlled.
   */
  value: o.object,
  /**
   * The variant to use.
   * @default 'outlined'
   */
  variant: o.oneOf(["filled", "outlined", "standard"])
});
const ah = ({
  shouldDisableDate: e,
  shouldDisableMonth: t,
  shouldDisableYear: n,
  minDate: r,
  maxDate: s,
  disableFuture: i,
  disablePast: a,
  timezone: l
}) => {
  const c = He();
  return x.useCallback((u) => Ko({
    adapter: c,
    value: u,
    timezone: l,
    props: {
      shouldDisableDate: e,
      shouldDisableMonth: t,
      shouldDisableYear: n,
      minDate: r,
      maxDate: s,
      disableFuture: i,
      disablePast: a
    }
  }) !== null, [c, e, t, n, r, s, i, a, l]);
}, aC = (e, t) => (n, r) => {
  switch (r.type) {
    case "setVisibleDate":
      return j({}, n, {
        slideDirection: r.direction,
        currentMonth: r.month,
        isMonthSwitchingAnimating: !t.isSameMonth(r.month, n.currentMonth) && !e && !r.skipAnimation,
        focusedDay: r.focusedDay
      });
    case "changeMonthTimezone": {
      const s = r.newTimezone;
      if (t.getTimezone(n.currentMonth) === s)
        return n;
      let i = t.setTimezone(n.currentMonth, s);
      return t.getMonth(i) !== t.getMonth(n.currentMonth) && (i = t.setMonth(i, t.getMonth(n.currentMonth))), j({}, n, {
        currentMonth: i
      });
    }
    case "finishMonthSwitchingAnimation":
      return j({}, n, {
        isMonthSwitchingAnimating: !1
      });
    default:
      throw new Error("missing support");
  }
}, lC = (e) => {
  const {
    value: t,
    referenceDate: n,
    disableFuture: r,
    disablePast: s,
    maxDate: i,
    minDate: a,
    onMonthChange: l,
    onYearChange: c,
    reduceAnimations: u,
    shouldDisableDate: d,
    timezone: f,
    getCurrentMonthFromVisibleDate: y
  } = e, g = He(), h = x.useRef(aC(!!u, g)).current, p = x.useMemo(
    () => ln.getInitialReferenceValue({
      value: t,
      adapter: g,
      timezone: f,
      props: e,
      referenceDate: n,
      granularity: Zt.day
    }),
    // We want the `referenceDate` to update on prop and `timezone` change (https://github.com/mui/mui-x/issues/10804)
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [n, f]
  ), [m, b] = x.useReducer(h, {
    isMonthSwitchingAnimating: !1,
    focusedDay: p,
    currentMonth: g.startOfMonth(p),
    slideDirection: "left"
  }), C = ah({
    shouldDisableDate: d,
    minDate: a,
    maxDate: i,
    disableFuture: r,
    disablePast: s,
    timezone: f
  });
  x.useEffect(() => {
    b({
      type: "changeMonthTimezone",
      newTimezone: g.getTimezone(p)
    });
  }, [p, g]);
  const O = de(({
    target: S,
    reason: P
  }) => {
    if (P === "cell-interaction" && m.focusedDay != null && g.isSameDay(S, m.focusedDay))
      return;
    const M = P === "cell-interaction";
    let F, A;
    if (P === "cell-interaction")
      F = y(S, m.currentMonth), A = S;
    else if (F = g.isSameMonth(S, m.currentMonth) ? m.currentMonth : g.startOfMonth(S), A = S, C(A)) {
      const v = g.startOfMonth(S), D = g.endOfMonth(S);
      A = Ro({
        adapter: g,
        date: A,
        minDate: g.isBefore(a, v) ? v : a,
        maxDate: g.isAfter(i, D) ? D : i,
        disablePast: s,
        disableFuture: r,
        isDateDisabled: C,
        timezone: f
      });
    }
    const $ = !g.isSameMonth(m.currentMonth, F), k = !g.isSameYear(m.currentMonth, F);
    $ && l?.(F), k && c?.(g.startOfYear(F)), b({
      type: "setVisibleDate",
      month: F,
      direction: g.isAfterDay(F, m.currentMonth) ? "left" : "right",
      focusedDay: m.focusedDay != null && A != null && g.isSameDay(A, m.focusedDay) ? m.focusedDay : A,
      skipAnimation: M
    });
  }), w = x.useCallback(() => {
    b({
      type: "finishMonthSwitchingAnimation"
    });
  }, []);
  return {
    referenceDate: p,
    calendarState: m,
    setVisibleDate: O,
    isDateDisabled: C,
    onMonthSwitchingAnimationEnd: w
  };
}, cC = (e) => we("MuiPickersFadeTransitionGroup", e);
xe("MuiPickersFadeTransitionGroup", ["root"]);
const uC = ["children"], dC = (e) => be({
  root: ["root"]
}, cC, e), fC = Q(Zo, {
  name: "MuiPickersFadeTransitionGroup",
  slot: "Root"
})({
  display: "block",
  position: "relative"
});
function lh(e) {
  const t = Ze({
    props: e,
    name: "MuiPickersFadeTransitionGroup"
  }), {
    className: n,
    reduceAnimations: r,
    transKey: s,
    classes: i
  } = t, {
    children: a
  } = t, l = Ee(t, uC), c = dC(i), u = zr();
  return r ? a : /* @__PURE__ */ E.jsx(fC, {
    className: pe(c.root, n),
    ownerState: l,
    children: /* @__PURE__ */ E.jsx(An, {
      appear: !1,
      mountOnEnter: !0,
      unmountOnExit: !0,
      timeout: {
        appear: u.transitions.duration.enteringScreen,
        enter: u.transitions.duration.enteringScreen,
        exit: 0
      },
      children: a
    }, s)
  });
}
function pC(e) {
  return we("MuiPickersDay", e);
}
const Kn = xe("MuiPickersDay", ["root", "dayWithMargin", "dayOutsideMonth", "hiddenDaySpacingFiller", "today", "selected", "disabled"]);
function ch(e) {
  const {
    disabled: t,
    selected: n,
    today: r,
    outsideCurrentMonth: s,
    day: i,
    disableMargin: a,
    disableHighlightToday: l,
    showDaysOutsideCurrentMonth: c
  } = e, u = He(), {
    ownerState: d
  } = gt();
  return x.useMemo(() => j({}, d, {
    day: i,
    isDaySelected: n ?? !1,
    isDayDisabled: t ?? !1,
    isDayCurrent: r ?? !1,
    isDayOutsideMonth: s ?? !1,
    isDayStartOfWeek: u.isSameDay(i, u.startOfWeek(i)),
    isDayEndOfWeek: u.isSameDay(i, u.endOfWeek(i)),
    disableMargin: a ?? !1,
    disableHighlightToday: l ?? !1,
    showDaysOutsideCurrentMonth: c ?? !1
  }), [u, d, i, n, t, r, s, a, l, c]);
}
const hC = ["autoFocus", "className", "classes", "hidden", "isAnimating", "onClick", "onDaySelect", "onFocus", "onBlur", "onKeyDown", "onMouseDown", "onMouseEnter", "children", "isFirstVisibleCell", "isLastVisibleCell", "day", "selected", "disabled", "today", "outsideCurrentMonth", "disableMargin", "disableHighlightToday", "showDaysOutsideCurrentMonth"], mC = (e, t) => {
  const {
    isDaySelected: n,
    isDayDisabled: r,
    isDayCurrent: s,
    isDayOutsideMonth: i,
    disableMargin: a,
    disableHighlightToday: l,
    showDaysOutsideCurrentMonth: c
  } = t, u = i && !c;
  return be({
    root: ["root", n && !u && "selected", r && "disabled", !a && "dayWithMargin", !l && s && "today", i && c && "dayOutsideMonth", u && "hiddenDaySpacingFiller"],
    hiddenDaySpacingFiller: ["hiddenDaySpacingFiller"]
  }, pC, e);
}, uh = ({
  theme: e
}) => j({}, e.typography.caption, {
  width: Ao,
  height: Ao,
  borderRadius: "50%",
  padding: 0,
  // explicitly setting to `transparent` to avoid potentially getting impacted by change from the overridden component
  backgroundColor: "transparent",
  transition: e.transitions.create("background-color", {
    duration: e.transitions.duration.short
  }),
  color: (e.vars || e).palette.text.primary,
  "@media (pointer: fine)": {
    "&:hover": {
      backgroundColor: e.vars ? `rgba(${e.vars.palette.primary.mainChannel} / ${e.vars.palette.action.hoverOpacity})` : an(e.palette.primary.main, e.palette.action.hoverOpacity)
    }
  },
  "&:focus": {
    backgroundColor: e.vars ? `rgba(${e.vars.palette.primary.mainChannel} / ${e.vars.palette.action.focusOpacity})` : an(e.palette.primary.main, e.palette.action.focusOpacity),
    [`&.${Kn.selected}`]: {
      willChange: "background-color",
      backgroundColor: (e.vars || e).palette.primary.dark
    }
  },
  [`&.${Kn.selected}`]: {
    color: (e.vars || e).palette.primary.contrastText,
    backgroundColor: (e.vars || e).palette.primary.main,
    fontWeight: e.typography.fontWeightMedium,
    "&:hover": {
      willChange: "background-color",
      backgroundColor: (e.vars || e).palette.primary.dark
    }
  },
  [`&.${Kn.disabled}:not(.${Kn.selected})`]: {
    color: (e.vars || e).palette.text.disabled
  },
  [`&.${Kn.disabled}&.${Kn.selected}`]: {
    opacity: 0.6
  },
  variants: [{
    props: {
      disableMargin: !1
    },
    style: {
      margin: `0 ${wi}px`
    }
  }, {
    props: {
      isDayOutsideMonth: !0,
      showDaysOutsideCurrentMonth: !0
    },
    style: {
      color: (e.vars || e).palette.text.secondary
    }
  }, {
    props: {
      disableHighlightToday: !1,
      isDayCurrent: !0
    },
    style: {
      [`&:not(.${Kn.selected})`]: {
        border: `1px solid ${(e.vars || e).palette.text.secondary}`
      }
    }
  }]
}), dh = (e, t) => {
  const {
    ownerState: n
  } = e;
  return [t.root, !n.disableMargin && t.dayWithMargin, !n.disableHighlightToday && n.isDayCurrent && t.today, !n.isDayOutsideMonth && n.showDaysOutsideCurrentMonth && t.dayOutsideMonth, n.isDayOutsideMonth && !n.showDaysOutsideCurrentMonth && t.hiddenDaySpacingFiller];
}, yC = Q(Vr, {
  name: "MuiPickersDay",
  slot: "Root",
  overridesResolver: dh
})(uh), gC = Q("div", {
  name: "MuiPickersDay",
  slot: "Root",
  overridesResolver: dh
})(({
  theme: e
}) => j({}, uh({
  theme: e
}), {
  // visibility: 'hidden' does not work here as it hides the element from screen readers as well
  opacity: 0,
  pointerEvents: "none"
})), lo = () => {
}, Xl = /* @__PURE__ */ x.forwardRef(function(t, n) {
  const r = Ze({
    props: t,
    name: "MuiPickersDay"
  }), {
    autoFocus: s = !1,
    className: i,
    classes: a,
    isAnimating: l,
    onClick: c,
    onDaySelect: u,
    onFocus: d = lo,
    onBlur: f = lo,
    onKeyDown: y = lo,
    onMouseDown: g = lo,
    onMouseEnter: h = lo,
    children: p,
    day: m,
    selected: b,
    disabled: C,
    today: O,
    outsideCurrentMonth: w,
    disableMargin: S,
    disableHighlightToday: P,
    showDaysOutsideCurrentMonth: M
  } = r, F = Ee(r, hC), A = ch({
    day: m,
    selected: b,
    disabled: C,
    today: O,
    outsideCurrentMonth: w,
    disableMargin: S,
    disableHighlightToday: P,
    showDaysOutsideCurrentMonth: M
  }), $ = mC(a, A), k = He(), v = x.useRef(null), D = Ne(v, n);
  dt(() => {
    s && !C && !l && !w && v.current.focus();
  }, [s, C, l, w]);
  const T = (N) => {
    g(N), w && N.preventDefault();
  }, I = (N) => {
    N.defaultMuiPrevented = !0, C || u(m), w && N.currentTarget.focus(), c && c(N);
  };
  return w && !M ? /* @__PURE__ */ E.jsx(gC, {
    className: pe($.root, $.hiddenDaySpacingFiller, i),
    ownerState: A,
    role: F.role
  }) : /* @__PURE__ */ E.jsx(yC, j({
    className: pe($.root, i),
    ref: D,
    centerRipple: !0,
    disabled: C,
    tabIndex: b ? 0 : -1,
    onKeyDown: (N) => y(N, m),
    onFocus: (N) => d(N, m),
    onBlur: (N) => f(N, m),
    onMouseEnter: (N) => h(N, m),
    onClick: I,
    onMouseDown: T
  }, F, {
    ownerState: A,
    children: p ?? k.format(m, "dayOfMonth")
  }));
});
process.env.NODE_ENV !== "production" && (Xl.displayName = "PickersDayRaw");
process.env.NODE_ENV !== "production" && (Xl.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * A ref for imperative actions.
   * It currently only supports `focusVisible()` action.
   */
  action: o.oneOfType([o.func, o.shape({
    current: o.shape({
      focusVisible: o.func.isRequired
    })
  })]),
  /**
   * If `true`, the ripples are centered.
   * They won't start at the cursor interaction position.
   * @default false
   */
  centerRipple: o.bool,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: o.object,
  className: o.string,
  component: o.elementType,
  /**
   * The date to show.
   */
  day: o.object.isRequired,
  /**
   * If `true`, renders as disabled.
   * @default false
   */
  disabled: o.bool,
  /**
   * If `true`, today's date is rendering without highlighting with circle.
   * @default false
   */
  disableHighlightToday: o.bool,
  /**
   * If `true`, days are rendering without margin. Useful for displaying linked range of days.
   * @default false
   */
  disableMargin: o.bool,
  /**
   * If `true`, the ripple effect is disabled.
   *
   * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
   * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
   * @default false
   */
  disableRipple: o.bool,
  /**
   * If `true`, the touch ripple effect is disabled.
   * @default false
   */
  disableTouchRipple: o.bool,
  /**
   * If `true`, the base button will have a keyboard focus ripple.
   * @default false
   */
  focusRipple: o.bool,
  /**
   * This prop can help identify which element has keyboard focus.
   * The class name will be applied when the element gains the focus through keyboard interaction.
   * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
   * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).
   * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
   * if needed.
   */
  focusVisibleClassName: o.string,
  isAnimating: o.bool,
  /**
   * If `true`, day is the first visible cell of the month.
   * Either the first day of the month or the first day of the week depending on `showDaysOutsideCurrentMonth`.
   */
  isFirstVisibleCell: o.bool.isRequired,
  /**
   * If `true`, day is the last visible cell of the month.
   * Either the last day of the month or the last day of the week depending on `showDaysOutsideCurrentMonth`.
   */
  isLastVisibleCell: o.bool.isRequired,
  onBlur: o.func,
  onDaySelect: o.func.isRequired,
  onFocus: o.func,
  /**
   * Callback fired when the component is focused with a keyboard.
   * We trigger a `onFocus` callback too.
   */
  onFocusVisible: o.func,
  onKeyDown: o.func,
  onMouseEnter: o.func,
  /**
   * If `true`, day is outside of month and will be hidden.
   */
  outsideCurrentMonth: o.bool.isRequired,
  /**
   * If `true`, renders as selected.
   * @default false
   */
  selected: o.bool,
  /**
   * If `true`, days outside the current month are rendered:
   *
   * - if `fixedWeekNumber` is defined, renders days to have the weeks requested.
   *
   * - if `fixedWeekNumber` is not defined, renders day to fill the first and last week of the current month.
   *
   * - ignored if `calendars` equals more than `1` on range pickers.
   * @default false
   */
  showDaysOutsideCurrentMonth: o.bool,
  style: o.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: o.oneOfType([o.arrayOf(o.oneOfType([o.func, o.object, o.bool])), o.func, o.object]),
  /**
   * @default 0
   */
  tabIndex: o.number,
  /**
   * If `true`, renders as today date.
   * @default false
   */
  today: o.bool,
  /**
   * Props applied to the `TouchRipple` element.
   */
  TouchRippleProps: o.object,
  /**
   * A ref that points to the `TouchRipple` element.
   */
  touchRippleRef: o.oneOfType([o.func, o.shape({
    current: o.shape({
      pulsate: o.func.isRequired,
      start: o.func.isRequired,
      stop: o.func.isRequired
    })
  })])
});
const fh = /* @__PURE__ */ x.memo(Xl);
process.env.NODE_ENV !== "production" && (fh.displayName = "PickersDay");
const bC = (e) => we("MuiPickersSlideTransition", e), Nt = xe("MuiPickersSlideTransition", ["root", "slideEnter-left", "slideEnter-right", "slideEnterActive", "slideExit", "slideExitActiveLeft-left", "slideExitActiveLeft-right"]), vC = ["children", "className", "reduceAnimations", "slideDirection", "transKey", "classes"], xC = (e, t) => {
  const {
    slideDirection: n
  } = t, r = {
    root: ["root"],
    exit: ["slideExit"],
    enterActive: ["slideEnterActive"],
    enter: [`slideEnter-${n}`],
    exitActive: [`slideExitActiveLeft-${n}`]
  };
  return be(r, bC, e);
}, wC = Q(Zo, {
  name: "MuiPickersSlideTransition",
  slot: "Root",
  overridesResolver: (e, t) => [t.root, {
    [`.${Nt["slideEnter-left"]}`]: t["slideEnter-left"]
  }, {
    [`.${Nt["slideEnter-right"]}`]: t["slideEnter-right"]
  }, {
    [`.${Nt.slideEnterActive}`]: t.slideEnterActive
  }, {
    [`.${Nt.slideExit}`]: t.slideExit
  }, {
    [`.${Nt["slideExitActiveLeft-left"]}`]: t["slideExitActiveLeft-left"]
  }, {
    [`.${Nt["slideExitActiveLeft-right"]}`]: t["slideExitActiveLeft-right"]
  }]
})(({
  theme: e
}) => {
  const t = e.transitions.create("transform", {
    duration: e.transitions.duration.complex,
    easing: "cubic-bezier(0.35, 0.8, 0.4, 1)"
  });
  return {
    display: "block",
    position: "relative",
    overflowX: "hidden",
    "& > *": {
      position: "absolute",
      top: 0,
      right: 0,
      left: 0
    },
    [`& .${Nt["slideEnter-left"]}`]: {
      willChange: "transform",
      transform: "translate(100%)",
      zIndex: 1
    },
    [`& .${Nt["slideEnter-right"]}`]: {
      willChange: "transform",
      transform: "translate(-100%)",
      zIndex: 1
    },
    [`& .${Nt.slideEnterActive}`]: {
      transform: "translate(0%)",
      transition: t
    },
    [`& .${Nt.slideExit}`]: {
      transform: "translate(0%)"
    },
    [`& .${Nt["slideExitActiveLeft-left"]}`]: {
      willChange: "transform",
      transform: "translate(-100%)",
      transition: t,
      zIndex: 0
    },
    [`& .${Nt["slideExitActiveLeft-right"]}`]: {
      willChange: "transform",
      transform: "translate(100%)",
      transition: t,
      zIndex: 0
    }
  };
});
function SC(e) {
  const t = Ze({
    props: e,
    name: "MuiPickersSlideTransition"
  }), {
    children: n,
    className: r,
    reduceAnimations: s,
    slideDirection: i,
    transKey: a,
    classes: l
  } = t, c = Ee(t, vC), {
    ownerState: u
  } = gt(), d = j({}, u, {
    slideDirection: i
  }), f = xC(l, d), y = zr();
  if (s)
    return /* @__PURE__ */ E.jsx("div", {
      className: pe(f.root, r),
      children: n
    });
  const g = {
    exit: f.exit,
    enterActive: f.enterActive,
    enter: f.enter,
    exitActive: f.exitActive
  };
  return /* @__PURE__ */ E.jsx(wC, {
    className: pe(f.root, r),
    childFactory: (h) => /* @__PURE__ */ x.cloneElement(h, {
      classNames: g
    }),
    role: "presentation",
    ownerState: d,
    children: /* @__PURE__ */ E.jsx(Ol, j({
      mountOnEnter: !0,
      unmountOnExit: !0,
      timeout: y.transitions.duration.complex,
      classNames: g
    }, c, {
      children: n
    }), a)
  });
}
const EC = (e) => we("MuiDayCalendar", e);
xe("MuiDayCalendar", ["root", "header", "weekDayLabel", "loadingContainer", "slideTransition", "monthContainer", "weekContainer", "weekNumberLabel", "weekNumber"]);
const OC = ["parentProps", "day", "focusedDay", "selectedDays", "isDateDisabled", "currentMonthNumber", "isViewFocused"], CC = ["ownerState"], PC = (e) => be({
  root: ["root"],
  header: ["header"],
  weekDayLabel: ["weekDayLabel"],
  loadingContainer: ["loadingContainer"],
  slideTransition: ["slideTransition"],
  monthContainer: ["monthContainer"],
  weekContainer: ["weekContainer"],
  weekNumberLabel: ["weekNumberLabel"],
  weekNumber: ["weekNumber"]
}, EC, e), ph = (Ao + wi * 2) * 6, TC = Q("div", {
  name: "MuiDayCalendar",
  slot: "Root"
})({}), RC = Q("div", {
  name: "MuiDayCalendar",
  slot: "Header"
})({
  display: "flex",
  justifyContent: "center",
  alignItems: "center"
}), kC = Q(Vn, {
  name: "MuiDayCalendar",
  slot: "WeekDayLabel"
})(({
  theme: e
}) => ({
  width: 36,
  height: 40,
  margin: "0 2px",
  textAlign: "center",
  display: "flex",
  justifyContent: "center",
  alignItems: "center",
  color: (e.vars || e).palette.text.secondary
})), DC = Q(Vn, {
  name: "MuiDayCalendar",
  slot: "WeekNumberLabel"
})(({
  theme: e
}) => ({
  width: 36,
  height: 40,
  margin: "0 2px",
  textAlign: "center",
  display: "flex",
  justifyContent: "center",
  alignItems: "center",
  color: (e.vars || e).palette.text.disabled
})), MC = Q(Vn, {
  name: "MuiDayCalendar",
  slot: "WeekNumber"
})(({
  theme: e
}) => j({}, e.typography.caption, {
  width: Ao,
  height: Ao,
  padding: 0,
  margin: `0 ${wi}px`,
  color: (e.vars || e).palette.text.disabled,
  fontSize: "0.75rem",
  alignItems: "center",
  justifyContent: "center",
  display: "inline-flex"
})), IC = Q("div", {
  name: "MuiDayCalendar",
  slot: "LoadingContainer"
})({
  display: "flex",
  justifyContent: "center",
  alignItems: "center",
  minHeight: ph
}), NC = Q(SC, {
  name: "MuiDayCalendar",
  slot: "SlideTransition"
})({
  minHeight: ph
}), AC = Q("div", {
  name: "MuiDayCalendar",
  slot: "MonthContainer"
})({
  overflow: "hidden"
}), FC = Q("div", {
  name: "MuiDayCalendar",
  slot: "WeekContainer"
})({
  margin: `${wi}px 0`,
  display: "flex",
  justifyContent: "center"
});
function $C(e) {
  let {
    parentProps: t,
    day: n,
    focusedDay: r,
    selectedDays: s,
    isDateDisabled: i,
    currentMonthNumber: a,
    isViewFocused: l
  } = e, c = Ee(e, OC);
  const {
    disabled: u,
    disableHighlightToday: d,
    isMonthSwitchingAnimating: f,
    showDaysOutsideCurrentMonth: y,
    slots: g,
    slotProps: h,
    timezone: p
  } = t, m = He(), b = gi(p), C = r != null && m.isSameDay(n, r), O = l && C, w = s.some((T) => m.isSameDay(T, n)), S = m.isSameDay(n, b), P = x.useMemo(() => u || i(n), [u, i, n]), M = x.useMemo(() => m.getMonth(n) !== a, [m, n, a]), F = ch({
    day: n,
    selected: w,
    disabled: P,
    today: S,
    outsideCurrentMonth: M,
    disableMargin: void 0,
    // This prop can only be defined using slotProps.day so the ownerState for useSlotProps cannot have its value.
    disableHighlightToday: d,
    showDaysOutsideCurrentMonth: y
  }), A = g?.day ?? fh, $ = Ie({
    elementType: A,
    externalSlotProps: h?.day,
    additionalProps: j({
      disableHighlightToday: d,
      showDaysOutsideCurrentMonth: y,
      role: "gridcell",
      isAnimating: f,
      // it is used in date range dragging logic by accessing `dataset.timestamp`
      "data-timestamp": m.toJsDate(n).valueOf()
    }, c),
    ownerState: j({}, F, {
      day: n,
      isDayDisabled: P,
      isDaySelected: w
    })
  }), k = Ee($, CC), v = x.useMemo(() => {
    const T = m.startOfMonth(m.setMonth(n, a));
    return y ? m.isSameDay(n, m.startOfWeek(T)) : m.isSameDay(n, T);
  }, [a, n, y, m]), D = x.useMemo(() => {
    const T = m.endOfMonth(m.setMonth(n, a));
    return y ? m.isSameDay(n, m.endOfWeek(T)) : m.isSameDay(n, T);
  }, [a, n, y, m]);
  return /* @__PURE__ */ E.jsx(A, j({}, k, {
    day: n,
    disabled: P,
    autoFocus: !M && O,
    today: S,
    outsideCurrentMonth: M,
    isFirstVisibleCell: v,
    isLastVisibleCell: D,
    selected: w,
    tabIndex: C ? 0 : -1,
    "aria-selected": w,
    "aria-current": S ? "date" : void 0
  }));
}
function jC(e) {
  const t = Ze({
    props: e,
    name: "MuiDayCalendar"
  }), n = He(), {
    onFocusedDayChange: r,
    className: s,
    classes: i,
    currentMonth: a,
    selectedDays: l,
    focusedDay: c,
    loading: u,
    onSelectedDaysChange: d,
    onMonthSwitchingAnimationEnd: f,
    readOnly: y,
    reduceAnimations: g,
    renderLoading: h = () => /* @__PURE__ */ E.jsx("span", {
      children: "..."
    }),
    slideDirection: p,
    TransitionProps: m,
    disablePast: b,
    disableFuture: C,
    minDate: O,
    maxDate: w,
    shouldDisableDate: S,
    shouldDisableMonth: P,
    shouldDisableYear: M,
    dayOfWeekFormatter: F = (X) => n.format(X, "weekdayShort").charAt(0).toUpperCase(),
    hasFocus: A,
    onFocusedViewChange: $,
    gridLabelId: k,
    displayWeekNumber: v,
    fixedWeekNumber: D,
    timezone: T
  } = t, I = gi(T), N = PC(i), _ = Ut(), G = ah({
    shouldDisableDate: S,
    shouldDisableMonth: P,
    shouldDisableYear: M,
    minDate: O,
    maxDate: w,
    disablePast: b,
    disableFuture: C,
    timezone: T
  }), L = Ln(), V = de((X) => {
    y || d(X);
  }), R = (X) => {
    G(X) || (r(X), $?.(!0));
  }, B = de((X, z) => {
    switch (X.key) {
      case "ArrowUp":
        R(n.addDays(z, -7)), X.preventDefault();
        break;
      case "ArrowDown":
        R(n.addDays(z, 7)), X.preventDefault();
        break;
      case "ArrowLeft": {
        const ne = n.addDays(z, _ ? 1 : -1), Y = n.addMonths(z, _ ? 1 : -1), ae = Ro({
          adapter: n,
          date: ne,
          minDate: _ ? ne : n.startOfMonth(Y),
          maxDate: _ ? n.endOfMonth(Y) : ne,
          isDateDisabled: G,
          timezone: T
        });
        R(ae || ne), X.preventDefault();
        break;
      }
      case "ArrowRight": {
        const ne = n.addDays(z, _ ? -1 : 1), Y = n.addMonths(z, _ ? -1 : 1), ae = Ro({
          adapter: n,
          date: ne,
          minDate: _ ? n.startOfMonth(Y) : ne,
          maxDate: _ ? ne : n.endOfMonth(Y),
          isDateDisabled: G,
          timezone: T
        });
        R(ae || ne), X.preventDefault();
        break;
      }
      case "Home":
        R(n.startOfWeek(z)), X.preventDefault();
        break;
      case "End":
        R(n.endOfWeek(z)), X.preventDefault();
        break;
      case "PageUp":
        R(n.addMonths(z, 1)), X.preventDefault();
        break;
      case "PageDown":
        R(n.addMonths(z, -1)), X.preventDefault();
        break;
    }
  }), H = de((X, z) => R(z)), K = de((X, z) => {
    c != null && n.isSameDay(c, z) && $?.(!1);
  }), te = n.getMonth(a), ee = n.getYear(a), J = x.useMemo(() => l.filter((X) => !!X).map((X) => n.startOfDay(X)), [n, l]), ie = `${ee}-${te}`, re = x.useMemo(() => /* @__PURE__ */ x.createRef(), [ie]), q = x.useMemo(() => {
    const X = n.getWeekArray(a);
    let z = n.addMonths(a, 1);
    for (; D && X.length < D; ) {
      const ne = n.getWeekArray(z), Y = n.isSameDay(X[X.length - 1][0], ne[0][0]);
      ne.slice(Y ? 1 : 0).forEach((ae) => {
        X.length < D && X.push(ae);
      }), z = n.addMonths(z, 1);
    }
    return X;
  }, [a, D, n]);
  return /* @__PURE__ */ E.jsxs(TC, {
    role: "grid",
    "aria-labelledby": k,
    className: N.root,
    children: [/* @__PURE__ */ E.jsxs(RC, {
      role: "row",
      className: N.header,
      children: [v && /* @__PURE__ */ E.jsx(DC, {
        variant: "caption",
        role: "columnheader",
        "aria-label": L.calendarWeekNumberHeaderLabel,
        className: N.weekNumberLabel,
        children: L.calendarWeekNumberHeaderText
      }), Gb(n, I).map((X, z) => /* @__PURE__ */ E.jsx(kC, {
        variant: "caption",
        role: "columnheader",
        "aria-label": n.format(X, "weekday"),
        className: N.weekDayLabel,
        children: F(X)
      }, z.toString()))]
    }), u ? /* @__PURE__ */ E.jsx(IC, {
      className: N.loadingContainer,
      children: h()
    }) : /* @__PURE__ */ E.jsx(NC, j({
      transKey: ie,
      onExited: f,
      reduceAnimations: g,
      slideDirection: p,
      className: pe(s, N.slideTransition)
    }, m, {
      nodeRef: re,
      children: /* @__PURE__ */ E.jsx(AC, {
        ref: re,
        role: "rowgroup",
        className: N.monthContainer,
        children: q.map((X, z) => /* @__PURE__ */ E.jsxs(FC, {
          role: "row",
          className: N.weekContainer,
          "aria-rowindex": z + 1,
          children: [v && /* @__PURE__ */ E.jsx(MC, {
            className: N.weekNumber,
            role: "rowheader",
            "aria-label": L.calendarWeekNumberAriaLabelText(n.getWeekNumber(X[0])),
            children: L.calendarWeekNumberText(n.getWeekNumber(X[0]))
          }), X.map((ne, Y) => /* @__PURE__ */ E.jsx($C, {
            parentProps: t,
            day: ne,
            selectedDays: J,
            isViewFocused: A,
            focusedDay: c,
            onKeyDown: B,
            onFocus: H,
            onBlur: K,
            onDaySelect: V,
            isDateDisabled: G,
            currentMonthNumber: te,
            "aria-colindex": Y + 1
          }, ne.toString()))]
        }, `week-${X[0]}`))
      })
    }))]
  });
}
function hh(e) {
  return we("MuiMonthCalendar", e);
}
const xs = xe("MuiMonthCalendar", ["root", "button", "disabled", "selected"]), _C = ["autoFocus", "classes", "disabled", "selected", "value", "onClick", "onKeyDown", "onFocus", "onBlur", "slots", "slotProps"], VC = (e, t) => {
  const n = {
    button: ["button", t.isMonthDisabled && "disabled", t.isMonthSelected && "selected"]
  };
  return be(n, hh, e);
}, LC = Q("button", {
  name: "MuiMonthCalendar",
  slot: "Button",
  overridesResolver: (e, t) => [t.button, {
    [`&.${xs.disabled}`]: t.disabled
  }, {
    [`&.${xs.selected}`]: t.selected
  }]
})(({
  theme: e
}) => j({
  color: "unset",
  backgroundColor: "transparent",
  border: 0,
  outline: 0
}, e.typography.subtitle1, {
  height: 36,
  width: 72,
  borderRadius: 18,
  cursor: "pointer",
  "&:focus": {
    backgroundColor: e.vars ? `rgba(${e.vars.palette.action.activeChannel} / ${e.vars.palette.action.hoverOpacity})` : an(e.palette.action.active, e.palette.action.hoverOpacity)
  },
  "&:hover": {
    backgroundColor: e.vars ? `rgba(${e.vars.palette.action.activeChannel} / ${e.vars.palette.action.hoverOpacity})` : an(e.palette.action.active, e.palette.action.hoverOpacity)
  },
  "&:disabled": {
    cursor: "auto",
    pointerEvents: "none"
  },
  [`&.${xs.disabled}`]: {
    color: (e.vars || e).palette.text.secondary
  },
  [`&.${xs.selected}`]: {
    color: (e.vars || e).palette.primary.contrastText,
    backgroundColor: (e.vars || e).palette.primary.main,
    "&:focus, &:hover": {
      backgroundColor: (e.vars || e).palette.primary.dark
    }
  }
})), mh = /* @__PURE__ */ x.memo(function(t) {
  const {
    autoFocus: n,
    classes: r,
    disabled: s,
    selected: i,
    value: a,
    onClick: l,
    onKeyDown: c,
    onFocus: u,
    onBlur: d,
    slots: f,
    slotProps: y
  } = t, g = Ee(t, _C), h = x.useRef(null), {
    ownerState: p
  } = gt(), m = j({}, p, {
    isMonthDisabled: s,
    isMonthSelected: i
  }), b = VC(r, m);
  dt(() => {
    n && h.current?.focus();
  }, [n]);
  const C = f?.monthButton ?? LC, O = Ie({
    elementType: C,
    externalSlotProps: y?.monthButton,
    externalForwardedProps: g,
    additionalProps: {
      disabled: s,
      ref: h,
      type: "button",
      role: "radio",
      "aria-checked": i,
      onClick: (w) => l(w, a),
      onKeyDown: (w) => c(w, a),
      onFocus: (w) => u(w, a),
      onBlur: (w) => d(w, a)
    },
    ownerState: m,
    className: b.button
  });
  return /* @__PURE__ */ E.jsx(C, j({}, O));
});
process.env.NODE_ENV !== "production" && (mh.displayName = "MonthCalendarButton");
const BC = ["autoFocus", "className", "currentMonth", "classes", "value", "defaultValue", "referenceDate", "disabled", "disableFuture", "disablePast", "maxDate", "minDate", "onChange", "shouldDisableMonth", "readOnly", "disableHighlightToday", "onMonthFocus", "hasFocus", "onFocusedViewChange", "monthsPerRow", "timezone", "gridLabelId", "slots", "slotProps"], WC = (e) => be({
  root: ["root"]
}, hh, e);
function zC(e, t) {
  const n = Ze({
    props: e,
    name: t
  }), r = Go(n);
  return j({}, n, r, {
    monthsPerRow: n.monthsPerRow ?? 3
  });
}
const cd = (e, t, n, r, s) => !!(e === t && r && s.isSameYear(n, r)), UC = Q("div", {
  name: "MuiMonthCalendar",
  slot: "Root",
  shouldForwardProp: (e) => rn(e) && e !== "monthsPerRow"
})({
  display: "flex",
  flexWrap: "wrap",
  justifyContent: "space-evenly",
  rowGap: 16,
  padding: "8px 0",
  width: Si,
  // avoid padding increasing width over defined
  boxSizing: "border-box",
  variants: [{
    props: {
      monthsPerRow: 3
    },
    style: {
      columnGap: 24
    }
  }, {
    props: {
      monthsPerRow: 4
    },
    style: {
      columnGap: 0
    }
  }]
}), Ql = /* @__PURE__ */ x.forwardRef(function(t, n) {
  const r = zC(t, "MuiMonthCalendar"), {
    autoFocus: s,
    className: i,
    currentMonth: a,
    classes: l,
    value: c,
    defaultValue: u,
    referenceDate: d,
    disabled: f,
    disableFuture: y,
    disablePast: g,
    maxDate: h,
    minDate: p,
    onChange: m,
    shouldDisableMonth: b,
    readOnly: C,
    onMonthFocus: O,
    hasFocus: w,
    onFocusedViewChange: S,
    monthsPerRow: P,
    timezone: M,
    gridLabelId: F,
    slots: A,
    slotProps: $
  } = r, k = Ee(r, BC), {
    value: v,
    handleValueChange: D,
    timezone: T
  } = ns({
    name: "MonthCalendar",
    timezone: M,
    value: c,
    defaultValue: u,
    referenceDate: d,
    onChange: m,
    valueManager: ln
  }), I = gi(T), N = Ut(), _ = He(), {
    ownerState: G
  } = gt(), L = x.useMemo(
    () => ln.getInitialReferenceValue({
      value: v,
      adapter: _,
      props: r,
      timezone: T,
      referenceDate: d,
      granularity: Zt.month
    }),
    []
    // eslint-disable-line react-hooks/exhaustive-deps
  ), V = WC(l), R = x.useMemo(() => _.getMonth(I), [_, I]), B = x.useMemo(() => v != null ? _.getMonth(v) : null, [v, _]), [H, K] = x.useState(() => B || _.getMonth(L)), [te, ee] = Fn({
    name: "MonthCalendar",
    state: "hasFocus",
    controlled: w,
    default: s ?? !1
  }), J = de((Y) => {
    ee(Y), S && S(Y);
  }), ie = x.useCallback((Y) => {
    const ae = _.startOfMonth(g && _.isAfter(I, p) ? I : p), W = _.startOfMonth(y && _.isBefore(I, h) ? I : h), oe = _.startOfMonth(Y);
    return _.isBefore(oe, ae) || _.isAfter(oe, W) ? !0 : b ? b(oe) : !1;
  }, [y, g, h, p, I, b, _]), re = de((Y, ae) => {
    if (C)
      return;
    const W = v && a && !_.isSameYear(v, a) ? _.setYear(v, _.getYear(a)) : v, oe = _.setMonth(W ?? L, ae);
    D(oe);
  }), q = de((Y) => {
    ie(_.setMonth(v ?? a ?? L, Y)) || (K(Y), J(!0), O && O(Y));
  });
  x.useEffect(() => {
    K((Y) => B !== null && Y !== B ? B : Y);
  }, [B]);
  const X = de((Y, ae) => {
    switch (Y.key) {
      case "ArrowUp":
        q((12 + ae - 3) % 12), Y.preventDefault();
        break;
      case "ArrowDown":
        q((12 + ae + 3) % 12), Y.preventDefault();
        break;
      case "ArrowLeft":
        q((12 + ae + (N ? 1 : -1)) % 12), Y.preventDefault();
        break;
      case "ArrowRight":
        q((12 + ae + (N ? -1 : 1)) % 12), Y.preventDefault();
        break;
    }
  }), z = de((Y, ae) => {
    q(ae);
  }), ne = de((Y, ae) => {
    H === ae && J(!1);
  });
  return /* @__PURE__ */ E.jsx(UC, j({
    ref: n,
    className: pe(V.root, i),
    ownerState: G,
    role: "radiogroup",
    "aria-labelledby": F,
    monthsPerRow: P
  }, k, {
    children: cl(_, a ?? v ?? L).map((Y) => {
      const ae = _.getMonth(Y), W = _.format(Y, "monthShort"), oe = _.format(Y, "month"), ye = cd(ae, B, Y, v, _), ge = f || ie(Y);
      return /* @__PURE__ */ E.jsx(mh, {
        selected: ye,
        value: ae,
        onClick: re,
        onKeyDown: X,
        autoFocus: te && ae === H,
        disabled: ge,
        tabIndex: ae === H && !ge ? 0 : -1,
        onFocus: z,
        onBlur: ne,
        "aria-current": cd(ae, R, Y, I, _) ? "date" : void 0,
        "aria-label": oe,
        slots: A,
        slotProps: $,
        classes: l,
        children: W
      }, W);
    })
  }));
});
process.env.NODE_ENV !== "production" && (Ql.displayName = "MonthCalendar");
process.env.NODE_ENV !== "production" && (Ql.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  autoFocus: o.bool,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: o.object,
  className: o.string,
  currentMonth: o.object,
  /**
   * The default selected value.
   * Used when the component is not controlled.
   */
  defaultValue: o.object,
  /**
   * If `true`, the component is disabled.
   * When disabled, the value cannot be changed and no interaction is possible.
   * @default false
   */
  disabled: o.bool,
  /**
   * If `true`, disable values after the current date for date components, time for time components and both for date time components.
   * @default false
   */
  disableFuture: o.bool,
  /**
   * If `true`, today's date is rendering without highlighting with circle.
   * @default false
   */
  disableHighlightToday: o.bool,
  /**
   * If `true`, disable values before the current date for date components, time for time components and both for date time components.
   * @default false
   */
  disablePast: o.bool,
  gridLabelId: o.string,
  hasFocus: o.bool,
  /**
   * Maximal selectable date.
   * @default 2099-12-31
   */
  maxDate: o.object,
  /**
   * Minimal selectable date.
   * @default 1900-01-01
   */
  minDate: o.object,
  /**
   * Months rendered per row.
   * @default 3
   */
  monthsPerRow: o.oneOf([3, 4]),
  /**
   * Callback fired when the value changes.
   * @param {PickerValidDate} value The new value.
   */
  onChange: o.func,
  onFocusedViewChange: o.func,
  onMonthFocus: o.func,
  /**
   * If `true`, the component is read-only.
   * When read-only, the value cannot be changed but the user can interact with the interface.
   * @default false
   */
  readOnly: o.bool,
  /**
   * The date used to generate the new value when both `value` and `defaultValue` are empty.
   * @default The closest valid month using the validation props, except callbacks such as `shouldDisableMonth`.
   */
  referenceDate: o.object,
  /**
   * Disable specific month.
   * @param {PickerValidDate} month The month to test.
   * @returns {boolean} If `true`, the month will be disabled.
   */
  shouldDisableMonth: o.func,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: o.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: o.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: o.oneOfType([o.arrayOf(o.oneOfType([o.func, o.object, o.bool])), o.func, o.object]),
  /**
   * Choose which timezone to use for the value.
   * Example: "default", "system", "UTC", "America/New_York".
   * If you pass values from other timezones to some props, they will be converted to this timezone before being used.
   * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documentation} for more details.
   * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.
   */
  timezone: o.string,
  /**
   * The selected value.
   * Used when the component is controlled.
   */
  value: o.object
});
function yh(e) {
  return we("MuiYearCalendar", e);
}
const ws = xe("MuiYearCalendar", ["root", "button", "disabled", "selected"]), qC = ["autoFocus", "classes", "disabled", "selected", "value", "onClick", "onKeyDown", "onFocus", "onBlur", "slots", "slotProps"], HC = (e, t) => {
  const n = {
    button: ["button", t.isYearDisabled && "disabled", t.isYearSelected && "selected"]
  };
  return be(n, yh, e);
}, YC = Q("button", {
  name: "MuiYearCalendar",
  slot: "Button",
  overridesResolver: (e, t) => [t.button, {
    [`&.${ws.disabled}`]: t.disabled
  }, {
    [`&.${ws.selected}`]: t.selected
  }]
})(({
  theme: e
}) => j({
  color: "unset",
  backgroundColor: "transparent",
  border: 0,
  outline: 0
}, e.typography.subtitle1, {
  height: 36,
  width: 72,
  borderRadius: 18,
  cursor: "pointer",
  "&:focus": {
    backgroundColor: e.vars ? `rgba(${e.vars.palette.action.activeChannel} / ${e.vars.palette.action.focusOpacity})` : an(e.palette.action.active, e.palette.action.focusOpacity)
  },
  "&:hover": {
    backgroundColor: e.vars ? `rgba(${e.vars.palette.action.activeChannel} / ${e.vars.palette.action.hoverOpacity})` : an(e.palette.action.active, e.palette.action.hoverOpacity)
  },
  "&:disabled": {
    cursor: "auto",
    pointerEvents: "none"
  },
  [`&.${ws.disabled}`]: {
    color: (e.vars || e).palette.text.secondary
  },
  [`&.${ws.selected}`]: {
    color: (e.vars || e).palette.primary.contrastText,
    backgroundColor: (e.vars || e).palette.primary.main,
    "&:focus, &:hover": {
      backgroundColor: (e.vars || e).palette.primary.dark
    }
  }
})), gh = /* @__PURE__ */ x.memo(function(t) {
  const {
    autoFocus: n,
    classes: r,
    disabled: s,
    selected: i,
    value: a,
    onClick: l,
    onKeyDown: c,
    onFocus: u,
    onBlur: d,
    slots: f,
    slotProps: y
  } = t, g = Ee(t, qC), h = x.useRef(null), {
    ownerState: p
  } = gt(), m = j({}, p, {
    isYearDisabled: s,
    isYearSelected: i
  }), b = HC(r, m);
  dt(() => {
    n && h.current?.focus();
  }, [n]);
  const C = f?.yearButton ?? YC, O = Ie({
    elementType: C,
    externalSlotProps: y?.yearButton,
    externalForwardedProps: g,
    additionalProps: {
      disabled: s,
      ref: h,
      type: "button",
      role: "radio",
      "aria-checked": i,
      onClick: (w) => l(w, a),
      onKeyDown: (w) => c(w, a),
      onFocus: (w) => u(w, a),
      onBlur: (w) => d(w, a)
    },
    ownerState: m,
    className: b.button
  });
  return /* @__PURE__ */ E.jsx(C, j({}, O));
});
process.env.NODE_ENV !== "production" && (gh.displayName = "YearCalendarButton");
const KC = ["autoFocus", "className", "classes", "value", "defaultValue", "referenceDate", "disabled", "disableFuture", "disablePast", "maxDate", "minDate", "onChange", "readOnly", "shouldDisableYear", "disableHighlightToday", "onYearFocus", "hasFocus", "onFocusedViewChange", "yearsOrder", "yearsPerRow", "timezone", "gridLabelId", "slots", "slotProps"], GC = (e) => be({
  root: ["root"]
}, yh, e);
function XC(e, t) {
  const n = Ze({
    props: e,
    name: t
  }), r = Go(n);
  return j({}, n, r, {
    yearsPerRow: n.yearsPerRow ?? 3,
    yearsOrder: n.yearsOrder ?? "asc"
  });
}
const QC = Q("div", {
  name: "MuiYearCalendar",
  slot: "Root",
  shouldForwardProp: (e) => rn(e) && e !== "yearsPerRow"
})({
  display: "flex",
  flexWrap: "wrap",
  justifyContent: "space-evenly",
  rowGap: 12,
  padding: "6px 0",
  overflowY: "auto",
  height: "100%",
  width: Si,
  maxHeight: nS,
  // avoid padding increasing width over defined
  boxSizing: "border-box",
  position: "relative",
  variants: [{
    props: {
      yearsPerRow: 3
    },
    style: {
      columnGap: 24
    }
  }, {
    props: {
      yearsPerRow: 4
    },
    style: {
      columnGap: 0,
      padding: "0 2px"
    }
  }]
}), ZC = Q("div", {
  name: "MuiYearCalendar",
  slot: "ButtonFiller"
})({
  height: 36,
  width: 72
}), Zl = /* @__PURE__ */ x.forwardRef(function(t, n) {
  const r = XC(t, "MuiYearCalendar"), {
    autoFocus: s,
    className: i,
    classes: a,
    value: l,
    defaultValue: c,
    referenceDate: u,
    disabled: d,
    disableFuture: f,
    disablePast: y,
    maxDate: g,
    minDate: h,
    onChange: p,
    readOnly: m,
    shouldDisableYear: b,
    onYearFocus: C,
    hasFocus: O,
    onFocusedViewChange: w,
    yearsOrder: S,
    yearsPerRow: P,
    timezone: M,
    gridLabelId: F,
    slots: A,
    slotProps: $
  } = r, k = Ee(r, KC), {
    value: v,
    handleValueChange: D,
    timezone: T
  } = ns({
    name: "YearCalendar",
    timezone: M,
    value: l,
    defaultValue: c,
    referenceDate: u,
    onChange: p,
    valueManager: ln
  }), I = gi(T), N = Ut(), _ = He(), {
    ownerState: G
  } = gt(), L = x.useMemo(
    () => ln.getInitialReferenceValue({
      value: v,
      adapter: _,
      props: r,
      timezone: T,
      referenceDate: u,
      granularity: Zt.year
    }),
    []
    // eslint-disable-line react-hooks/exhaustive-deps
  ), V = GC(a), R = x.useMemo(() => _.getYear(I), [_, I]), B = x.useMemo(() => v != null ? _.getYear(v) : null, [v, _]), [H, K] = x.useState(() => B || _.getYear(L)), [te, ee] = Fn({
    name: "YearCalendar",
    state: "hasFocus",
    controlled: O,
    default: s ?? !1
  }), J = de((se) => {
    ee(se), w && w(se);
  }), ie = x.useCallback((se) => {
    if (y && _.isBeforeYear(se, I) || f && _.isAfterYear(se, I) || h && _.isBeforeYear(se, h) || g && _.isAfterYear(se, g))
      return !0;
    if (!b)
      return !1;
    const ce = _.startOfYear(se);
    return b(ce);
  }, [f, y, g, h, I, b, _]), re = de((se, ce) => {
    if (m)
      return;
    const ue = _.setYear(v ?? L, ce);
    D(ue);
  }), q = de((se) => {
    ie(_.setYear(v ?? L, se)) || (K(se), J(!0), C?.(se));
  });
  x.useEffect(() => {
    K((se) => B !== null && se !== B ? B : se);
  }, [B]);
  const X = S !== "desc" ? P * 1 : P * -1, z = N && S === "asc" || !N && S === "desc" ? -1 : 1, ne = de((se, ce) => {
    switch (se.key) {
      case "ArrowUp":
        q(ce - X), se.preventDefault();
        break;
      case "ArrowDown":
        q(ce + X), se.preventDefault();
        break;
      case "ArrowLeft":
        q(ce - z), se.preventDefault();
        break;
      case "ArrowRight":
        q(ce + z), se.preventDefault();
        break;
    }
  }), Y = de((se, ce) => {
    q(ce);
  }), ae = de((se, ce) => {
    H === ce && J(!1);
  }), W = x.useRef(null), oe = Ne(n, W);
  x.useEffect(() => {
    if (s || W.current === null)
      return;
    const se = W.current.querySelector('[tabindex="0"]');
    if (!se)
      return;
    const ce = se.offsetHeight, ue = se.offsetTop, ke = W.current.clientHeight, Te = W.current.scrollTop, Me = ue + ce;
    ce > ke || ue < Te || (W.current.scrollTop = Me - ke / 2 - ce / 2);
  }, [s]);
  const ye = _.getYearRange([h, g]);
  S === "desc" && ye.reverse();
  let ge = P - ye.length % P;
  return ge === P && (ge = 0), /* @__PURE__ */ E.jsxs(QC, j({
    ref: oe,
    className: pe(V.root, i),
    ownerState: G,
    role: "radiogroup",
    "aria-labelledby": F,
    yearsPerRow: P
  }, k, {
    children: [ye.map((se) => {
      const ce = _.getYear(se), ue = ce === B, ke = d || ie(se);
      return /* @__PURE__ */ E.jsx(gh, {
        selected: ue,
        value: ce,
        onClick: re,
        onKeyDown: ne,
        autoFocus: te && ce === H,
        disabled: ke,
        tabIndex: ce === H && !ke ? 0 : -1,
        onFocus: Y,
        onBlur: ae,
        "aria-current": R === ce ? "date" : void 0,
        slots: A,
        slotProps: $,
        classes: a,
        children: _.format(se, "year")
      }, _.format(se, "year"));
    }), Array.from({
      length: ge
    }, (se, ce) => /* @__PURE__ */ E.jsx(ZC, {}, ce))]
  }));
});
process.env.NODE_ENV !== "production" && (Zl.displayName = "YearCalendar");
process.env.NODE_ENV !== "production" && (Zl.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  autoFocus: o.bool,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: o.object,
  className: o.string,
  /**
   * The default selected value.
   * Used when the component is not controlled.
   */
  defaultValue: o.object,
  /**
   * If `true`, the component is disabled.
   * When disabled, the value cannot be changed and no interaction is possible.
   * @default false
   */
  disabled: o.bool,
  /**
   * If `true`, disable values after the current date for date components, time for time components and both for date time components.
   * @default false
   */
  disableFuture: o.bool,
  /**
   * If `true`, today's date is rendering without highlighting with circle.
   * @default false
   */
  disableHighlightToday: o.bool,
  /**
   * If `true`, disable values before the current date for date components, time for time components and both for date time components.
   * @default false
   */
  disablePast: o.bool,
  gridLabelId: o.string,
  hasFocus: o.bool,
  /**
   * Maximal selectable date.
   * @default 2099-12-31
   */
  maxDate: o.object,
  /**
   * Minimal selectable date.
   * @default 1900-01-01
   */
  minDate: o.object,
  /**
   * Callback fired when the value changes.
   * @param {PickerValidDate} value The new value.
   */
  onChange: o.func,
  onFocusedViewChange: o.func,
  onYearFocus: o.func,
  /**
   * If `true`, the component is read-only.
   * When read-only, the value cannot be changed but the user can interact with the interface.
   * @default false
   */
  readOnly: o.bool,
  /**
   * The date used to generate the new value when both `value` and `defaultValue` are empty.
   * @default The closest valid year using the validation props, except callbacks such as `shouldDisableYear`.
   */
  referenceDate: o.object,
  /**
   * Disable specific year.
   * @param {PickerValidDate} year The year to test.
   * @returns {boolean} If `true`, the year will be disabled.
   */
  shouldDisableYear: o.func,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: o.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: o.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: o.oneOfType([o.arrayOf(o.oneOfType([o.func, o.object, o.bool])), o.func, o.object]),
  /**
   * Choose which timezone to use for the value.
   * Example: "default", "system", "UTC", "America/New_York".
   * If you pass values from other timezones to some props, they will be converted to this timezone before being used.
   * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documentation} for more details.
   * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.
   */
  timezone: o.string,
  /**
   * The selected value.
   * Used when the component is controlled.
   */
  value: o.object,
  /**
   * Years are displayed in ascending (chronological) order by default.
   * If `desc`, years are displayed in descending order.
   * @default 'asc'
   */
  yearsOrder: o.oneOf(["asc", "desc"]),
  /**
   * Years rendered per row.
   * @default 3
   */
  yearsPerRow: o.oneOf([3, 4])
});
const JC = (e) => we("MuiPickersCalendarHeader", e), eP = xe("MuiPickersCalendarHeader", ["root", "labelContainer", "label", "switchViewButton", "switchViewIcon"]);
function tP(e) {
  return we("MuiPickersArrowSwitcher", e);
}
xe("MuiPickersArrowSwitcher", ["root", "spacer", "button", "previousIconButton", "nextIconButton", "leftArrowIcon", "rightArrowIcon"]);
const nP = ["children", "className", "slots", "slotProps", "isNextDisabled", "isNextHidden", "onGoToNext", "nextLabel", "isPreviousDisabled", "isPreviousHidden", "onGoToPrevious", "previousLabel", "labelId", "classes"], rP = ["ownerState"], oP = ["ownerState"], sP = Q("div", {
  name: "MuiPickersArrowSwitcher",
  slot: "Root"
})({
  display: "flex"
}), iP = Q("div", {
  name: "MuiPickersArrowSwitcher",
  slot: "Spacer"
})(({
  theme: e
}) => ({
  width: e.spacing(3)
})), ud = Q(Fo, {
  name: "MuiPickersArrowSwitcher",
  slot: "Button"
})({
  variants: [{
    props: {
      isButtonHidden: !0
    },
    style: {
      visibility: "hidden"
    }
  }]
}), aP = (e) => be({
  root: ["root"],
  spacer: ["spacer"],
  button: ["button"],
  previousIconButton: ["previousIconButton"],
  nextIconButton: ["nextIconButton"],
  leftArrowIcon: ["leftArrowIcon"],
  rightArrowIcon: ["rightArrowIcon"]
}, tP, e), bh = /* @__PURE__ */ x.forwardRef(function(t, n) {
  const r = Ut(), s = Ze({
    props: t,
    name: "MuiPickersArrowSwitcher"
  }), {
    children: i,
    className: a,
    slots: l,
    slotProps: c,
    isNextDisabled: u,
    isNextHidden: d,
    onGoToNext: f,
    nextLabel: y,
    isPreviousDisabled: g,
    isPreviousHidden: h,
    onGoToPrevious: p,
    previousLabel: m,
    labelId: b,
    classes: C
  } = s, O = Ee(s, nP), {
    ownerState: w
  } = gt(), S = aP(C), P = {
    isDisabled: u,
    isHidden: d,
    goTo: f,
    label: y
  }, M = {
    isDisabled: g,
    isHidden: h,
    goTo: p,
    label: m
  }, F = l?.previousIconButton ?? ud, A = Ie({
    elementType: F,
    externalSlotProps: c?.previousIconButton,
    additionalProps: {
      size: "medium",
      title: M.label,
      "aria-label": M.label,
      disabled: M.isDisabled,
      edge: "end",
      onClick: M.goTo
    },
    ownerState: j({}, w, {
      isButtonHidden: M.isHidden ?? !1
    }),
    className: pe(S.button, S.previousIconButton)
  }), $ = l?.nextIconButton ?? ud, k = Ie({
    elementType: $,
    externalSlotProps: c?.nextIconButton,
    additionalProps: {
      size: "medium",
      title: P.label,
      "aria-label": P.label,
      disabled: P.isDisabled,
      edge: "start",
      onClick: P.goTo
    },
    ownerState: j({}, w, {
      isButtonHidden: P.isHidden ?? !1
    }),
    className: pe(S.button, S.nextIconButton)
  }), v = l?.leftArrowIcon ?? aO, D = Ie({
    elementType: v,
    externalSlotProps: c?.leftArrowIcon,
    additionalProps: {
      fontSize: "inherit"
    },
    ownerState: w,
    className: S.leftArrowIcon
  }), T = Ee(D, rP), I = l?.rightArrowIcon ?? lO, N = Ie({
    elementType: I,
    externalSlotProps: c?.rightArrowIcon,
    additionalProps: {
      fontSize: "inherit"
    },
    ownerState: w,
    className: S.rightArrowIcon
  }), _ = Ee(N, oP);
  return /* @__PURE__ */ E.jsxs(sP, j({
    ref: n,
    className: pe(S.root, a),
    ownerState: w
  }, O, {
    children: [/* @__PURE__ */ E.jsx(F, j({}, A, {
      children: r ? /* @__PURE__ */ E.jsx(I, j({}, _)) : /* @__PURE__ */ E.jsx(v, j({}, T))
    })), i ? /* @__PURE__ */ E.jsx(Vn, {
      variant: "subtitle1",
      component: "span",
      id: b,
      children: i
    }) : /* @__PURE__ */ E.jsx(iP, {
      className: S.spacer,
      ownerState: w
    }), /* @__PURE__ */ E.jsx($, j({}, k, {
      children: r ? /* @__PURE__ */ E.jsx(v, j({}, T)) : /* @__PURE__ */ E.jsx(I, j({}, _))
    }))]
  }));
});
process.env.NODE_ENV !== "production" && (bh.displayName = "PickersArrowSwitcher");
function lP(e, {
  disableFuture: t,
  maxDate: n,
  timezone: r
}) {
  const s = He();
  return x.useMemo(() => {
    const i = s.date(void 0, r), a = s.startOfMonth(t && s.isBefore(i, n) ? i : n);
    return !s.isAfter(a, e);
  }, [t, n, e, s, r]);
}
function cP(e, {
  disablePast: t,
  minDate: n,
  timezone: r
}) {
  const s = He();
  return x.useMemo(() => {
    const i = s.date(void 0, r), a = s.startOfMonth(t && s.isAfter(i, n) ? i : n);
    return !s.isBefore(a, e);
  }, [t, n, e, s, r]);
}
const uP = ["slots", "slotProps", "currentMonth", "disabled", "disableFuture", "disablePast", "maxDate", "minDate", "onMonthChange", "onViewChange", "view", "reduceAnimations", "views", "labelId", "className", "classes", "timezone", "format"], dP = ["ownerState"], fP = (e) => be({
  root: ["root"],
  labelContainer: ["labelContainer"],
  label: ["label"],
  switchViewButton: ["switchViewButton"],
  switchViewIcon: ["switchViewIcon"]
}, JC, e), pP = Q("div", {
  name: "MuiPickersCalendarHeader",
  slot: "Root"
})({
  display: "flex",
  alignItems: "center",
  marginTop: 12,
  marginBottom: 4,
  paddingLeft: 24,
  paddingRight: 12,
  // prevent jumping in safari
  maxHeight: 40,
  minHeight: 40
}), hP = Q("div", {
  name: "MuiPickersCalendarHeader",
  slot: "LabelContainer"
})(({
  theme: e
}) => j({
  display: "flex",
  overflow: "hidden",
  alignItems: "center",
  cursor: "pointer",
  marginRight: "auto"
}, e.typography.body1, {
  fontWeight: e.typography.fontWeightMedium
})), mP = Q("div", {
  name: "MuiPickersCalendarHeader",
  slot: "Label"
})({
  marginRight: 6
}), yP = Q(Fo, {
  name: "MuiPickersCalendarHeader",
  slot: "SwitchViewButton"
})({
  marginRight: "auto",
  variants: [{
    props: {
      view: "year"
    },
    style: {
      [`.${eP.switchViewIcon}`]: {
        transform: "rotate(180deg)"
      }
    }
  }]
}), gP = Q(iO, {
  name: "MuiPickersCalendarHeader",
  slot: "SwitchViewIcon"
})(({
  theme: e
}) => ({
  willChange: "transform",
  transition: e.transitions.create("transform"),
  transform: "rotate(0deg)"
})), Jl = /* @__PURE__ */ x.forwardRef(function(t, n) {
  const r = Ln(), s = He(), i = Ze({
    props: t,
    name: "MuiPickersCalendarHeader"
  }), {
    slots: a,
    slotProps: l,
    currentMonth: c,
    disabled: u,
    disableFuture: d,
    disablePast: f,
    maxDate: y,
    minDate: g,
    onMonthChange: h,
    onViewChange: p,
    view: m,
    reduceAnimations: b,
    views: C,
    labelId: O,
    className: w,
    classes: S,
    timezone: P,
    format: M = `${s.formats.month} ${s.formats.year}`
  } = i, F = Ee(i, uP), {
    ownerState: A
  } = gt(), $ = fP(S), k = a?.switchViewButton ?? yP, v = Ie({
    elementType: k,
    externalSlotProps: l?.switchViewButton,
    additionalProps: {
      size: "small",
      "aria-label": r.calendarViewSwitchingButtonAriaLabel(m)
    },
    ownerState: j({}, A, {
      view: m
    }),
    className: $.switchViewButton
  }), D = a?.switchViewIcon ?? gP, T = Ie({
    elementType: D,
    externalSlotProps: l?.switchViewIcon,
    ownerState: A,
    className: $.switchViewIcon
  }), I = Ee(T, dP), N = () => h(s.addMonths(c, 1)), _ = () => h(s.addMonths(c, -1)), G = lP(c, {
    disableFuture: d,
    maxDate: y,
    timezone: P
  }), L = cP(c, {
    disablePast: f,
    minDate: g,
    timezone: P
  }), V = () => {
    if (!(C.length === 1 || !p || u))
      if (C.length === 2)
        p(C.find((B) => B !== m) || C[0]);
      else {
        const B = C.indexOf(m) !== 0 ? 0 : 1;
        p(C[B]);
      }
  };
  if (C.length === 1 && C[0] === "year")
    return null;
  const R = s.formatByString(c, M);
  return /* @__PURE__ */ E.jsxs(pP, j({}, F, {
    ownerState: A,
    className: pe($.root, w),
    ref: n,
    children: [/* @__PURE__ */ E.jsxs(hP, {
      role: "presentation",
      onClick: V,
      ownerState: A,
      "aria-live": "polite",
      className: $.labelContainer,
      children: [/* @__PURE__ */ E.jsx(lh, {
        reduceAnimations: b,
        transKey: R,
        children: /* @__PURE__ */ E.jsx(mP, {
          id: O,
          ownerState: A,
          className: $.label,
          children: R
        })
      }), C.length > 1 && !u && /* @__PURE__ */ E.jsx(k, j({}, v, {
        children: /* @__PURE__ */ E.jsx(D, j({}, I))
      }))]
    }), /* @__PURE__ */ E.jsx(An, {
      in: m === "day",
      appear: !b,
      enter: !b,
      children: /* @__PURE__ */ E.jsx(bh, {
        slots: a,
        slotProps: l,
        onGoToPrevious: _,
        isPreviousDisabled: L,
        previousLabel: r.previousMonth,
        onGoToNext: N,
        isNextDisabled: G,
        nextLabel: r.nextMonth
      })
    })]
  }));
});
process.env.NODE_ENV !== "production" && (Jl.displayName = "PickersCalendarHeader");
process.env.NODE_ENV !== "production" && (Jl.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Override or extend the styles applied to the component.
   */
  classes: o.object,
  className: o.string,
  currentMonth: o.object.isRequired,
  disabled: o.bool,
  disableFuture: o.bool,
  disablePast: o.bool,
  /**
   * Format used to display the date.
   * @default `${adapter.formats.month} ${adapter.formats.year}`
   */
  format: o.string,
  /**
   * Id of the calendar text element.
   * It is used to establish an `aria-labelledby` relationship with the calendar `grid` element.
   */
  labelId: o.string,
  maxDate: o.object.isRequired,
  minDate: o.object.isRequired,
  onMonthChange: o.func.isRequired,
  onViewChange: o.func,
  reduceAnimations: o.bool.isRequired,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: o.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: o.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: o.oneOfType([o.arrayOf(o.oneOfType([o.func, o.object, o.bool])), o.func, o.object]),
  timezone: o.string.isRequired,
  view: o.oneOf(["day", "month", "year"]).isRequired,
  views: o.arrayOf(o.oneOf(["day", "month", "year"]).isRequired).isRequired
});
const bP = Q("div")({
  overflow: "hidden",
  width: Si,
  maxHeight: $l,
  display: "flex",
  flexDirection: "column",
  margin: "0 auto"
}), vP = (e) => we("MuiDateCalendar", e);
xe("MuiDateCalendar", ["root", "viewTransitionContainer"]);
const xP = ["autoFocus", "onViewChange", "value", "defaultValue", "referenceDate", "disableFuture", "disablePast", "onChange", "onYearChange", "onMonthChange", "reduceAnimations", "shouldDisableDate", "shouldDisableMonth", "shouldDisableYear", "view", "views", "openTo", "className", "classes", "disabled", "readOnly", "minDate", "maxDate", "disableHighlightToday", "focusedView", "onFocusedViewChange", "showDaysOutsideCurrentMonth", "fixedWeekNumber", "dayOfWeekFormatter", "slots", "slotProps", "loading", "renderLoading", "displayWeekNumber", "yearsOrder", "yearsPerRow", "monthsPerRow", "timezone"], wP = (e) => be({
  root: ["root"],
  viewTransitionContainer: ["viewTransitionContainer"]
}, vP, e);
function SP(e, t) {
  const n = Ze({
    props: e,
    name: t
  }), r = bp(n.reduceAnimations), s = Go(n);
  return j({}, n, s, {
    loading: n.loading ?? !1,
    openTo: n.openTo ?? "day",
    views: n.views ?? ["year", "day"],
    reduceAnimations: r,
    renderLoading: n.renderLoading ?? (() => /* @__PURE__ */ E.jsx("span", {
      children: "..."
    }))
  });
}
const EP = Q(bP, {
  name: "MuiDateCalendar",
  slot: "Root"
})({
  display: "flex",
  flexDirection: "column",
  height: $l
}), OP = Q(lh, {
  name: "MuiDateCalendar",
  slot: "ViewTransitionContainer"
})({}), ec = /* @__PURE__ */ x.forwardRef(function(t, n) {
  const r = He(), {
    ownerState: s
  } = gt(), i = _n(), a = SP(t, "MuiDateCalendar"), {
    autoFocus: l,
    onViewChange: c,
    value: u,
    defaultValue: d,
    referenceDate: f,
    disableFuture: y,
    disablePast: g,
    onChange: h,
    onMonthChange: p,
    reduceAnimations: m,
    shouldDisableDate: b,
    shouldDisableMonth: C,
    shouldDisableYear: O,
    view: w,
    views: S,
    openTo: P,
    className: M,
    classes: F,
    disabled: A,
    readOnly: $,
    minDate: k,
    maxDate: v,
    disableHighlightToday: D,
    focusedView: T,
    onFocusedViewChange: I,
    showDaysOutsideCurrentMonth: N,
    fixedWeekNumber: _,
    dayOfWeekFormatter: G,
    slots: L,
    slotProps: V,
    loading: R,
    renderLoading: B,
    displayWeekNumber: H,
    yearsOrder: K,
    yearsPerRow: te,
    monthsPerRow: ee,
    timezone: J
  } = a, ie = Ee(a, xP), {
    value: re,
    handleValueChange: q,
    timezone: X
  } = ns({
    name: "DateCalendar",
    timezone: J,
    value: u,
    defaultValue: d,
    referenceDate: f,
    onChange: h,
    valueManager: ln
  }), {
    view: z,
    setView: ne,
    focusedView: Y,
    setFocusedView: ae,
    goToNextView: W,
    setValueAndGoToNextView: oe
  } = xp({
    view: w,
    views: S,
    openTo: P,
    onChange: q,
    onViewChange: c,
    autoFocus: l,
    focusedView: T,
    onFocusedViewChange: I
  }), {
    referenceDate: ye,
    calendarState: ge,
    setVisibleDate: se,
    isDateDisabled: ce,
    onMonthSwitchingAnimationEnd: ue
  } = lC({
    value: re,
    referenceDate: f,
    reduceAnimations: m,
    onMonthChange: p,
    minDate: k,
    maxDate: v,
    shouldDisableDate: b,
    disablePast: g,
    disableFuture: y,
    timezone: X,
    getCurrentMonthFromVisibleDate: (fe, Re) => r.isSameMonth(fe, Re) ? Re : r.startOfMonth(fe)
  }), ke = A && re || k, Te = A && re || v, Me = `${i}-grid-label`, _e = Y !== null, ft = L?.calendarHeader ?? Jl, ht = Ie({
    elementType: ft,
    externalSlotProps: V?.calendarHeader,
    additionalProps: {
      views: S,
      view: z,
      currentMonth: ge.currentMonth,
      onViewChange: ne,
      onMonthChange: (fe) => se({
        target: fe,
        reason: "header-navigation"
      }),
      minDate: ke,
      maxDate: Te,
      disabled: A,
      disablePast: g,
      disableFuture: y,
      reduceAnimations: m,
      timezone: X,
      labelId: Me
    },
    ownerState: s
  }), Se = de((fe) => {
    const Re = r.startOfMonth(fe), et = r.endOfMonth(fe), Ot = ce(fe) ? Ro({
      adapter: r,
      date: fe,
      minDate: r.isBefore(k, Re) ? Re : k,
      maxDate: r.isAfter(v, et) ? et : v,
      disablePast: g,
      disableFuture: y,
      isDateDisabled: ce,
      timezone: X
    }) : fe;
    Ot ? (oe(Ot, "finish"), se({
      target: Ot,
      reason: "cell-interaction"
    })) : (W(), se({
      target: Re,
      reason: "cell-interaction"
    }));
  }), Oe = de((fe) => {
    const Re = r.startOfYear(fe), et = r.endOfYear(fe), Ot = ce(fe) ? Ro({
      adapter: r,
      date: fe,
      minDate: r.isBefore(k, Re) ? Re : k,
      maxDate: r.isAfter(v, et) ? et : v,
      disablePast: g,
      disableFuture: y,
      isDateDisabled: ce,
      timezone: X
    }) : fe;
    Ot ? (oe(Ot, "finish"), se({
      target: Ot,
      reason: "cell-interaction"
    })) : (W(), se({
      target: Re,
      reason: "cell-interaction"
    }));
  }), me = de((fe) => q(fe && Ls(r, fe, re ?? ye), "finish", z));
  x.useEffect(() => {
    r.isValid(re) && se({
      target: re,
      reason: "controlled-value-change"
    });
  }, [re]);
  const Ve = wP(F), Ye = {
    disablePast: g,
    disableFuture: y,
    maxDate: v,
    minDate: k
  }, ct = {
    disableHighlightToday: D,
    readOnly: $,
    disabled: A,
    timezone: X,
    gridLabelId: Me,
    slots: L,
    slotProps: V
  }, Je = x.useRef(z);
  x.useEffect(() => {
    Je.current !== z && (Y === Je.current && ae(z, !0), Je.current = z);
  }, [Y, ae, z]);
  const he = x.useMemo(() => [re], [re]);
  return /* @__PURE__ */ E.jsxs(EP, j({
    ref: n,
    className: pe(Ve.root, M),
    ownerState: s
  }, ie, {
    children: [/* @__PURE__ */ E.jsx(ft, j({}, ht, {
      slots: L,
      slotProps: V
    })), /* @__PURE__ */ E.jsx(OP, {
      reduceAnimations: m,
      className: Ve.viewTransitionContainer,
      transKey: z,
      ownerState: s,
      children: /* @__PURE__ */ E.jsxs("div", {
        children: [z === "year" && /* @__PURE__ */ E.jsx(Zl, j({}, Ye, ct, {
          value: re,
          onChange: Oe,
          shouldDisableYear: O,
          hasFocus: _e,
          onFocusedViewChange: (fe) => ae("year", fe),
          yearsOrder: K,
          yearsPerRow: te,
          referenceDate: ye
        })), z === "month" && /* @__PURE__ */ E.jsx(Ql, j({}, Ye, ct, {
          currentMonth: ge.currentMonth,
          hasFocus: _e,
          className: M,
          value: re,
          onChange: Se,
          shouldDisableMonth: C,
          onFocusedViewChange: (fe) => ae("month", fe),
          monthsPerRow: ee,
          referenceDate: ye
        })), z === "day" && /* @__PURE__ */ E.jsx(jC, j({}, ge, Ye, ct, {
          onMonthSwitchingAnimationEnd: ue,
          hasFocus: _e,
          onFocusedDayChange: (fe) => se({
            target: fe,
            reason: "cell-interaction"
          }),
          reduceAnimations: m,
          selectedDays: he,
          onSelectedDaysChange: me,
          shouldDisableDate: b,
          shouldDisableMonth: C,
          shouldDisableYear: O,
          onFocusedViewChange: (fe) => ae("day", fe),
          showDaysOutsideCurrentMonth: N,
          fixedWeekNumber: _,
          dayOfWeekFormatter: G,
          displayWeekNumber: H,
          loading: R,
          renderLoading: B
        }))]
      })
    })]
  }));
});
process.env.NODE_ENV !== "production" && (ec.displayName = "DateCalendar");
process.env.NODE_ENV !== "production" && (ec.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * If `true`, the main element is focused during the first mount.
   * This main element is:
   * - the element chosen by the visible view if any (i.e: the selected day on the `day` view).
   * - the `input` element if there is a field rendered.
   */
  autoFocus: o.bool,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: o.object,
  className: o.string,
  /**
   * Formats the day of week displayed in the calendar header.
   * @param {PickerValidDate} date The date of the day of week provided by the adapter.
   * @returns {string} The name to display.
   * @default (date: PickerValidDate) => adapter.format(date, 'weekdayShort').charAt(0).toUpperCase()
   */
  dayOfWeekFormatter: o.func,
  /**
   * The default selected value.
   * Used when the component is not controlled.
   */
  defaultValue: o.object,
  /**
   * If `true`, the component is disabled.
   * When disabled, the value cannot be changed and no interaction is possible.
   * @default false
   */
  disabled: o.bool,
  /**
   * If `true`, disable values after the current date for date components, time for time components and both for date time components.
   * @default false
   */
  disableFuture: o.bool,
  /**
   * If `true`, today's date is rendering without highlighting with circle.
   * @default false
   */
  disableHighlightToday: o.bool,
  /**
   * If `true`, disable values before the current date for date components, time for time components and both for date time components.
   * @default false
   */
  disablePast: o.bool,
  /**
   * If `true`, the week number will be display in the calendar.
   */
  displayWeekNumber: o.bool,
  /**
   * The day view will show as many weeks as needed after the end of the current month to match this value.
   * Put it to 6 to have a fixed number of weeks in Gregorian calendars
   */
  fixedWeekNumber: o.number,
  /**
   * Controlled focused view.
   */
  focusedView: o.oneOf(["day", "month", "year"]),
  /**
   * If `true`, calls `renderLoading` instead of rendering the day calendar.
   * Can be used to preload information and show it in calendar.
   * @default false
   */
  loading: o.bool,
  /**
   * Maximal selectable date.
   * @default 2099-12-31
   */
  maxDate: o.object,
  /**
   * Minimal selectable date.
   * @default 1900-01-01
   */
  minDate: o.object,
  /**
   * Months rendered per row.
   * @default 3
   */
  monthsPerRow: o.oneOf([3, 4]),
  /**
   * Callback fired when the value changes.
   * @template TValue The value type. It will be the same type as `value` or `null`. It can be in `[start, end]` format in case of range value.
   * @template TView The view type. Will be one of date or time views.
   * @param {TValue} value The new value.
   * @param {PickerSelectionState | undefined} selectionState Indicates if the date selection is complete.
   * @param {TView | undefined} selectedView Indicates the view in which the selection has been made.
   */
  onChange: o.func,
  /**
   * Callback fired on focused view change.
   * @template TView Type of the view. It will vary based on the Picker type and the `views` it uses.
   * @param {TView} view The new view to focus or not.
   * @param {boolean} hasFocus `true` if the view should be focused.
   */
  onFocusedViewChange: o.func,
  /**
   * Callback fired on month change.
   * @param {PickerValidDate} month The new month.
   */
  onMonthChange: o.func,
  /**
   * Callback fired on view change.
   * @template TView Type of the view. It will vary based on the Picker type and the `views` it uses.
   * @param {TView} view The new view.
   */
  onViewChange: o.func,
  /**
   * Callback fired on year change.
   * @param {PickerValidDate} year The new year.
   */
  onYearChange: o.func,
  /**
   * The default visible view.
   * Used when the component view is not controlled.
   * Must be a valid option from `views` list.
   */
  openTo: o.oneOf(["day", "month", "year"]),
  /**
   * If `true`, the component is read-only.
   * When read-only, the value cannot be changed but the user can interact with the interface.
   * @default false
   */
  readOnly: o.bool,
  /**
   * If `true`, disable heavy animations.
   * @default `@media(prefers-reduced-motion: reduce)` || `navigator.userAgent` matches Android <10 or iOS <13
   */
  reduceAnimations: o.bool,
  /**
   * The date used to generate the new value when both `value` and `defaultValue` are empty.
   * @default The closest valid date using the validation props, except callbacks such as `shouldDisableDate`.
   */
  referenceDate: o.object,
  /**
   * Component displaying when passed `loading` true.
   * @returns {React.ReactNode} The node to render when loading.
   * @default () => <span>...</span>
   */
  renderLoading: o.func,
  /**
   * Disable specific date.
   *
   * Warning: This function can be called multiple times (for example when rendering date calendar, checking if focus can be moved to a certain date, etc.). Expensive computations can impact performance.
   *
   * @param {PickerValidDate} day The date to test.
   * @returns {boolean} If `true` the date will be disabled.
   */
  shouldDisableDate: o.func,
  /**
   * Disable specific month.
   * @param {PickerValidDate} month The month to test.
   * @returns {boolean} If `true`, the month will be disabled.
   */
  shouldDisableMonth: o.func,
  /**
   * Disable specific year.
   * @param {PickerValidDate} year The year to test.
   * @returns {boolean} If `true`, the year will be disabled.
   */
  shouldDisableYear: o.func,
  /**
   * If `true`, days outside the current month are rendered:
   *
   * - if `fixedWeekNumber` is defined, renders days to have the weeks requested.
   *
   * - if `fixedWeekNumber` is not defined, renders day to fill the first and last week of the current month.
   *
   * - ignored if `calendars` equals more than `1` on range pickers.
   * @default false
   */
  showDaysOutsideCurrentMonth: o.bool,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: o.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: o.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: o.oneOfType([o.arrayOf(o.oneOfType([o.func, o.object, o.bool])), o.func, o.object]),
  /**
   * Choose which timezone to use for the value.
   * Example: "default", "system", "UTC", "America/New_York".
   * If you pass values from other timezones to some props, they will be converted to this timezone before being used.
   * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documentation} for more details.
   * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.
   */
  timezone: o.string,
  /**
   * The selected value.
   * Used when the component is controlled.
   */
  value: o.object,
  /**
   * The visible view.
   * Used when the component view is controlled.
   * Must be a valid option from `views` list.
   */
  view: o.oneOf(["day", "month", "year"]),
  /**
   * Available views.
   */
  views: o.arrayOf(o.oneOf(["day", "month", "year"]).isRequired),
  /**
   * Years are displayed in ascending (chronological) order by default.
   * If `desc`, years are displayed in descending order.
   * @default 'asc'
   */
  yearsOrder: o.oneOf(["asc", "desc"]),
  /**
   * Years rendered per row.
   * @default 3
   */
  yearsPerRow: o.oneOf([3, 4])
});
const or = ({
  view: e,
  onViewChange: t,
  views: n,
  focusedView: r,
  onFocusedViewChange: s,
  value: i,
  defaultValue: a,
  referenceDate: l,
  onChange: c,
  className: u,
  classes: d,
  disableFuture: f,
  disablePast: y,
  minDate: g,
  maxDate: h,
  shouldDisableDate: p,
  shouldDisableMonth: m,
  shouldDisableYear: b,
  reduceAnimations: C,
  onMonthChange: O,
  monthsPerRow: w,
  onYearChange: S,
  yearsOrder: P,
  yearsPerRow: M,
  slots: F,
  slotProps: A,
  loading: $,
  renderLoading: k,
  disableHighlightToday: v,
  readOnly: D,
  disabled: T,
  showDaysOutsideCurrentMonth: I,
  dayOfWeekFormatter: N,
  sx: _,
  autoFocus: G,
  fixedWeekNumber: L,
  displayWeekNumber: V,
  timezone: R
}) => /* @__PURE__ */ E.jsx(ec, {
  view: e,
  onViewChange: t,
  views: n.filter(iu),
  focusedView: r && iu(r) ? r : null,
  onFocusedViewChange: s,
  value: i,
  defaultValue: a,
  referenceDate: l,
  onChange: c,
  className: u,
  classes: d,
  disableFuture: f,
  disablePast: y,
  minDate: g,
  maxDate: h,
  shouldDisableDate: p,
  shouldDisableMonth: m,
  shouldDisableYear: b,
  reduceAnimations: C,
  onMonthChange: O,
  monthsPerRow: w,
  onYearChange: S,
  yearsOrder: P,
  yearsPerRow: M,
  slots: F,
  slotProps: A,
  loading: $,
  renderLoading: k,
  disableHighlightToday: v,
  readOnly: D,
  disabled: T,
  showDaysOutsideCurrentMonth: I,
  dayOfWeekFormatter: N,
  sx: _,
  autoFocus: G,
  fixedWeekNumber: L,
  displayWeekNumber: V,
  timezone: R
});
process.env.NODE_ENV !== "production" && (or.displayName = "renderDateViewCalendar");
const tc = /* @__PURE__ */ x.forwardRef(function(t, n) {
  const r = He(), s = Kf(t, "MuiDesktopDatePicker"), i = j({
    day: or,
    month: or,
    year: or
  }, s.viewRenderers), a = j({}, s, {
    closeOnSelect: s.closeOnSelect ?? !0,
    viewRenderers: i,
    format: ul(r, s, !1),
    yearsPerRow: s.yearsPerRow ?? 4,
    slots: j({
      field: Vi
    }, s.slots),
    slotProps: j({}, s.slotProps, {
      field: (c) => j({}, $t(s.slotProps?.field, c), qf(s)),
      toolbar: j({
        hidden: !0
      }, s.slotProps?.toolbar)
    })
  }), {
    renderPicker: l
  } = mS({
    ref: n,
    props: a,
    valueManager: ln,
    valueType: "date",
    validator: Ko,
    steps: null
  });
  return l();
});
process.env.NODE_ENV !== "production" && (tc.displayName = "DesktopDatePicker");
tc.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * If `true`, the main element is focused during the first mount.
   * This main element is:
   * - the element chosen by the visible view if any (i.e: the selected day on the `day` view).
   * - the `input` element if there is a field rendered.
   */
  autoFocus: o.bool,
  className: o.string,
  /**
   * If `true`, the Picker will close after submitting the full date.
   * @default true
   */
  closeOnSelect: o.bool,
  /**
   * Formats the day of week displayed in the calendar header.
   * @param {PickerValidDate} date The date of the day of week provided by the adapter.
   * @returns {string} The name to display.
   * @default (date: PickerValidDate) => adapter.format(date, 'weekdayShort').charAt(0).toUpperCase()
   */
  dayOfWeekFormatter: o.func,
  /**
   * The default value.
   * Used when the component is not controlled.
   */
  defaultValue: o.object,
  /**
   * If `true`, the component is disabled.
   * When disabled, the value cannot be changed and no interaction is possible.
   * @default false
   */
  disabled: o.bool,
  /**
   * If `true`, disable values after the current date for date components, time for time components and both for date time components.
   * @default false
   */
  disableFuture: o.bool,
  /**
   * If `true`, today's date is rendering without highlighting with circle.
   * @default false
   */
  disableHighlightToday: o.bool,
  /**
   * If `true`, the button to open the Picker will not be rendered (it will only render the field).
   * @deprecated Use the [field component](https://mui.com/x/react-date-pickers/fields/) instead.
   * @default false
   */
  disableOpenPicker: o.bool,
  /**
   * If `true`, disable values before the current date for date components, time for time components and both for date time components.
   * @default false
   */
  disablePast: o.bool,
  /**
   * If `true`, the week number will be display in the calendar.
   */
  displayWeekNumber: o.bool,
  /**
   * @default true
   */
  enableAccessibleFieldDOMStructure: o.any,
  /**
   * The day view will show as many weeks as needed after the end of the current month to match this value.
   * Put it to 6 to have a fixed number of weeks in Gregorian calendars
   */
  fixedWeekNumber: o.number,
  /**
   * Format of the date when rendered in the input(s).
   * Defaults to localized format based on the used `views`.
   */
  format: o.string,
  /**
   * Density of the format when rendered in the input.
   * Setting `formatDensity` to `"spacious"` will add a space before and after each `/`, `-` and `.` character.
   * @default "dense"
   */
  formatDensity: o.oneOf(["dense", "spacious"]),
  /**
   * Pass a ref to the `input` element.
   */
  inputRef: lt,
  /**
   * The label content.
   */
  label: o.node,
  /**
   * If `true`, calls `renderLoading` instead of rendering the day calendar.
   * Can be used to preload information and show it in calendar.
   * @default false
   */
  loading: o.bool,
  /**
   * Locale for components texts.
   * Allows overriding texts coming from `LocalizationProvider` and `theme`.
   */
  localeText: o.object,
  /**
   * Maximal selectable date.
   * @default 2099-12-31
   */
  maxDate: o.object,
  /**
   * Minimal selectable date.
   * @default 1900-01-01
   */
  minDate: o.object,
  /**
   * Months rendered per row.
   * @default 3
   */
  monthsPerRow: o.oneOf([3, 4]),
  /**
   * Name attribute used by the `input` element in the Field.
   */
  name: o.string,
  /**
   * Callback fired when the value is accepted.
   * @template TValue The value type. It will be the same type as `value` or `null`. It can be in `[start, end]` format in case of range value.
   * @template TError The validation error type. It will be either `string` or a `null`. It can be in `[start, end]` format in case of range value.
   * @param {TValue} value The value that was just accepted.
   * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.
   */
  onAccept: o.func,
  /**
   * Callback fired when the value changes.
   * @template TValue The value type. It will be the same type as `value` or `null`. It can be in `[start, end]` format in case of range value.
   * @template TError The validation error type. It will be either `string` or a `null`. It can be in `[start, end]` format in case of range value.
   * @param {TValue} value The new value.
   * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.
   */
  onChange: o.func,
  /**
   * Callback fired when the popup requests to be closed.
   * Use in controlled mode (see `open`).
   */
  onClose: o.func,
  /**
   * Callback fired when the error associated with the current value changes.
   * When a validation error is detected, the `error` parameter contains a non-null value.
   * This can be used to render an appropriate form error.
   * @template TError The validation error type. It will be either `string` or a `null`. It can be in `[start, end]` format in case of range value.
   * @template TValue The value type. It will be the same type as `value` or `null`. It can be in `[start, end]` format in case of range value.
   * @param {TError} error The reason why the current value is not valid.
   * @param {TValue} value The value associated with the error.
   */
  onError: o.func,
  /**
   * Callback fired on month change.
   * @param {PickerValidDate} month The new month.
   */
  onMonthChange: o.func,
  /**
   * Callback fired when the popup requests to be opened.
   * Use in controlled mode (see `open`).
   */
  onOpen: o.func,
  /**
   * Callback fired when the selected sections change.
   * @param {FieldSelectedSections} newValue The new selected sections.
   */
  onSelectedSectionsChange: o.func,
  /**
   * Callback fired on view change.
   * @template TView Type of the view. It will vary based on the Picker type and the `views` it uses.
   * @param {TView} view The new view.
   */
  onViewChange: o.func,
  /**
   * Callback fired on year change.
   * @param {PickerValidDate} year The new year.
   */
  onYearChange: o.func,
  /**
   * Control the popup or dialog open state.
   * @default false
   */
  open: o.bool,
  /**
   * The default visible view.
   * Used when the component view is not controlled.
   * Must be a valid option from `views` list.
   */
  openTo: o.oneOf(["day", "month", "year"]),
  /**
   * Force rendering in particular orientation.
   */
  orientation: o.oneOf(["landscape", "portrait"]),
  /**
   * If `true`, the component is read-only.
   * When read-only, the value cannot be changed but the user can interact with the interface.
   * @default false
   */
  readOnly: o.bool,
  /**
   * If `true`, disable heavy animations.
   * @default `@media(prefers-reduced-motion: reduce)` || `navigator.userAgent` matches Android <10 or iOS <13
   */
  reduceAnimations: o.bool,
  /**
   * The date used to generate the new value when both `value` and `defaultValue` are empty.
   * @default The closest valid date-time using the validation props, except callbacks like `shouldDisable<...>`.
   */
  referenceDate: o.object,
  /**
   * Component displaying when passed `loading` true.
   * @returns {React.ReactNode} The node to render when loading.
   * @default () => <span>...</span>
   */
  renderLoading: o.func,
  /**
   * The currently selected sections.
   * This prop accepts four formats:
   * 1. If a number is provided, the section at this index will be selected.
   * 2. If a string of type `FieldSectionType` is provided, the first section with that name will be selected.
   * 3. If `"all"` is provided, all the sections will be selected.
   * 4. If `null` is provided, no section will be selected.
   * If not provided, the selected sections will be handled internally.
   */
  selectedSections: o.oneOfType([o.oneOf(["all", "day", "empty", "hours", "meridiem", "minutes", "month", "seconds", "weekDay", "year"]), o.number]),
  /**
   * Disable specific date.
   *
   * Warning: This function can be called multiple times (for example when rendering date calendar, checking if focus can be moved to a certain date, etc.). Expensive computations can impact performance.
   *
   * @param {PickerValidDate} day The date to test.
   * @returns {boolean} If `true` the date will be disabled.
   */
  shouldDisableDate: o.func,
  /**
   * Disable specific month.
   * @param {PickerValidDate} month The month to test.
   * @returns {boolean} If `true`, the month will be disabled.
   */
  shouldDisableMonth: o.func,
  /**
   * Disable specific year.
   * @param {PickerValidDate} year The year to test.
   * @returns {boolean} If `true`, the year will be disabled.
   */
  shouldDisableYear: o.func,
  /**
   * If `true`, days outside the current month are rendered:
   *
   * - if `fixedWeekNumber` is defined, renders days to have the weeks requested.
   *
   * - if `fixedWeekNumber` is not defined, renders day to fill the first and last week of the current month.
   *
   * - ignored if `calendars` equals more than `1` on range pickers.
   * @default false
   */
  showDaysOutsideCurrentMonth: o.bool,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: o.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: o.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: o.oneOfType([o.arrayOf(o.oneOfType([o.func, o.object, o.bool])), o.func, o.object]),
  /**
   * Choose which timezone to use for the value.
   * Example: "default", "system", "UTC", "America/New_York".
   * If you pass values from other timezones to some props, they will be converted to this timezone before being used.
   * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documentation} for more details.
   * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.
   */
  timezone: o.string,
  /**
   * The selected value.
   * Used when the component is controlled.
   */
  value: o.object,
  /**
   * The visible view.
   * Used when the component view is controlled.
   * Must be a valid option from `views` list.
   */
  view: o.oneOf(["day", "month", "year"]),
  /**
   * Define custom view renderers for each section.
   * If `null`, the section will only have field editing.
   * If `undefined`, internally defined view will be used.
   */
  viewRenderers: o.shape({
    day: o.func,
    month: o.func,
    year: o.func
  }),
  /**
   * Available views.
   */
  views: o.arrayOf(o.oneOf(["day", "month", "year"]).isRequired),
  /**
   * Years are displayed in ascending (chronological) order by default.
   * If `desc`, years are displayed in descending order.
   * @default 'asc'
   */
  yearsOrder: o.oneOf(["asc", "desc"]),
  /**
   * Years rendered per row.
   * @default 4
   */
  yearsPerRow: o.oneOf([3, 4])
};
function CP(e) {
  return we("MuiDialogContent", e);
}
xe("MuiDialogContent", ["root", "dividers"]);
const PP = xe("MuiDialogTitle", ["root"]), TP = (e) => {
  const {
    classes: t,
    dividers: n
  } = e;
  return be({
    root: ["root", n && "dividers"]
  }, CP, t);
}, RP = Q("div", {
  name: "MuiDialogContent",
  slot: "Root",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e;
    return [t.root, n.dividers && t.dividers];
  }
})(qe(({
  theme: e
}) => ({
  flex: "1 1 auto",
  // Add iOS momentum scrolling for iOS < 13.0
  WebkitOverflowScrolling: "touch",
  overflowY: "auto",
  padding: "20px 24px",
  variants: [{
    props: ({
      ownerState: t
    }) => t.dividers,
    style: {
      padding: "16px 24px",
      borderTop: `1px solid ${(e.vars || e).palette.divider}`,
      borderBottom: `1px solid ${(e.vars || e).palette.divider}`
    }
  }, {
    props: ({
      ownerState: t
    }) => !t.dividers,
    style: {
      [`.${PP.root} + &`]: {
        paddingTop: 0
      }
    }
  }]
}))), vh = /* @__PURE__ */ x.forwardRef(function(t, n) {
  const r = Ae({
    props: t,
    name: "MuiDialogContent"
  }), {
    className: s,
    dividers: i = !1,
    ...a
  } = r, l = {
    ...r,
    dividers: i
  }, c = TP(l);
  return /* @__PURE__ */ E.jsx(RP, {
    className: pe(c.root, s),
    ownerState: l,
    ref: n,
    ...a
  });
});
process.env.NODE_ENV !== "production" && (vh.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: o.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: o.object,
  /**
   * @ignore
   */
  className: o.string,
  /**
   * Display the top and bottom dividers.
   * @default false
   */
  dividers: o.bool,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: o.oneOfType([o.arrayOf(o.oneOfType([o.func, o.object, o.bool])), o.func, o.object])
});
function kP(e) {
  return we("MuiDialog", e);
}
const Co = xe("MuiDialog", ["root", "scrollPaper", "scrollBody", "container", "paper", "paperScrollPaper", "paperScrollBody", "paperWidthFalse", "paperWidthXs", "paperWidthSm", "paperWidthMd", "paperWidthLg", "paperWidthXl", "paperFullWidth", "paperFullScreen"]), xh = /* @__PURE__ */ x.createContext({});
process.env.NODE_ENV !== "production" && (xh.displayName = "DialogContext");
const DP = Q(Bl, {
  name: "MuiDialog",
  slot: "Backdrop",
  overrides: (e, t) => t.backdrop
})({
  // Improve scrollable dialog support.
  zIndex: -1
}), MP = (e) => {
  const {
    classes: t,
    scroll: n,
    maxWidth: r,
    fullWidth: s,
    fullScreen: i
  } = e, a = {
    root: ["root"],
    container: ["container", `scroll${le(n)}`],
    paper: ["paper", `paperScroll${le(n)}`, `paperWidth${le(String(r))}`, s && "paperFullWidth", i && "paperFullScreen"]
  };
  return be(a, kP, t);
}, IP = Q(Wl, {
  name: "MuiDialog",
  slot: "Root"
})({
  "@media print": {
    // Use !important to override the Modal inline-style.
    position: "absolute !important"
  }
}), NP = Q("div", {
  name: "MuiDialog",
  slot: "Container",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e;
    return [t.container, t[`scroll${le(n.scroll)}`]];
  }
})({
  height: "100%",
  "@media print": {
    height: "auto"
  },
  // We disable the focus ring for mouse, touch and keyboard users.
  outline: 0,
  variants: [{
    props: {
      scroll: "paper"
    },
    style: {
      display: "flex",
      justifyContent: "center",
      alignItems: "center"
    }
  }, {
    props: {
      scroll: "body"
    },
    style: {
      overflowY: "auto",
      overflowX: "hidden",
      textAlign: "center",
      "&::after": {
        content: '""',
        display: "inline-block",
        verticalAlign: "middle",
        height: "100%",
        width: "0"
      }
    }
  }]
}), AP = Q(Jo, {
  name: "MuiDialog",
  slot: "Paper",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e;
    return [t.paper, t[`scrollPaper${le(n.scroll)}`], t[`paperWidth${le(String(n.maxWidth))}`], n.fullWidth && t.paperFullWidth, n.fullScreen && t.paperFullScreen];
  }
})(qe(({
  theme: e
}) => ({
  margin: 32,
  position: "relative",
  overflowY: "auto",
  "@media print": {
    overflowY: "visible",
    boxShadow: "none"
  },
  variants: [{
    props: {
      scroll: "paper"
    },
    style: {
      display: "flex",
      flexDirection: "column",
      maxHeight: "calc(100% - 64px)"
    }
  }, {
    props: {
      scroll: "body"
    },
    style: {
      display: "inline-block",
      verticalAlign: "middle",
      textAlign: "initial"
    }
  }, {
    props: ({
      ownerState: t
    }) => !t.maxWidth,
    style: {
      maxWidth: "calc(100% - 64px)"
    }
  }, {
    props: {
      maxWidth: "xs"
    },
    style: {
      maxWidth: e.breakpoints.unit === "px" ? Math.max(e.breakpoints.values.xs, 444) : `max(${e.breakpoints.values.xs}${e.breakpoints.unit}, 444px)`,
      [`&.${Co.paperScrollBody}`]: {
        [e.breakpoints.down(Math.max(e.breakpoints.values.xs, 444) + 64)]: {
          maxWidth: "calc(100% - 64px)"
        }
      }
    }
  }, ...Object.keys(e.breakpoints.values).filter((t) => t !== "xs").map((t) => ({
    props: {
      maxWidth: t
    },
    style: {
      maxWidth: `${e.breakpoints.values[t]}${e.breakpoints.unit}`,
      [`&.${Co.paperScrollBody}`]: {
        [e.breakpoints.down(e.breakpoints.values[t] + 64)]: {
          maxWidth: "calc(100% - 64px)"
        }
      }
    }
  })), {
    props: ({
      ownerState: t
    }) => t.fullWidth,
    style: {
      width: "calc(100% - 64px)"
    }
  }, {
    props: ({
      ownerState: t
    }) => t.fullScreen,
    style: {
      margin: 0,
      width: "100%",
      maxWidth: "100%",
      height: "100%",
      maxHeight: "none",
      borderRadius: 0,
      [`&.${Co.paperScrollBody}`]: {
        margin: 0,
        maxWidth: "100%"
      }
    }
  }]
}))), wh = /* @__PURE__ */ x.forwardRef(function(t, n) {
  const r = Ae({
    props: t,
    name: "MuiDialog"
  }), s = zr(), i = {
    enter: s.transitions.duration.enteringScreen,
    exit: s.transitions.duration.leavingScreen
  }, {
    "aria-describedby": a,
    "aria-labelledby": l,
    "aria-modal": c = !0,
    BackdropComponent: u,
    BackdropProps: d,
    children: f,
    className: y,
    disableEscapeKeyDown: g = !1,
    fullScreen: h = !1,
    fullWidth: p = !1,
    maxWidth: m = "sm",
    onClick: b,
    onClose: C,
    open: O,
    PaperComponent: w = Jo,
    PaperProps: S = {},
    scroll: P = "paper",
    slots: M = {},
    slotProps: F = {},
    TransitionComponent: A = An,
    transitionDuration: $ = i,
    TransitionProps: k,
    ...v
  } = r, D = {
    ...r,
    disableEscapeKeyDown: g,
    fullScreen: h,
    fullWidth: p,
    maxWidth: m,
    scroll: P
  }, T = MP(D), I = x.useRef(), N = (ne) => {
    I.current = ne.target === ne.currentTarget;
  }, _ = (ne) => {
    b && b(ne), I.current && (I.current = null, C && C(ne, "backdropClick"));
  }, G = _n(l), L = x.useMemo(() => ({
    titleId: G
  }), [G]), V = {
    transition: A,
    ...M
  }, R = {
    transition: k,
    paper: S,
    backdrop: d,
    ...F
  }, B = {
    slots: V,
    slotProps: R
  }, [H, K] = Xe("root", {
    elementType: IP,
    shouldForwardComponentProp: !0,
    externalForwardedProps: B,
    ownerState: D,
    className: pe(T.root, y),
    ref: n
  }), [te, ee] = Xe("backdrop", {
    elementType: DP,
    shouldForwardComponentProp: !0,
    externalForwardedProps: B,
    ownerState: D
  }), [J, ie] = Xe("paper", {
    elementType: AP,
    shouldForwardComponentProp: !0,
    externalForwardedProps: B,
    ownerState: D,
    className: pe(T.paper, S.className)
  }), [re, q] = Xe("container", {
    elementType: NP,
    externalForwardedProps: B,
    ownerState: D,
    className: T.container
  }), [X, z] = Xe("transition", {
    elementType: An,
    externalForwardedProps: B,
    ownerState: D,
    additionalProps: {
      appear: !0,
      in: O,
      timeout: $,
      role: "presentation"
    }
  });
  return /* @__PURE__ */ E.jsx(H, {
    closeAfterTransition: !0,
    slots: {
      backdrop: te
    },
    slotProps: {
      backdrop: {
        transitionDuration: $,
        as: u,
        ...ee
      }
    },
    disableEscapeKeyDown: g,
    onClose: C,
    open: O,
    onClick: _,
    ...K,
    ...v,
    children: /* @__PURE__ */ E.jsx(X, {
      ...z,
      children: /* @__PURE__ */ E.jsx(re, {
        onMouseDown: N,
        ...q,
        children: /* @__PURE__ */ E.jsx(J, {
          as: w,
          elevation: 24,
          role: "dialog",
          "aria-describedby": a,
          "aria-labelledby": G,
          "aria-modal": c,
          ...ie,
          children: /* @__PURE__ */ E.jsx(xh.Provider, {
            value: L,
            children: f
          })
        })
      })
    })
  });
});
process.env.NODE_ENV !== "production" && (wh.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The id(s) of the element(s) that describe the dialog.
   */
  "aria-describedby": o.string,
  /**
   * The id(s) of the element(s) that label the dialog.
   */
  "aria-labelledby": o.string,
  /**
   * Informs assistive technologies that the element is modal.
   * It's added on the element with role="dialog".
   * @default true
   */
  "aria-modal": o.oneOfType([o.oneOf(["false", "true"]), o.bool]),
  /**
   * A backdrop component. This prop enables custom backdrop rendering.
   * @deprecated Use `slots.backdrop` instead. While this prop currently works, it will be removed in the next major version.
   * Use the `slots.backdrop` prop to make your application ready for the next version of Material UI.
   * @default styled(Backdrop, {
   *   name: 'MuiModal',
   *   slot: 'Backdrop',
   * })({
   *   zIndex: -1,
   * })
   */
  BackdropComponent: o.elementType,
  /**
   * @ignore
   */
  BackdropProps: o.object,
  /**
   * Dialog children, usually the included sub-components.
   */
  children: o.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: o.object,
  /**
   * @ignore
   */
  className: o.string,
  /**
   * If `true`, hitting escape will not fire the `onClose` callback.
   * @default false
   */
  disableEscapeKeyDown: o.bool,
  /**
   * If `true`, the dialog is full-screen.
   * @default false
   */
  fullScreen: o.bool,
  /**
   * If `true`, the dialog stretches to `maxWidth`.
   *
   * Notice that the dialog width grow is limited by the default margin.
   * @default false
   */
  fullWidth: o.bool,
  /**
   * Determine the max-width of the dialog.
   * The dialog width grows with the size of the screen.
   * Set to `false` to disable `maxWidth`.
   * @default 'sm'
   */
  maxWidth: o.oneOfType([o.oneOf(["xs", "sm", "md", "lg", "xl", !1]), o.string]),
  /**
   * @ignore
   */
  onClick: o.func,
  /**
   * Callback fired when the component requests to be closed.
   *
   * @param {object} event The event source of the callback.
   * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`.
   */
  onClose: o.func,
  /**
   * If `true`, the component is shown.
   */
  open: o.bool.isRequired,
  /**
   * The component used to render the body of the dialog.
   * @default Paper
   */
  PaperComponent: o.elementType,
  /**
   * Props applied to the [`Paper`](https://mui.com/material-ui/api/paper/) element.
   * @default {}
   * @deprecated Use `slotProps.paper` instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  PaperProps: o.object,
  /**
   * Determine the container for scrolling the dialog.
   * @default 'paper'
   */
  scroll: o.oneOf(["body", "paper"]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: o.shape({
    backdrop: o.oneOfType([o.func, o.object]),
    container: o.oneOfType([o.func, o.object]),
    paper: o.oneOfType([o.func, o.object]),
    root: o.oneOfType([o.func, o.object]),
    transition: o.oneOfType([o.func, o.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: o.shape({
    backdrop: o.elementType,
    container: o.elementType,
    paper: o.elementType,
    root: o.elementType,
    transition: o.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: o.oneOfType([o.arrayOf(o.oneOfType([o.func, o.object, o.bool])), o.func, o.object]),
  /**
   * The component used for the transition.
   * [Follow this guide](https://mui.com/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
   * @default Fade
   * @deprecated Use `slots.transition` instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  TransitionComponent: o.elementType,
  /**
   * The duration for the transition, in milliseconds.
   * You may specify a single timeout for all transitions, or individually with an object.
   * @default {
   *   enter: theme.transitions.duration.enteringScreen,
   *   exit: theme.transitions.duration.leavingScreen,
   * }
   */
  transitionDuration: o.oneOfType([o.number, o.shape({
    appear: o.number,
    enter: o.number,
    exit: o.number
  })]),
  /**
   * Props applied to the transition element.
   * By default, the element is based on this [`Transition`](https://reactcommunity.org/react-transition-group/transition/) component.
   * @deprecated Use `slotProps.transition` instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  TransitionProps: o.object
});
const FP = Q(wh)({
  [`& .${Co.container}`]: {
    outline: 0
  },
  [`& .${Co.paper}`]: {
    outline: 0,
    minWidth: Si
  }
}), $P = Q(vh)({
  "&:first-of-type": {
    padding: 0
  }
});
function jP(e) {
  const {
    children: t,
    slots: n,
    slotProps: r
  } = e, {
    open: s
  } = Ur(), {
    dismissViews: i,
    onPopperExited: a
  } = gt(), l = n?.dialog ?? FP, c = n?.mobileTransition ?? An;
  return /* @__PURE__ */ E.jsx(l, j({
    open: s,
    onClose: () => {
      i(), a?.();
    }
  }, r?.dialog, {
    TransitionComponent: c,
    TransitionProps: r?.mobileTransition,
    PaperComponent: n?.mobilePaper,
    PaperProps: r?.mobilePaper,
    children: /* @__PURE__ */ E.jsx($P, {
      children: t
    })
  }));
}
const _P = ["props", "steps"], VP = ["ownerState"], LP = (e) => {
  let {
    props: t,
    steps: n
  } = e, r = Ee(e, _P);
  const {
    slots: s,
    slotProps: i,
    label: a,
    inputRef: l,
    localeText: c
  } = t, u = Fp({
    steps: n
  }), {
    providerProps: d,
    renderCurrentView: f,
    ownerState: y
  } = wp(j({}, r, {
    props: t,
    localeText: c,
    autoFocusView: !0,
    viewContainerRole: "dialog",
    variant: "mobile",
    getStepNavigation: u
  })), g = d.privateContextValue.labelId, h = i?.toolbar?.hidden ?? !1, p = s.field, m = Ie({
    elementType: p,
    externalSlotProps: i?.field,
    additionalProps: j({}, h && {
      id: g
    }),
    ownerState: y
  }), b = Ee(m, VP), C = s.layout ?? Ei;
  let O = g;
  h && (a ? O = `${g}-label` : O = void 0);
  const w = j({}, i, {
    toolbar: j({}, i?.toolbar, {
      titleId: g
    }),
    mobilePaper: j({
      "aria-labelledby": O
    }, i?.mobilePaper)
  }), S = () => /* @__PURE__ */ E.jsxs(Lf, j({}, d, {
    children: [/* @__PURE__ */ E.jsx(p, j({}, b, {
      slots: s,
      slotProps: w,
      inputRef: l
    })), /* @__PURE__ */ E.jsx(jP, {
      slots: s,
      slotProps: w,
      children: /* @__PURE__ */ E.jsx(C, j({}, w?.layout, {
        slots: s,
        slotProps: w,
        children: f()
      }))
    })]
  }));
  return process.env.NODE_ENV !== "production" && (S.displayName = "renderPicker"), {
    renderPicker: S
  };
}, nc = /* @__PURE__ */ x.forwardRef(function(t, n) {
  const r = He(), s = Kf(t, "MuiMobileDatePicker"), i = j({
    day: or,
    month: or,
    year: or
  }, s.viewRenderers), a = j({}, s, {
    viewRenderers: i,
    format: ul(r, s, !1),
    slots: j({
      field: Vi
    }, s.slots),
    slotProps: j({}, s.slotProps, {
      field: (c) => j({}, $t(s.slotProps?.field, c), qf(s)),
      toolbar: j({
        hidden: !1
      }, s.slotProps?.toolbar)
    })
  }), {
    renderPicker: l
  } = LP({
    ref: n,
    props: a,
    valueManager: ln,
    valueType: "date",
    validator: Ko,
    steps: null
  });
  return l();
});
process.env.NODE_ENV !== "production" && (nc.displayName = "MobileDatePicker");
nc.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * If `true`, the main element is focused during the first mount.
   * This main element is:
   * - the element chosen by the visible view if any (i.e: the selected day on the `day` view).
   * - the `input` element if there is a field rendered.
   */
  autoFocus: o.bool,
  className: o.string,
  /**
   * If `true`, the Picker will close after submitting the full date.
   * @default false
   */
  closeOnSelect: o.bool,
  /**
   * Formats the day of week displayed in the calendar header.
   * @param {PickerValidDate} date The date of the day of week provided by the adapter.
   * @returns {string} The name to display.
   * @default (date: PickerValidDate) => adapter.format(date, 'weekdayShort').charAt(0).toUpperCase()
   */
  dayOfWeekFormatter: o.func,
  /**
   * The default value.
   * Used when the component is not controlled.
   */
  defaultValue: o.object,
  /**
   * If `true`, the component is disabled.
   * When disabled, the value cannot be changed and no interaction is possible.
   * @default false
   */
  disabled: o.bool,
  /**
   * If `true`, disable values after the current date for date components, time for time components and both for date time components.
   * @default false
   */
  disableFuture: o.bool,
  /**
   * If `true`, today's date is rendering without highlighting with circle.
   * @default false
   */
  disableHighlightToday: o.bool,
  /**
   * If `true`, the button to open the Picker will not be rendered (it will only render the field).
   * @deprecated Use the [field component](https://mui.com/x/react-date-pickers/fields/) instead.
   * @default false
   */
  disableOpenPicker: o.bool,
  /**
   * If `true`, disable values before the current date for date components, time for time components and both for date time components.
   * @default false
   */
  disablePast: o.bool,
  /**
   * If `true`, the week number will be display in the calendar.
   */
  displayWeekNumber: o.bool,
  /**
   * @default true
   */
  enableAccessibleFieldDOMStructure: o.any,
  /**
   * The day view will show as many weeks as needed after the end of the current month to match this value.
   * Put it to 6 to have a fixed number of weeks in Gregorian calendars
   */
  fixedWeekNumber: o.number,
  /**
   * Format of the date when rendered in the input(s).
   * Defaults to localized format based on the used `views`.
   */
  format: o.string,
  /**
   * Density of the format when rendered in the input.
   * Setting `formatDensity` to `"spacious"` will add a space before and after each `/`, `-` and `.` character.
   * @default "dense"
   */
  formatDensity: o.oneOf(["dense", "spacious"]),
  /**
   * Pass a ref to the `input` element.
   */
  inputRef: lt,
  /**
   * The label content.
   */
  label: o.node,
  /**
   * If `true`, calls `renderLoading` instead of rendering the day calendar.
   * Can be used to preload information and show it in calendar.
   * @default false
   */
  loading: o.bool,
  /**
   * Locale for components texts.
   * Allows overriding texts coming from `LocalizationProvider` and `theme`.
   */
  localeText: o.object,
  /**
   * Maximal selectable date.
   * @default 2099-12-31
   */
  maxDate: o.object,
  /**
   * Minimal selectable date.
   * @default 1900-01-01
   */
  minDate: o.object,
  /**
   * Months rendered per row.
   * @default 3
   */
  monthsPerRow: o.oneOf([3, 4]),
  /**
   * Name attribute used by the `input` element in the Field.
   */
  name: o.string,
  /**
   * Callback fired when the value is accepted.
   * @template TValue The value type. It will be the same type as `value` or `null`. It can be in `[start, end]` format in case of range value.
   * @template TError The validation error type. It will be either `string` or a `null`. It can be in `[start, end]` format in case of range value.
   * @param {TValue} value The value that was just accepted.
   * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.
   */
  onAccept: o.func,
  /**
   * Callback fired when the value changes.
   * @template TValue The value type. It will be the same type as `value` or `null`. It can be in `[start, end]` format in case of range value.
   * @template TError The validation error type. It will be either `string` or a `null`. It can be in `[start, end]` format in case of range value.
   * @param {TValue} value The new value.
   * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.
   */
  onChange: o.func,
  /**
   * Callback fired when the popup requests to be closed.
   * Use in controlled mode (see `open`).
   */
  onClose: o.func,
  /**
   * Callback fired when the error associated with the current value changes.
   * When a validation error is detected, the `error` parameter contains a non-null value.
   * This can be used to render an appropriate form error.
   * @template TError The validation error type. It will be either `string` or a `null`. It can be in `[start, end]` format in case of range value.
   * @template TValue The value type. It will be the same type as `value` or `null`. It can be in `[start, end]` format in case of range value.
   * @param {TError} error The reason why the current value is not valid.
   * @param {TValue} value The value associated with the error.
   */
  onError: o.func,
  /**
   * Callback fired on month change.
   * @param {PickerValidDate} month The new month.
   */
  onMonthChange: o.func,
  /**
   * Callback fired when the popup requests to be opened.
   * Use in controlled mode (see `open`).
   */
  onOpen: o.func,
  /**
   * Callback fired when the selected sections change.
   * @param {FieldSelectedSections} newValue The new selected sections.
   */
  onSelectedSectionsChange: o.func,
  /**
   * Callback fired on view change.
   * @template TView Type of the view. It will vary based on the Picker type and the `views` it uses.
   * @param {TView} view The new view.
   */
  onViewChange: o.func,
  /**
   * Callback fired on year change.
   * @param {PickerValidDate} year The new year.
   */
  onYearChange: o.func,
  /**
   * Control the popup or dialog open state.
   * @default false
   */
  open: o.bool,
  /**
   * The default visible view.
   * Used when the component view is not controlled.
   * Must be a valid option from `views` list.
   */
  openTo: o.oneOf(["day", "month", "year"]),
  /**
   * Force rendering in particular orientation.
   */
  orientation: o.oneOf(["landscape", "portrait"]),
  /**
   * If `true`, the component is read-only.
   * When read-only, the value cannot be changed but the user can interact with the interface.
   * @default false
   */
  readOnly: o.bool,
  /**
   * If `true`, disable heavy animations.
   * @default `@media(prefers-reduced-motion: reduce)` || `navigator.userAgent` matches Android <10 or iOS <13
   */
  reduceAnimations: o.bool,
  /**
   * The date used to generate the new value when both `value` and `defaultValue` are empty.
   * @default The closest valid date-time using the validation props, except callbacks like `shouldDisable<...>`.
   */
  referenceDate: o.object,
  /**
   * Component displaying when passed `loading` true.
   * @returns {React.ReactNode} The node to render when loading.
   * @default () => <span>...</span>
   */
  renderLoading: o.func,
  /**
   * The currently selected sections.
   * This prop accepts four formats:
   * 1. If a number is provided, the section at this index will be selected.
   * 2. If a string of type `FieldSectionType` is provided, the first section with that name will be selected.
   * 3. If `"all"` is provided, all the sections will be selected.
   * 4. If `null` is provided, no section will be selected.
   * If not provided, the selected sections will be handled internally.
   */
  selectedSections: o.oneOfType([o.oneOf(["all", "day", "empty", "hours", "meridiem", "minutes", "month", "seconds", "weekDay", "year"]), o.number]),
  /**
   * Disable specific date.
   *
   * Warning: This function can be called multiple times (for example when rendering date calendar, checking if focus can be moved to a certain date, etc.). Expensive computations can impact performance.
   *
   * @param {PickerValidDate} day The date to test.
   * @returns {boolean} If `true` the date will be disabled.
   */
  shouldDisableDate: o.func,
  /**
   * Disable specific month.
   * @param {PickerValidDate} month The month to test.
   * @returns {boolean} If `true`, the month will be disabled.
   */
  shouldDisableMonth: o.func,
  /**
   * Disable specific year.
   * @param {PickerValidDate} year The year to test.
   * @returns {boolean} If `true`, the year will be disabled.
   */
  shouldDisableYear: o.func,
  /**
   * If `true`, days outside the current month are rendered:
   *
   * - if `fixedWeekNumber` is defined, renders days to have the weeks requested.
   *
   * - if `fixedWeekNumber` is not defined, renders day to fill the first and last week of the current month.
   *
   * - ignored if `calendars` equals more than `1` on range pickers.
   * @default false
   */
  showDaysOutsideCurrentMonth: o.bool,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: o.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: o.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: o.oneOfType([o.arrayOf(o.oneOfType([o.func, o.object, o.bool])), o.func, o.object]),
  /**
   * Choose which timezone to use for the value.
   * Example: "default", "system", "UTC", "America/New_York".
   * If you pass values from other timezones to some props, they will be converted to this timezone before being used.
   * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documentation} for more details.
   * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.
   */
  timezone: o.string,
  /**
   * The selected value.
   * Used when the component is controlled.
   */
  value: o.object,
  /**
   * The visible view.
   * Used when the component view is controlled.
   * Must be a valid option from `views` list.
   */
  view: o.oneOf(["day", "month", "year"]),
  /**
   * Define custom view renderers for each section.
   * If `null`, the section will only have field editing.
   * If `undefined`, internally defined view will be used.
   */
  viewRenderers: o.shape({
    day: o.func,
    month: o.func,
    year: o.func
  }),
  /**
   * Available views.
   */
  views: o.arrayOf(o.oneOf(["day", "month", "year"]).isRequired),
  /**
   * Years are displayed in ascending (chronological) order by default.
   * If `desc`, years are displayed in descending order.
   * @default 'asc'
   */
  yearsOrder: o.oneOf(["asc", "desc"]),
  /**
   * Years rendered per row.
   * @default 3
   */
  yearsPerRow: o.oneOf([3, 4])
};
const BP = ["desktopModeMediaQuery"], rc = /* @__PURE__ */ x.forwardRef(function(t, n) {
  const r = Ze({
    props: t,
    name: "MuiDatePicker"
  }), {
    desktopModeMediaQuery: s = V0
  } = r, i = Ee(r, BP);
  return vf(s, {
    defaultMatches: !0
  }) ? /* @__PURE__ */ E.jsx(tc, j({
    ref: n
  }, i)) : /* @__PURE__ */ E.jsx(nc, j({
    ref: n
  }, i));
});
process.env.NODE_ENV !== "production" && (rc.displayName = "DatePicker");
process.env.NODE_ENV !== "production" && (rc.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * If `true`, the main element is focused during the first mount.
   * This main element is:
   * - the element chosen by the visible view if any (i.e: the selected day on the `day` view).
   * - the `input` element if there is a field rendered.
   */
  autoFocus: o.bool,
  className: o.string,
  /**
   * If `true`, the Picker will close after submitting the full date.
   * @default `true` for desktop, `false` for mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).
   */
  closeOnSelect: o.bool,
  /**
   * Formats the day of week displayed in the calendar header.
   * @param {PickerValidDate} date The date of the day of week provided by the adapter.
   * @returns {string} The name to display.
   * @default (date: PickerValidDate) => adapter.format(date, 'weekdayShort').charAt(0).toUpperCase()
   */
  dayOfWeekFormatter: o.func,
  /**
   * The default value.
   * Used when the component is not controlled.
   */
  defaultValue: o.object,
  /**
   * CSS media query when `Mobile` mode will be changed to `Desktop`.
   * @default '@media (pointer: fine)'
   * @example '@media (min-width: 720px)' or theme.breakpoints.up("sm")
   */
  desktopModeMediaQuery: o.string,
  /**
   * If `true`, the component is disabled.
   * When disabled, the value cannot be changed and no interaction is possible.
   * @default false
   */
  disabled: o.bool,
  /**
   * If `true`, disable values after the current date for date components, time for time components and both for date time components.
   * @default false
   */
  disableFuture: o.bool,
  /**
   * If `true`, today's date is rendering without highlighting with circle.
   * @default false
   */
  disableHighlightToday: o.bool,
  /**
   * If `true`, the button to open the Picker will not be rendered (it will only render the field).
   * @deprecated Use the [field component](https://mui.com/x/react-date-pickers/fields/) instead.
   * @default false
   */
  disableOpenPicker: o.bool,
  /**
   * If `true`, disable values before the current date for date components, time for time components and both for date time components.
   * @default false
   */
  disablePast: o.bool,
  /**
   * If `true`, the week number will be display in the calendar.
   */
  displayWeekNumber: o.bool,
  /**
   * @default true
   */
  enableAccessibleFieldDOMStructure: o.any,
  /**
   * The day view will show as many weeks as needed after the end of the current month to match this value.
   * Put it to 6 to have a fixed number of weeks in Gregorian calendars
   */
  fixedWeekNumber: o.number,
  /**
   * Format of the date when rendered in the input(s).
   * Defaults to localized format based on the used `views`.
   */
  format: o.string,
  /**
   * Density of the format when rendered in the input.
   * Setting `formatDensity` to `"spacious"` will add a space before and after each `/`, `-` and `.` character.
   * @default "dense"
   */
  formatDensity: o.oneOf(["dense", "spacious"]),
  /**
   * Pass a ref to the `input` element.
   */
  inputRef: lt,
  /**
   * The label content.
   */
  label: o.node,
  /**
   * If `true`, calls `renderLoading` instead of rendering the day calendar.
   * Can be used to preload information and show it in calendar.
   * @default false
   */
  loading: o.bool,
  /**
   * Locale for components texts.
   * Allows overriding texts coming from `LocalizationProvider` and `theme`.
   */
  localeText: o.object,
  /**
   * Maximal selectable date.
   * @default 2099-12-31
   */
  maxDate: o.object,
  /**
   * Minimal selectable date.
   * @default 1900-01-01
   */
  minDate: o.object,
  /**
   * Months rendered per row.
   * @default 3
   */
  monthsPerRow: o.oneOf([3, 4]),
  /**
   * Name attribute used by the `input` element in the Field.
   */
  name: o.string,
  /**
   * Callback fired when the value is accepted.
   * @template TValue The value type. It will be the same type as `value` or `null`. It can be in `[start, end]` format in case of range value.
   * @template TError The validation error type. It will be either `string` or a `null`. It can be in `[start, end]` format in case of range value.
   * @param {TValue} value The value that was just accepted.
   * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.
   */
  onAccept: o.func,
  /**
   * Callback fired when the value changes.
   * @template TValue The value type. It will be the same type as `value` or `null`. It can be in `[start, end]` format in case of range value.
   * @template TError The validation error type. It will be either `string` or a `null`. It can be in `[start, end]` format in case of range value.
   * @param {TValue} value The new value.
   * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.
   */
  onChange: o.func,
  /**
   * Callback fired when the popup requests to be closed.
   * Use in controlled mode (see `open`).
   */
  onClose: o.func,
  /**
   * Callback fired when the error associated with the current value changes.
   * When a validation error is detected, the `error` parameter contains a non-null value.
   * This can be used to render an appropriate form error.
   * @template TError The validation error type. It will be either `string` or a `null`. It can be in `[start, end]` format in case of range value.
   * @template TValue The value type. It will be the same type as `value` or `null`. It can be in `[start, end]` format in case of range value.
   * @param {TError} error The reason why the current value is not valid.
   * @param {TValue} value The value associated with the error.
   */
  onError: o.func,
  /**
   * Callback fired on month change.
   * @param {PickerValidDate} month The new month.
   */
  onMonthChange: o.func,
  /**
   * Callback fired when the popup requests to be opened.
   * Use in controlled mode (see `open`).
   */
  onOpen: o.func,
  /**
   * Callback fired when the selected sections change.
   * @param {FieldSelectedSections} newValue The new selected sections.
   */
  onSelectedSectionsChange: o.func,
  /**
   * Callback fired on view change.
   * @template TView Type of the view. It will vary based on the Picker type and the `views` it uses.
   * @param {TView} view The new view.
   */
  onViewChange: o.func,
  /**
   * Callback fired on year change.
   * @param {PickerValidDate} year The new year.
   */
  onYearChange: o.func,
  /**
   * Control the popup or dialog open state.
   * @default false
   */
  open: o.bool,
  /**
   * The default visible view.
   * Used when the component view is not controlled.
   * Must be a valid option from `views` list.
   */
  openTo: o.oneOf(["day", "month", "year"]),
  /**
   * Force rendering in particular orientation.
   */
  orientation: o.oneOf(["landscape", "portrait"]),
  /**
   * If `true`, the component is read-only.
   * When read-only, the value cannot be changed but the user can interact with the interface.
   * @default false
   */
  readOnly: o.bool,
  /**
   * If `true`, disable heavy animations.
   * @default `@media(prefers-reduced-motion: reduce)` || `navigator.userAgent` matches Android <10 or iOS <13
   */
  reduceAnimations: o.bool,
  /**
   * The date used to generate the new value when both `value` and `defaultValue` are empty.
   * @default The closest valid date-time using the validation props, except callbacks like `shouldDisable<...>`.
   */
  referenceDate: o.object,
  /**
   * Component displaying when passed `loading` true.
   * @returns {React.ReactNode} The node to render when loading.
   * @default () => <span>...</span>
   */
  renderLoading: o.func,
  /**
   * The currently selected sections.
   * This prop accepts four formats:
   * 1. If a number is provided, the section at this index will be selected.
   * 2. If a string of type `FieldSectionType` is provided, the first section with that name will be selected.
   * 3. If `"all"` is provided, all the sections will be selected.
   * 4. If `null` is provided, no section will be selected.
   * If not provided, the selected sections will be handled internally.
   */
  selectedSections: o.oneOfType([o.oneOf(["all", "day", "empty", "hours", "meridiem", "minutes", "month", "seconds", "weekDay", "year"]), o.number]),
  /**
   * Disable specific date.
   *
   * Warning: This function can be called multiple times (for example when rendering date calendar, checking if focus can be moved to a certain date, etc.). Expensive computations can impact performance.
   *
   * @param {PickerValidDate} day The date to test.
   * @returns {boolean} If `true` the date will be disabled.
   */
  shouldDisableDate: o.func,
  /**
   * Disable specific month.
   * @param {PickerValidDate} month The month to test.
   * @returns {boolean} If `true`, the month will be disabled.
   */
  shouldDisableMonth: o.func,
  /**
   * Disable specific year.
   * @param {PickerValidDate} year The year to test.
   * @returns {boolean} If `true`, the year will be disabled.
   */
  shouldDisableYear: o.func,
  /**
   * If `true`, days outside the current month are rendered:
   *
   * - if `fixedWeekNumber` is defined, renders days to have the weeks requested.
   *
   * - if `fixedWeekNumber` is not defined, renders day to fill the first and last week of the current month.
   *
   * - ignored if `calendars` equals more than `1` on range pickers.
   * @default false
   */
  showDaysOutsideCurrentMonth: o.bool,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: o.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: o.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: o.oneOfType([o.arrayOf(o.oneOfType([o.func, o.object, o.bool])), o.func, o.object]),
  /**
   * Choose which timezone to use for the value.
   * Example: "default", "system", "UTC", "America/New_York".
   * If you pass values from other timezones to some props, they will be converted to this timezone before being used.
   * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documentation} for more details.
   * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.
   */
  timezone: o.string,
  /**
   * The selected value.
   * Used when the component is controlled.
   */
  value: o.object,
  /**
   * The visible view.
   * Used when the component view is controlled.
   * Must be a valid option from `views` list.
   */
  view: o.oneOf(["day", "month", "year"]),
  /**
   * Define custom view renderers for each section.
   * If `null`, the section will only have field editing.
   * If `undefined`, internally defined view will be used.
   */
  viewRenderers: o.shape({
    day: o.func,
    month: o.func,
    year: o.func
  }),
  /**
   * Available views.
   */
  views: o.arrayOf(o.oneOf(["day", "month", "year"]).isRequired),
  /**
   * Years are displayed in ascending (chronological) order by default.
   * If `desc`, years are displayed in descending order.
   * @default 'asc'
   */
  yearsOrder: o.oneOf(["asc", "desc"]),
  /**
   * Years rendered per row.
   * @default 4 on desktop, 3 on mobile
   */
  yearsPerRow: o.oneOf([3, 4])
});
const Sh = 6048e5, WP = 864e5, Eh = 6e4, Oh = 36e5, zP = 1e3, dd = Symbol.for("constructDateFrom");
function Ge(e, t) {
  return typeof e == "function" ? e(t) : e && typeof e == "object" && dd in e ? e[dd](t) : e instanceof Date ? new e.constructor(t) : new Date(t);
}
function ve(e, t) {
  return Ge(t || e, e);
}
function $o(e, t, n) {
  const r = ve(e, n?.in);
  return isNaN(t) ? Ge(n?.in || e, NaN) : (t && r.setDate(r.getDate() + t), r);
}
function Ch(e, t, n) {
  return Ge(e, +ve(e) + t);
}
function UP(e, t, n) {
  return Ch(e, t * 1e3);
}
function qP(e, t, n) {
  const r = ve(e, n?.in);
  return r.setTime(r.getTime() + t * Eh), r;
}
function HP(e, t, n) {
  return Ch(e, t * Oh);
}
function YP(e, t, n) {
  return $o(e, t * 7, n);
}
function Ph(e, t, n) {
  const r = ve(e, n?.in);
  if (isNaN(t)) return Ge(e, NaN);
  if (!t)
    return r;
  const s = r.getDate(), i = Ge(e, r.getTime());
  i.setMonth(r.getMonth() + t + 1, 0);
  const a = i.getDate();
  return s >= a ? i : (r.setFullYear(
    i.getFullYear(),
    i.getMonth(),
    s
  ), r);
}
function KP(e, t, n) {
  return Ph(e, t * 12, n);
}
function fd(e, t) {
  const n = ve(e, t?.in);
  return n.setHours(23, 59, 59, 999), n;
}
let GP = {};
function fr() {
  return GP;
}
function XP(e, t) {
  const n = fr(), r = t?.weekStartsOn ?? t?.locale?.options?.weekStartsOn ?? n.weekStartsOn ?? n.locale?.options?.weekStartsOn ?? 0, s = ve(e, t?.in), i = s.getDay(), a = (i < r ? -7 : 0) + 6 - (i - r);
  return s.setDate(s.getDate() + a), s.setHours(23, 59, 59, 999), s;
}
function pd(e, t) {
  const n = ve(e, t?.in), r = n.getFullYear();
  return n.setFullYear(r + 1, 0, 0), n.setHours(23, 59, 59, 999), n;
}
const QP = {
  lessThanXSeconds: {
    one: "less than a second",
    other: "less than {{count}} seconds"
  },
  xSeconds: {
    one: "1 second",
    other: "{{count}} seconds"
  },
  halfAMinute: "half a minute",
  lessThanXMinutes: {
    one: "less than a minute",
    other: "less than {{count}} minutes"
  },
  xMinutes: {
    one: "1 minute",
    other: "{{count}} minutes"
  },
  aboutXHours: {
    one: "about 1 hour",
    other: "about {{count}} hours"
  },
  xHours: {
    one: "1 hour",
    other: "{{count}} hours"
  },
  xDays: {
    one: "1 day",
    other: "{{count}} days"
  },
  aboutXWeeks: {
    one: "about 1 week",
    other: "about {{count}} weeks"
  },
  xWeeks: {
    one: "1 week",
    other: "{{count}} weeks"
  },
  aboutXMonths: {
    one: "about 1 month",
    other: "about {{count}} months"
  },
  xMonths: {
    one: "1 month",
    other: "{{count}} months"
  },
  aboutXYears: {
    one: "about 1 year",
    other: "about {{count}} years"
  },
  xYears: {
    one: "1 year",
    other: "{{count}} years"
  },
  overXYears: {
    one: "over 1 year",
    other: "over {{count}} years"
  },
  almostXYears: {
    one: "almost 1 year",
    other: "almost {{count}} years"
  }
}, ZP = (e, t, n) => {
  let r;
  const s = QP[e];
  return typeof s == "string" ? r = s : t === 1 ? r = s.one : r = s.other.replace("{{count}}", t.toString()), n?.addSuffix ? n.comparison && n.comparison > 0 ? "in " + r : r + " ago" : r;
};
function aa(e) {
  return (t = {}) => {
    const n = t.width ? String(t.width) : e.defaultWidth;
    return e.formats[n] || e.formats[e.defaultWidth];
  };
}
const JP = {
  full: "EEEE, MMMM do, y",
  long: "MMMM do, y",
  medium: "MMM d, y",
  short: "MM/dd/yyyy"
}, eT = {
  full: "h:mm:ss a zzzz",
  long: "h:mm:ss a z",
  medium: "h:mm:ss a",
  short: "h:mm a"
}, tT = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
}, nT = {
  date: aa({
    formats: JP,
    defaultWidth: "full"
  }),
  time: aa({
    formats: eT,
    defaultWidth: "full"
  }),
  dateTime: aa({
    formats: tT,
    defaultWidth: "full"
  })
}, rT = {
  lastWeek: "'last' eeee 'at' p",
  yesterday: "'yesterday at' p",
  today: "'today at' p",
  tomorrow: "'tomorrow at' p",
  nextWeek: "eeee 'at' p",
  other: "P"
}, oT = (e, t, n, r) => rT[e];
function co(e) {
  return (t, n) => {
    const r = n?.context ? String(n.context) : "standalone";
    let s;
    if (r === "formatting" && e.formattingValues) {
      const a = e.defaultFormattingWidth || e.defaultWidth, l = n?.width ? String(n.width) : a;
      s = e.formattingValues[l] || e.formattingValues[a];
    } else {
      const a = e.defaultWidth, l = n?.width ? String(n.width) : e.defaultWidth;
      s = e.values[l] || e.values[a];
    }
    const i = e.argumentCallback ? e.argumentCallback(t) : t;
    return s[i];
  };
}
const sT = {
  narrow: ["B", "A"],
  abbreviated: ["BC", "AD"],
  wide: ["Before Christ", "Anno Domini"]
}, iT = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  wide: ["1st quarter", "2nd quarter", "3rd quarter", "4th quarter"]
}, aT = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
  abbreviated: [
    "Jan",
    "Feb",
    "Mar",
    "Apr",
    "May",
    "Jun",
    "Jul",
    "Aug",
    "Sep",
    "Oct",
    "Nov",
    "Dec"
  ],
  wide: [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December"
  ]
}, lT = {
  narrow: ["S", "M", "T", "W", "T", "F", "S"],
  short: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
  abbreviated: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  wide: [
    "Sunday",
    "Monday",
    "Tuesday",
    "Wednesday",
    "Thursday",
    "Friday",
    "Saturday"
  ]
}, cT = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  }
}, uT = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  }
}, dT = (e, t) => {
  const n = Number(e), r = n % 100;
  if (r > 20 || r < 10)
    switch (r % 10) {
      case 1:
        return n + "st";
      case 2:
        return n + "nd";
      case 3:
        return n + "rd";
    }
  return n + "th";
}, fT = {
  ordinalNumber: dT,
  era: co({
    values: sT,
    defaultWidth: "wide"
  }),
  quarter: co({
    values: iT,
    defaultWidth: "wide",
    argumentCallback: (e) => e - 1
  }),
  month: co({
    values: aT,
    defaultWidth: "wide"
  }),
  day: co({
    values: lT,
    defaultWidth: "wide"
  }),
  dayPeriod: co({
    values: cT,
    defaultWidth: "wide",
    formattingValues: uT,
    defaultFormattingWidth: "wide"
  })
};
function uo(e) {
  return (t, n = {}) => {
    const r = n.width, s = r && e.matchPatterns[r] || e.matchPatterns[e.defaultMatchWidth], i = t.match(s);
    if (!i)
      return null;
    const a = i[0], l = r && e.parsePatterns[r] || e.parsePatterns[e.defaultParseWidth], c = Array.isArray(l) ? hT(l, (f) => f.test(a)) : (
      // [TODO] -- I challenge you to fix the type
      pT(l, (f) => f.test(a))
    );
    let u;
    u = e.valueCallback ? e.valueCallback(c) : c, u = n.valueCallback ? (
      // [TODO] -- I challenge you to fix the type
      n.valueCallback(u)
    ) : u;
    const d = t.slice(a.length);
    return { value: u, rest: d };
  };
}
function pT(e, t) {
  for (const n in e)
    if (Object.prototype.hasOwnProperty.call(e, n) && t(e[n]))
      return n;
}
function hT(e, t) {
  for (let n = 0; n < e.length; n++)
    if (t(e[n]))
      return n;
}
function mT(e) {
  return (t, n = {}) => {
    const r = t.match(e.matchPattern);
    if (!r) return null;
    const s = r[0], i = t.match(e.parsePattern);
    if (!i) return null;
    let a = e.valueCallback ? e.valueCallback(i[0]) : i[0];
    a = n.valueCallback ? n.valueCallback(a) : a;
    const l = t.slice(s.length);
    return { value: a, rest: l };
  };
}
const yT = /^(\d+)(th|st|nd|rd)?/i, gT = /\d+/i, bT = {
  narrow: /^(b|a)/i,
  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
  wide: /^(before christ|before common era|anno domini|common era)/i
}, vT = {
  any: [/^b/i, /^(a|c)/i]
}, xT = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](th|st|nd|rd)? quarter/i
}, wT = {
  any: [/1/i, /2/i, /3/i, /4/i]
}, ST = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
}, ET = {
  narrow: [
    /^j/i,
    /^f/i,
    /^m/i,
    /^a/i,
    /^m/i,
    /^j/i,
    /^j/i,
    /^a/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i
  ],
  any: [
    /^ja/i,
    /^f/i,
    /^mar/i,
    /^ap/i,
    /^may/i,
    /^jun/i,
    /^jul/i,
    /^au/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i
  ]
}, OT = {
  narrow: /^[smtwf]/i,
  short: /^(su|mo|tu|we|th|fr|sa)/i,
  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
}, CT = {
  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
}, PT = {
  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
}, TT = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mi/i,
    noon: /^no/i,
    morning: /morning/i,
    afternoon: /afternoon/i,
    evening: /evening/i,
    night: /night/i
  }
}, RT = {
  ordinalNumber: mT({
    matchPattern: yT,
    parsePattern: gT,
    valueCallback: (e) => parseInt(e, 10)
  }),
  era: uo({
    matchPatterns: bT,
    defaultMatchWidth: "wide",
    parsePatterns: vT,
    defaultParseWidth: "any"
  }),
  quarter: uo({
    matchPatterns: xT,
    defaultMatchWidth: "wide",
    parsePatterns: wT,
    defaultParseWidth: "any",
    valueCallback: (e) => e + 1
  }),
  month: uo({
    matchPatterns: ST,
    defaultMatchWidth: "wide",
    parsePatterns: ET,
    defaultParseWidth: "any"
  }),
  day: uo({
    matchPatterns: OT,
    defaultMatchWidth: "wide",
    parsePatterns: CT,
    defaultParseWidth: "any"
  }),
  dayPeriod: uo({
    matchPatterns: PT,
    defaultMatchWidth: "any",
    parsePatterns: TT,
    defaultParseWidth: "any"
  })
}, oc = {
  code: "en-US",
  formatDistance: ZP,
  formatLong: nT,
  formatRelative: oT,
  localize: fT,
  match: RT,
  options: {
    weekStartsOn: 0,
    firstWeekContainsDate: 1
  }
};
function Gs(e) {
  const t = ve(e), n = new Date(
    Date.UTC(
      t.getFullYear(),
      t.getMonth(),
      t.getDate(),
      t.getHours(),
      t.getMinutes(),
      t.getSeconds(),
      t.getMilliseconds()
    )
  );
  return n.setUTCFullYear(t.getFullYear()), +e - +n;
}
function ss(e, ...t) {
  const n = Ge.bind(
    null,
    t.find((r) => typeof r == "object")
  );
  return t.map(n);
}
function jo(e, t) {
  const n = ve(e, t?.in);
  return n.setHours(0, 0, 0, 0), n;
}
function kT(e, t, n) {
  const [r, s] = ss(
    n?.in,
    e,
    t
  ), i = jo(r), a = jo(s), l = +i - Gs(i), c = +a - Gs(a);
  return Math.round((l - c) / WP);
}
function Th(e, t) {
  const n = ve(e, t?.in);
  return n.setFullYear(n.getFullYear(), 0, 1), n.setHours(0, 0, 0, 0), n;
}
function DT(e, t) {
  const n = ve(e, t?.in);
  return kT(n, Th(n)) + 1;
}
function xn(e, t) {
  const n = fr(), r = t?.weekStartsOn ?? t?.locale?.options?.weekStartsOn ?? n.weekStartsOn ?? n.locale?.options?.weekStartsOn ?? 0, s = ve(e, t?.in), i = s.getDay(), a = (i < r ? 7 : 0) + i - r;
  return s.setDate(s.getDate() - a), s.setHours(0, 0, 0, 0), s;
}
function Br(e, t) {
  return xn(e, { ...t, weekStartsOn: 1 });
}
function Rh(e, t) {
  const n = ve(e, t?.in), r = n.getFullYear(), s = Ge(n, 0);
  s.setFullYear(r + 1, 0, 4), s.setHours(0, 0, 0, 0);
  const i = Br(s), a = Ge(n, 0);
  a.setFullYear(r, 0, 4), a.setHours(0, 0, 0, 0);
  const l = Br(a);
  return n.getTime() >= i.getTime() ? r + 1 : n.getTime() >= l.getTime() ? r : r - 1;
}
function MT(e, t) {
  const n = Rh(e, t), r = Ge(e, 0);
  return r.setFullYear(n, 0, 4), r.setHours(0, 0, 0, 0), Br(r);
}
function kh(e, t) {
  const n = ve(e, t?.in), r = +Br(n) - +MT(n);
  return Math.round(r / Sh) + 1;
}
function sc(e, t) {
  const n = ve(e, t?.in), r = n.getFullYear(), s = fr(), i = t?.firstWeekContainsDate ?? t?.locale?.options?.firstWeekContainsDate ?? s.firstWeekContainsDate ?? s.locale?.options?.firstWeekContainsDate ?? 1, a = Ge(t?.in || e, 0);
  a.setFullYear(r + 1, 0, i), a.setHours(0, 0, 0, 0);
  const l = xn(a, t), c = Ge(t?.in || e, 0);
  c.setFullYear(r, 0, i), c.setHours(0, 0, 0, 0);
  const u = xn(c, t);
  return +n >= +l ? r + 1 : +n >= +u ? r : r - 1;
}
function IT(e, t) {
  const n = fr(), r = t?.firstWeekContainsDate ?? t?.locale?.options?.firstWeekContainsDate ?? n.firstWeekContainsDate ?? n.locale?.options?.firstWeekContainsDate ?? 1, s = sc(e, t), i = Ge(t?.in || e, 0);
  return i.setFullYear(s, 0, r), i.setHours(0, 0, 0, 0), xn(i, t);
}
function ic(e, t) {
  const n = ve(e, t?.in), r = +xn(n, t) - +IT(n, t);
  return Math.round(r / Sh) + 1;
}
function We(e, t) {
  const n = e < 0 ? "-" : "", r = Math.abs(e).toString().padStart(t, "0");
  return n + r;
}
const On = {
  // Year
  y(e, t) {
    const n = e.getFullYear(), r = n > 0 ? n : 1 - n;
    return We(t === "yy" ? r % 100 : r, t.length);
  },
  // Month
  M(e, t) {
    const n = e.getMonth();
    return t === "M" ? String(n + 1) : We(n + 1, 2);
  },
  // Day of the month
  d(e, t) {
    return We(e.getDate(), t.length);
  },
  // AM or PM
  a(e, t) {
    const n = e.getHours() / 12 >= 1 ? "pm" : "am";
    switch (t) {
      case "a":
      case "aa":
        return n.toUpperCase();
      case "aaa":
        return n;
      case "aaaaa":
        return n[0];
      case "aaaa":
      default:
        return n === "am" ? "a.m." : "p.m.";
    }
  },
  // Hour [1-12]
  h(e, t) {
    return We(e.getHours() % 12 || 12, t.length);
  },
  // Hour [0-23]
  H(e, t) {
    return We(e.getHours(), t.length);
  },
  // Minute
  m(e, t) {
    return We(e.getMinutes(), t.length);
  },
  // Second
  s(e, t) {
    return We(e.getSeconds(), t.length);
  },
  // Fraction of second
  S(e, t) {
    const n = t.length, r = e.getMilliseconds(), s = Math.trunc(
      r * Math.pow(10, n - 3)
    );
    return We(s, t.length);
  }
}, wr = {
  midnight: "midnight",
  noon: "noon",
  morning: "morning",
  afternoon: "afternoon",
  evening: "evening",
  night: "night"
}, hd = {
  // Era
  G: function(e, t, n) {
    const r = e.getFullYear() > 0 ? 1 : 0;
    switch (t) {
      // AD, BC
      case "G":
      case "GG":
      case "GGG":
        return n.era(r, { width: "abbreviated" });
      // A, B
      case "GGGGG":
        return n.era(r, { width: "narrow" });
      // Anno Domini, Before Christ
      case "GGGG":
      default:
        return n.era(r, { width: "wide" });
    }
  },
  // Year
  y: function(e, t, n) {
    if (t === "yo") {
      const r = e.getFullYear(), s = r > 0 ? r : 1 - r;
      return n.ordinalNumber(s, { unit: "year" });
    }
    return On.y(e, t);
  },
  // Local week-numbering year
  Y: function(e, t, n, r) {
    const s = sc(e, r), i = s > 0 ? s : 1 - s;
    if (t === "YY") {
      const a = i % 100;
      return We(a, 2);
    }
    return t === "Yo" ? n.ordinalNumber(i, { unit: "year" }) : We(i, t.length);
  },
  // ISO week-numbering year
  R: function(e, t) {
    const n = Rh(e);
    return We(n, t.length);
  },
  // Extended year. This is a single number designating the year of this calendar system.
  // The main difference between `y` and `u` localizers are B.C. years:
  // | Year | `y` | `u` |
  // |------|-----|-----|
  // | AC 1 |   1 |   1 |
  // | BC 1 |   1 |   0 |
  // | BC 2 |   2 |  -1 |
  // Also `yy` always returns the last two digits of a year,
  // while `uu` pads single digit years to 2 characters and returns other years unchanged.
  u: function(e, t) {
    const n = e.getFullYear();
    return We(n, t.length);
  },
  // Quarter
  Q: function(e, t, n) {
    const r = Math.ceil((e.getMonth() + 1) / 3);
    switch (t) {
      // 1, 2, 3, 4
      case "Q":
        return String(r);
      // 01, 02, 03, 04
      case "QQ":
        return We(r, 2);
      // 1st, 2nd, 3rd, 4th
      case "Qo":
        return n.ordinalNumber(r, { unit: "quarter" });
      // Q1, Q2, Q3, Q4
      case "QQQ":
        return n.quarter(r, {
          width: "abbreviated",
          context: "formatting"
        });
      // 1, 2, 3, 4 (narrow quarter; could be not numerical)
      case "QQQQQ":
        return n.quarter(r, {
          width: "narrow",
          context: "formatting"
        });
      // 1st quarter, 2nd quarter, ...
      case "QQQQ":
      default:
        return n.quarter(r, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Stand-alone quarter
  q: function(e, t, n) {
    const r = Math.ceil((e.getMonth() + 1) / 3);
    switch (t) {
      // 1, 2, 3, 4
      case "q":
        return String(r);
      // 01, 02, 03, 04
      case "qq":
        return We(r, 2);
      // 1st, 2nd, 3rd, 4th
      case "qo":
        return n.ordinalNumber(r, { unit: "quarter" });
      // Q1, Q2, Q3, Q4
      case "qqq":
        return n.quarter(r, {
          width: "abbreviated",
          context: "standalone"
        });
      // 1, 2, 3, 4 (narrow quarter; could be not numerical)
      case "qqqqq":
        return n.quarter(r, {
          width: "narrow",
          context: "standalone"
        });
      // 1st quarter, 2nd quarter, ...
      case "qqqq":
      default:
        return n.quarter(r, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  // Month
  M: function(e, t, n) {
    const r = e.getMonth();
    switch (t) {
      case "M":
      case "MM":
        return On.M(e, t);
      // 1st, 2nd, ..., 12th
      case "Mo":
        return n.ordinalNumber(r + 1, { unit: "month" });
      // Jan, Feb, ..., Dec
      case "MMM":
        return n.month(r, {
          width: "abbreviated",
          context: "formatting"
        });
      // J, F, ..., D
      case "MMMMM":
        return n.month(r, {
          width: "narrow",
          context: "formatting"
        });
      // January, February, ..., December
      case "MMMM":
      default:
        return n.month(r, { width: "wide", context: "formatting" });
    }
  },
  // Stand-alone month
  L: function(e, t, n) {
    const r = e.getMonth();
    switch (t) {
      // 1, 2, ..., 12
      case "L":
        return String(r + 1);
      // 01, 02, ..., 12
      case "LL":
        return We(r + 1, 2);
      // 1st, 2nd, ..., 12th
      case "Lo":
        return n.ordinalNumber(r + 1, { unit: "month" });
      // Jan, Feb, ..., Dec
      case "LLL":
        return n.month(r, {
          width: "abbreviated",
          context: "standalone"
        });
      // J, F, ..., D
      case "LLLLL":
        return n.month(r, {
          width: "narrow",
          context: "standalone"
        });
      // January, February, ..., December
      case "LLLL":
      default:
        return n.month(r, { width: "wide", context: "standalone" });
    }
  },
  // Local week of year
  w: function(e, t, n, r) {
    const s = ic(e, r);
    return t === "wo" ? n.ordinalNumber(s, { unit: "week" }) : We(s, t.length);
  },
  // ISO week of year
  I: function(e, t, n) {
    const r = kh(e);
    return t === "Io" ? n.ordinalNumber(r, { unit: "week" }) : We(r, t.length);
  },
  // Day of the month
  d: function(e, t, n) {
    return t === "do" ? n.ordinalNumber(e.getDate(), { unit: "date" }) : On.d(e, t);
  },
  // Day of year
  D: function(e, t, n) {
    const r = DT(e);
    return t === "Do" ? n.ordinalNumber(r, { unit: "dayOfYear" }) : We(r, t.length);
  },
  // Day of week
  E: function(e, t, n) {
    const r = e.getDay();
    switch (t) {
      // Tue
      case "E":
      case "EE":
      case "EEE":
        return n.day(r, {
          width: "abbreviated",
          context: "formatting"
        });
      // T
      case "EEEEE":
        return n.day(r, {
          width: "narrow",
          context: "formatting"
        });
      // Tu
      case "EEEEEE":
        return n.day(r, {
          width: "short",
          context: "formatting"
        });
      // Tuesday
      case "EEEE":
      default:
        return n.day(r, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Local day of week
  e: function(e, t, n, r) {
    const s = e.getDay(), i = (s - r.weekStartsOn + 8) % 7 || 7;
    switch (t) {
      // Numerical value (Nth day of week with current locale or weekStartsOn)
      case "e":
        return String(i);
      // Padded numerical value
      case "ee":
        return We(i, 2);
      // 1st, 2nd, ..., 7th
      case "eo":
        return n.ordinalNumber(i, { unit: "day" });
      case "eee":
        return n.day(s, {
          width: "abbreviated",
          context: "formatting"
        });
      // T
      case "eeeee":
        return n.day(s, {
          width: "narrow",
          context: "formatting"
        });
      // Tu
      case "eeeeee":
        return n.day(s, {
          width: "short",
          context: "formatting"
        });
      // Tuesday
      case "eeee":
      default:
        return n.day(s, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Stand-alone local day of week
  c: function(e, t, n, r) {
    const s = e.getDay(), i = (s - r.weekStartsOn + 8) % 7 || 7;
    switch (t) {
      // Numerical value (same as in `e`)
      case "c":
        return String(i);
      // Padded numerical value
      case "cc":
        return We(i, t.length);
      // 1st, 2nd, ..., 7th
      case "co":
        return n.ordinalNumber(i, { unit: "day" });
      case "ccc":
        return n.day(s, {
          width: "abbreviated",
          context: "standalone"
        });
      // T
      case "ccccc":
        return n.day(s, {
          width: "narrow",
          context: "standalone"
        });
      // Tu
      case "cccccc":
        return n.day(s, {
          width: "short",
          context: "standalone"
        });
      // Tuesday
      case "cccc":
      default:
        return n.day(s, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  // ISO day of week
  i: function(e, t, n) {
    const r = e.getDay(), s = r === 0 ? 7 : r;
    switch (t) {
      // 2
      case "i":
        return String(s);
      // 02
      case "ii":
        return We(s, t.length);
      // 2nd
      case "io":
        return n.ordinalNumber(s, { unit: "day" });
      // Tue
      case "iii":
        return n.day(r, {
          width: "abbreviated",
          context: "formatting"
        });
      // T
      case "iiiii":
        return n.day(r, {
          width: "narrow",
          context: "formatting"
        });
      // Tu
      case "iiiiii":
        return n.day(r, {
          width: "short",
          context: "formatting"
        });
      // Tuesday
      case "iiii":
      default:
        return n.day(r, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // AM or PM
  a: function(e, t, n) {
    const s = e.getHours() / 12 >= 1 ? "pm" : "am";
    switch (t) {
      case "a":
      case "aa":
        return n.dayPeriod(s, {
          width: "abbreviated",
          context: "formatting"
        });
      case "aaa":
        return n.dayPeriod(s, {
          width: "abbreviated",
          context: "formatting"
        }).toLowerCase();
      case "aaaaa":
        return n.dayPeriod(s, {
          width: "narrow",
          context: "formatting"
        });
      case "aaaa":
      default:
        return n.dayPeriod(s, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // AM, PM, midnight, noon
  b: function(e, t, n) {
    const r = e.getHours();
    let s;
    switch (r === 12 ? s = wr.noon : r === 0 ? s = wr.midnight : s = r / 12 >= 1 ? "pm" : "am", t) {
      case "b":
      case "bb":
        return n.dayPeriod(s, {
          width: "abbreviated",
          context: "formatting"
        });
      case "bbb":
        return n.dayPeriod(s, {
          width: "abbreviated",
          context: "formatting"
        }).toLowerCase();
      case "bbbbb":
        return n.dayPeriod(s, {
          width: "narrow",
          context: "formatting"
        });
      case "bbbb":
      default:
        return n.dayPeriod(s, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // in the morning, in the afternoon, in the evening, at night
  B: function(e, t, n) {
    const r = e.getHours();
    let s;
    switch (r >= 17 ? s = wr.evening : r >= 12 ? s = wr.afternoon : r >= 4 ? s = wr.morning : s = wr.night, t) {
      case "B":
      case "BB":
      case "BBB":
        return n.dayPeriod(s, {
          width: "abbreviated",
          context: "formatting"
        });
      case "BBBBB":
        return n.dayPeriod(s, {
          width: "narrow",
          context: "formatting"
        });
      case "BBBB":
      default:
        return n.dayPeriod(s, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Hour [1-12]
  h: function(e, t, n) {
    if (t === "ho") {
      let r = e.getHours() % 12;
      return r === 0 && (r = 12), n.ordinalNumber(r, { unit: "hour" });
    }
    return On.h(e, t);
  },
  // Hour [0-23]
  H: function(e, t, n) {
    return t === "Ho" ? n.ordinalNumber(e.getHours(), { unit: "hour" }) : On.H(e, t);
  },
  // Hour [0-11]
  K: function(e, t, n) {
    const r = e.getHours() % 12;
    return t === "Ko" ? n.ordinalNumber(r, { unit: "hour" }) : We(r, t.length);
  },
  // Hour [1-24]
  k: function(e, t, n) {
    let r = e.getHours();
    return r === 0 && (r = 24), t === "ko" ? n.ordinalNumber(r, { unit: "hour" }) : We(r, t.length);
  },
  // Minute
  m: function(e, t, n) {
    return t === "mo" ? n.ordinalNumber(e.getMinutes(), { unit: "minute" }) : On.m(e, t);
  },
  // Second
  s: function(e, t, n) {
    return t === "so" ? n.ordinalNumber(e.getSeconds(), { unit: "second" }) : On.s(e, t);
  },
  // Fraction of second
  S: function(e, t) {
    return On.S(e, t);
  },
  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)
  X: function(e, t, n) {
    const r = e.getTimezoneOffset();
    if (r === 0)
      return "Z";
    switch (t) {
      // Hours and optional minutes
      case "X":
        return yd(r);
      // Hours, minutes and optional seconds without `:` delimiter
      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
      // so this token always has the same output as `XX`
      case "XXXX":
      case "XX":
        return Qn(r);
      // Hours, minutes and optional seconds with `:` delimiter
      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
      // so this token always has the same output as `XXX`
      case "XXXXX":
      case "XXX":
      // Hours and minutes with `:` delimiter
      default:
        return Qn(r, ":");
    }
  },
  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)
  x: function(e, t, n) {
    const r = e.getTimezoneOffset();
    switch (t) {
      // Hours and optional minutes
      case "x":
        return yd(r);
      // Hours, minutes and optional seconds without `:` delimiter
      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
      // so this token always has the same output as `xx`
      case "xxxx":
      case "xx":
        return Qn(r);
      // Hours, minutes and optional seconds with `:` delimiter
      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
      // so this token always has the same output as `xxx`
      case "xxxxx":
      case "xxx":
      // Hours and minutes with `:` delimiter
      default:
        return Qn(r, ":");
    }
  },
  // Timezone (GMT)
  O: function(e, t, n) {
    const r = e.getTimezoneOffset();
    switch (t) {
      // Short
      case "O":
      case "OO":
      case "OOO":
        return "GMT" + md(r, ":");
      // Long
      case "OOOO":
      default:
        return "GMT" + Qn(r, ":");
    }
  },
  // Timezone (specific non-location)
  z: function(e, t, n) {
    const r = e.getTimezoneOffset();
    switch (t) {
      // Short
      case "z":
      case "zz":
      case "zzz":
        return "GMT" + md(r, ":");
      // Long
      case "zzzz":
      default:
        return "GMT" + Qn(r, ":");
    }
  },
  // Seconds timestamp
  t: function(e, t, n) {
    const r = Math.trunc(+e / 1e3);
    return We(r, t.length);
  },
  // Milliseconds timestamp
  T: function(e, t, n) {
    return We(+e, t.length);
  }
};
function md(e, t = "") {
  const n = e > 0 ? "-" : "+", r = Math.abs(e), s = Math.trunc(r / 60), i = r % 60;
  return i === 0 ? n + String(s) : n + String(s) + t + We(i, 2);
}
function yd(e, t) {
  return e % 60 === 0 ? (e > 0 ? "-" : "+") + We(Math.abs(e) / 60, 2) : Qn(e, t);
}
function Qn(e, t = "") {
  const n = e > 0 ? "-" : "+", r = Math.abs(e), s = We(Math.trunc(r / 60), 2), i = We(r % 60, 2);
  return n + s + t + i;
}
const gd = (e, t) => {
  switch (e) {
    case "P":
      return t.date({ width: "short" });
    case "PP":
      return t.date({ width: "medium" });
    case "PPP":
      return t.date({ width: "long" });
    case "PPPP":
    default:
      return t.date({ width: "full" });
  }
}, Dh = (e, t) => {
  switch (e) {
    case "p":
      return t.time({ width: "short" });
    case "pp":
      return t.time({ width: "medium" });
    case "ppp":
      return t.time({ width: "long" });
    case "pppp":
    default:
      return t.time({ width: "full" });
  }
}, NT = (e, t) => {
  const n = e.match(/(P+)(p+)?/) || [], r = n[1], s = n[2];
  if (!s)
    return gd(e, t);
  let i;
  switch (r) {
    case "P":
      i = t.dateTime({ width: "short" });
      break;
    case "PP":
      i = t.dateTime({ width: "medium" });
      break;
    case "PPP":
      i = t.dateTime({ width: "long" });
      break;
    case "PPPP":
    default:
      i = t.dateTime({ width: "full" });
      break;
  }
  return i.replace("{{date}}", gd(r, t)).replace("{{time}}", Dh(s, t));
}, _o = {
  p: Dh,
  P: NT
}, AT = /^D+$/, FT = /^Y+$/, $T = ["D", "DD", "YY", "YYYY"];
function Mh(e) {
  return AT.test(e);
}
function Ih(e) {
  return FT.test(e);
}
function Ba(e, t, n) {
  const r = jT(e, t, n);
  if (console.warn(r), $T.includes(e)) throw new RangeError(r);
}
function jT(e, t, n) {
  const r = e[0] === "Y" ? "years" : "days of the month";
  return `Use \`${e.toLowerCase()}\` instead of \`${e}\` (in \`${t}\`) for formatting ${r} to the input \`${n}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`;
}
function _T(e) {
  return e instanceof Date || typeof e == "object" && Object.prototype.toString.call(e) === "[object Date]";
}
function Nh(e) {
  return !(!_T(e) && typeof e != "number" || isNaN(+ve(e)));
}
const VT = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g, LT = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g, BT = /^'([^]*?)'?$/, WT = /''/g, zT = /[a-zA-Z]/;
function UT(e, t, n) {
  const r = fr(), s = n?.locale ?? r.locale ?? oc, i = n?.firstWeekContainsDate ?? n?.locale?.options?.firstWeekContainsDate ?? r.firstWeekContainsDate ?? r.locale?.options?.firstWeekContainsDate ?? 1, a = n?.weekStartsOn ?? n?.locale?.options?.weekStartsOn ?? r.weekStartsOn ?? r.locale?.options?.weekStartsOn ?? 0, l = ve(e, n?.in);
  if (!Nh(l))
    throw new RangeError("Invalid time value");
  let c = t.match(LT).map((d) => {
    const f = d[0];
    if (f === "p" || f === "P") {
      const y = _o[f];
      return y(d, s.formatLong);
    }
    return d;
  }).join("").match(VT).map((d) => {
    if (d === "''")
      return { isToken: !1, value: "'" };
    const f = d[0];
    if (f === "'")
      return { isToken: !1, value: qT(d) };
    if (hd[f])
      return { isToken: !0, value: d };
    if (f.match(zT))
      throw new RangeError(
        "Format string contains an unescaped latin alphabet character `" + f + "`"
      );
    return { isToken: !1, value: d };
  });
  s.localize.preprocessor && (c = s.localize.preprocessor(l, c));
  const u = {
    firstWeekContainsDate: i,
    weekStartsOn: a,
    locale: s
  };
  return c.map((d) => {
    if (!d.isToken) return d.value;
    const f = d.value;
    (!n?.useAdditionalWeekYearTokens && Ih(f) || !n?.useAdditionalDayOfYearTokens && Mh(f)) && Ba(f, t, String(e));
    const y = hd[f[0]];
    return y(l, f, s.localize, u);
  }).join("");
}
function qT(e) {
  const t = e.match(BT);
  return t ? t[1].replace(WT, "'") : e;
}
function HT(e, t) {
  return ve(e, t?.in).getDate();
}
function Ah(e, t) {
  const n = ve(e, t?.in), r = n.getFullYear(), s = n.getMonth(), i = Ge(n, 0);
  return i.setFullYear(r, s + 1, 0), i.setHours(0, 0, 0, 0), i.getDate();
}
function YT(e, t) {
  return ve(e, t?.in).getHours();
}
function KT(e, t) {
  return ve(e, t?.in).getMinutes();
}
function GT(e, t) {
  return ve(e, t?.in).getMonth();
}
function XT(e) {
  return ve(e).getSeconds();
}
function QT(e) {
  return ve(e).getMilliseconds();
}
function ZT(e, t) {
  return ve(e, t?.in).getFullYear();
}
function la(e, t) {
  return +ve(e) > +ve(t);
}
function ca(e, t) {
  return +ve(e) < +ve(t);
}
function JT(e, t) {
  return +ve(e) == +ve(t);
}
function eR(e, t, n) {
  const [r, s] = ss(
    n?.in,
    e,
    t
  );
  return +jo(r) == +jo(s);
}
function tR(e, t, n) {
  const [r, s] = ss(
    n?.in,
    e,
    t
  );
  return r.getFullYear() === s.getFullYear();
}
function nR(e, t, n) {
  const [r, s] = ss(
    n?.in,
    e,
    t
  );
  return r.getFullYear() === s.getFullYear() && r.getMonth() === s.getMonth();
}
function bd(e, t) {
  const n = ve(e, t?.in);
  return n.setMinutes(0, 0, 0), n;
}
function rR(e, t, n) {
  const [r, s] = ss(
    n?.in,
    e,
    t
  );
  return +bd(r) == +bd(s);
}
function oR() {
  return Object.assign({}, fr());
}
function sR(e, t) {
  const n = iR(t) ? new t(0) : Ge(t, 0);
  return n.setFullYear(e.getFullYear(), e.getMonth(), e.getDate()), n.setHours(
    e.getHours(),
    e.getMinutes(),
    e.getSeconds(),
    e.getMilliseconds()
  ), n;
}
function iR(e) {
  return typeof e == "function" && e.prototype?.constructor === e;
}
const aR = 10;
class Fh {
  subPriority = 0;
  validate(t, n) {
    return !0;
  }
}
class lR extends Fh {
  constructor(t, n, r, s, i) {
    super(), this.value = t, this.validateValue = n, this.setValue = r, this.priority = s, i && (this.subPriority = i);
  }
  validate(t, n) {
    return this.validateValue(t, this.value, n);
  }
  set(t, n, r) {
    return this.setValue(t, n, this.value, r);
  }
}
class cR extends Fh {
  priority = aR;
  subPriority = -1;
  constructor(t, n) {
    super(), this.context = t || ((r) => Ge(n, r));
  }
  set(t, n) {
    return n.timestampIsSet ? t : Ge(t, sR(t, this.context));
  }
}
class Fe {
  run(t, n, r, s) {
    const i = this.parse(t, n, r, s);
    return i ? {
      setter: new lR(
        i.value,
        this.validate,
        this.set,
        this.priority,
        this.subPriority
      ),
      rest: i.rest
    } : null;
  }
  validate(t, n, r) {
    return !0;
  }
}
class uR extends Fe {
  priority = 140;
  parse(t, n, r) {
    switch (n) {
      // AD, BC
      case "G":
      case "GG":
      case "GGG":
        return r.era(t, { width: "abbreviated" }) || r.era(t, { width: "narrow" });
      // A, B
      case "GGGGG":
        return r.era(t, { width: "narrow" });
      // Anno Domini, Before Christ
      case "GGGG":
      default:
        return r.era(t, { width: "wide" }) || r.era(t, { width: "abbreviated" }) || r.era(t, { width: "narrow" });
    }
  }
  set(t, n, r) {
    return n.era = r, t.setFullYear(r, 0, 1), t.setHours(0, 0, 0, 0), t;
  }
  incompatibleTokens = ["R", "u", "t", "T"];
}
const ot = {
  month: /^(1[0-2]|0?\d)/,
  // 0 to 12
  date: /^(3[0-1]|[0-2]?\d)/,
  // 0 to 31
  dayOfYear: /^(36[0-6]|3[0-5]\d|[0-2]?\d?\d)/,
  // 0 to 366
  week: /^(5[0-3]|[0-4]?\d)/,
  // 0 to 53
  hour23h: /^(2[0-3]|[0-1]?\d)/,
  // 0 to 23
  hour24h: /^(2[0-4]|[0-1]?\d)/,
  // 0 to 24
  hour11h: /^(1[0-1]|0?\d)/,
  // 0 to 11
  hour12h: /^(1[0-2]|0?\d)/,
  // 0 to 12
  minute: /^[0-5]?\d/,
  // 0 to 59
  second: /^[0-5]?\d/,
  // 0 to 59
  singleDigit: /^\d/,
  // 0 to 9
  twoDigits: /^\d{1,2}/,
  // 0 to 99
  threeDigits: /^\d{1,3}/,
  // 0 to 999
  fourDigits: /^\d{1,4}/,
  // 0 to 9999
  anyDigitsSigned: /^-?\d+/,
  singleDigitSigned: /^-?\d/,
  // 0 to 9, -0 to -9
  twoDigitsSigned: /^-?\d{1,2}/,
  // 0 to 99, -0 to -99
  threeDigitsSigned: /^-?\d{1,3}/,
  // 0 to 999, -0 to -999
  fourDigitsSigned: /^-?\d{1,4}/
  // 0 to 9999, -0 to -9999
}, en = {
  basicOptionalMinutes: /^([+-])(\d{2})(\d{2})?|Z/,
  basic: /^([+-])(\d{2})(\d{2})|Z/,
  basicOptionalSeconds: /^([+-])(\d{2})(\d{2})((\d{2}))?|Z/,
  extended: /^([+-])(\d{2}):(\d{2})|Z/,
  extendedOptionalSeconds: /^([+-])(\d{2}):(\d{2})(:(\d{2}))?|Z/
};
function st(e, t) {
  return e && {
    value: t(e.value),
    rest: e.rest
  };
}
function Qe(e, t) {
  const n = t.match(e);
  return n ? {
    value: parseInt(n[0], 10),
    rest: t.slice(n[0].length)
  } : null;
}
function tn(e, t) {
  const n = t.match(e);
  if (!n)
    return null;
  if (n[0] === "Z")
    return {
      value: 0,
      rest: t.slice(1)
    };
  const r = n[1] === "+" ? 1 : -1, s = n[2] ? parseInt(n[2], 10) : 0, i = n[3] ? parseInt(n[3], 10) : 0, a = n[5] ? parseInt(n[5], 10) : 0;
  return {
    value: r * (s * Oh + i * Eh + a * zP),
    rest: t.slice(n[0].length)
  };
}
function $h(e) {
  return Qe(ot.anyDigitsSigned, e);
}
function rt(e, t) {
  switch (e) {
    case 1:
      return Qe(ot.singleDigit, t);
    case 2:
      return Qe(ot.twoDigits, t);
    case 3:
      return Qe(ot.threeDigits, t);
    case 4:
      return Qe(ot.fourDigits, t);
    default:
      return Qe(new RegExp("^\\d{1," + e + "}"), t);
  }
}
function Xs(e, t) {
  switch (e) {
    case 1:
      return Qe(ot.singleDigitSigned, t);
    case 2:
      return Qe(ot.twoDigitsSigned, t);
    case 3:
      return Qe(ot.threeDigitsSigned, t);
    case 4:
      return Qe(ot.fourDigitsSigned, t);
    default:
      return Qe(new RegExp("^-?\\d{1," + e + "}"), t);
  }
}
function ac(e) {
  switch (e) {
    case "morning":
      return 4;
    case "evening":
      return 17;
    case "pm":
    case "noon":
    case "afternoon":
      return 12;
    case "am":
    case "midnight":
    case "night":
    default:
      return 0;
  }
}
function jh(e, t) {
  const n = t > 0, r = n ? t : 1 - t;
  let s;
  if (r <= 50)
    s = e || 100;
  else {
    const i = r + 50, a = Math.trunc(i / 100) * 100, l = e >= i % 100;
    s = e + a - (l ? 100 : 0);
  }
  return n ? s : 1 - s;
}
function _h(e) {
  return e % 400 === 0 || e % 4 === 0 && e % 100 !== 0;
}
class dR extends Fe {
  priority = 130;
  incompatibleTokens = ["Y", "R", "u", "w", "I", "i", "e", "c", "t", "T"];
  parse(t, n, r) {
    const s = (i) => ({
      year: i,
      isTwoDigitYear: n === "yy"
    });
    switch (n) {
      case "y":
        return st(rt(4, t), s);
      case "yo":
        return st(
          r.ordinalNumber(t, {
            unit: "year"
          }),
          s
        );
      default:
        return st(rt(n.length, t), s);
    }
  }
  validate(t, n) {
    return n.isTwoDigitYear || n.year > 0;
  }
  set(t, n, r) {
    const s = t.getFullYear();
    if (r.isTwoDigitYear) {
      const a = jh(
        r.year,
        s
      );
      return t.setFullYear(a, 0, 1), t.setHours(0, 0, 0, 0), t;
    }
    const i = !("era" in n) || n.era === 1 ? r.year : 1 - r.year;
    return t.setFullYear(i, 0, 1), t.setHours(0, 0, 0, 0), t;
  }
}
class fR extends Fe {
  priority = 130;
  parse(t, n, r) {
    const s = (i) => ({
      year: i,
      isTwoDigitYear: n === "YY"
    });
    switch (n) {
      case "Y":
        return st(rt(4, t), s);
      case "Yo":
        return st(
          r.ordinalNumber(t, {
            unit: "year"
          }),
          s
        );
      default:
        return st(rt(n.length, t), s);
    }
  }
  validate(t, n) {
    return n.isTwoDigitYear || n.year > 0;
  }
  set(t, n, r, s) {
    const i = sc(t, s);
    if (r.isTwoDigitYear) {
      const l = jh(
        r.year,
        i
      );
      return t.setFullYear(
        l,
        0,
        s.firstWeekContainsDate
      ), t.setHours(0, 0, 0, 0), xn(t, s);
    }
    const a = !("era" in n) || n.era === 1 ? r.year : 1 - r.year;
    return t.setFullYear(a, 0, s.firstWeekContainsDate), t.setHours(0, 0, 0, 0), xn(t, s);
  }
  incompatibleTokens = [
    "y",
    "R",
    "u",
    "Q",
    "q",
    "M",
    "L",
    "I",
    "d",
    "D",
    "i",
    "t",
    "T"
  ];
}
class pR extends Fe {
  priority = 130;
  parse(t, n) {
    return Xs(n === "R" ? 4 : n.length, t);
  }
  set(t, n, r) {
    const s = Ge(t, 0);
    return s.setFullYear(r, 0, 4), s.setHours(0, 0, 0, 0), Br(s);
  }
  incompatibleTokens = [
    "G",
    "y",
    "Y",
    "u",
    "Q",
    "q",
    "M",
    "L",
    "w",
    "d",
    "D",
    "e",
    "c",
    "t",
    "T"
  ];
}
class hR extends Fe {
  priority = 130;
  parse(t, n) {
    return Xs(n === "u" ? 4 : n.length, t);
  }
  set(t, n, r) {
    return t.setFullYear(r, 0, 1), t.setHours(0, 0, 0, 0), t;
  }
  incompatibleTokens = ["G", "y", "Y", "R", "w", "I", "i", "e", "c", "t", "T"];
}
class mR extends Fe {
  priority = 120;
  parse(t, n, r) {
    switch (n) {
      // 1, 2, 3, 4
      case "Q":
      case "QQ":
        return rt(n.length, t);
      // 1st, 2nd, 3rd, 4th
      case "Qo":
        return r.ordinalNumber(t, { unit: "quarter" });
      // Q1, Q2, Q3, Q4
      case "QQQ":
        return r.quarter(t, {
          width: "abbreviated",
          context: "formatting"
        }) || r.quarter(t, {
          width: "narrow",
          context: "formatting"
        });
      // 1, 2, 3, 4 (narrow quarter; could be not numerical)
      case "QQQQQ":
        return r.quarter(t, {
          width: "narrow",
          context: "formatting"
        });
      // 1st quarter, 2nd quarter, ...
      case "QQQQ":
      default:
        return r.quarter(t, {
          width: "wide",
          context: "formatting"
        }) || r.quarter(t, {
          width: "abbreviated",
          context: "formatting"
        }) || r.quarter(t, {
          width: "narrow",
          context: "formatting"
        });
    }
  }
  validate(t, n) {
    return n >= 1 && n <= 4;
  }
  set(t, n, r) {
    return t.setMonth((r - 1) * 3, 1), t.setHours(0, 0, 0, 0), t;
  }
  incompatibleTokens = [
    "Y",
    "R",
    "q",
    "M",
    "L",
    "w",
    "I",
    "d",
    "D",
    "i",
    "e",
    "c",
    "t",
    "T"
  ];
}
class yR extends Fe {
  priority = 120;
  parse(t, n, r) {
    switch (n) {
      // 1, 2, 3, 4
      case "q":
      case "qq":
        return rt(n.length, t);
      // 1st, 2nd, 3rd, 4th
      case "qo":
        return r.ordinalNumber(t, { unit: "quarter" });
      // Q1, Q2, Q3, Q4
      case "qqq":
        return r.quarter(t, {
          width: "abbreviated",
          context: "standalone"
        }) || r.quarter(t, {
          width: "narrow",
          context: "standalone"
        });
      // 1, 2, 3, 4 (narrow quarter; could be not numerical)
      case "qqqqq":
        return r.quarter(t, {
          width: "narrow",
          context: "standalone"
        });
      // 1st quarter, 2nd quarter, ...
      case "qqqq":
      default:
        return r.quarter(t, {
          width: "wide",
          context: "standalone"
        }) || r.quarter(t, {
          width: "abbreviated",
          context: "standalone"
        }) || r.quarter(t, {
          width: "narrow",
          context: "standalone"
        });
    }
  }
  validate(t, n) {
    return n >= 1 && n <= 4;
  }
  set(t, n, r) {
    return t.setMonth((r - 1) * 3, 1), t.setHours(0, 0, 0, 0), t;
  }
  incompatibleTokens = [
    "Y",
    "R",
    "Q",
    "M",
    "L",
    "w",
    "I",
    "d",
    "D",
    "i",
    "e",
    "c",
    "t",
    "T"
  ];
}
class gR extends Fe {
  incompatibleTokens = [
    "Y",
    "R",
    "q",
    "Q",
    "L",
    "w",
    "I",
    "D",
    "i",
    "e",
    "c",
    "t",
    "T"
  ];
  priority = 110;
  parse(t, n, r) {
    const s = (i) => i - 1;
    switch (n) {
      // 1, 2, ..., 12
      case "M":
        return st(
          Qe(ot.month, t),
          s
        );
      // 01, 02, ..., 12
      case "MM":
        return st(rt(2, t), s);
      // 1st, 2nd, ..., 12th
      case "Mo":
        return st(
          r.ordinalNumber(t, {
            unit: "month"
          }),
          s
        );
      // Jan, Feb, ..., Dec
      case "MMM":
        return r.month(t, {
          width: "abbreviated",
          context: "formatting"
        }) || r.month(t, { width: "narrow", context: "formatting" });
      // J, F, ..., D
      case "MMMMM":
        return r.month(t, {
          width: "narrow",
          context: "formatting"
        });
      // January, February, ..., December
      case "MMMM":
      default:
        return r.month(t, { width: "wide", context: "formatting" }) || r.month(t, {
          width: "abbreviated",
          context: "formatting"
        }) || r.month(t, { width: "narrow", context: "formatting" });
    }
  }
  validate(t, n) {
    return n >= 0 && n <= 11;
  }
  set(t, n, r) {
    return t.setMonth(r, 1), t.setHours(0, 0, 0, 0), t;
  }
}
class bR extends Fe {
  priority = 110;
  parse(t, n, r) {
    const s = (i) => i - 1;
    switch (n) {
      // 1, 2, ..., 12
      case "L":
        return st(
          Qe(ot.month, t),
          s
        );
      // 01, 02, ..., 12
      case "LL":
        return st(rt(2, t), s);
      // 1st, 2nd, ..., 12th
      case "Lo":
        return st(
          r.ordinalNumber(t, {
            unit: "month"
          }),
          s
        );
      // Jan, Feb, ..., Dec
      case "LLL":
        return r.month(t, {
          width: "abbreviated",
          context: "standalone"
        }) || r.month(t, { width: "narrow", context: "standalone" });
      // J, F, ..., D
      case "LLLLL":
        return r.month(t, {
          width: "narrow",
          context: "standalone"
        });
      // January, February, ..., December
      case "LLLL":
      default:
        return r.month(t, { width: "wide", context: "standalone" }) || r.month(t, {
          width: "abbreviated",
          context: "standalone"
        }) || r.month(t, { width: "narrow", context: "standalone" });
    }
  }
  validate(t, n) {
    return n >= 0 && n <= 11;
  }
  set(t, n, r) {
    return t.setMonth(r, 1), t.setHours(0, 0, 0, 0), t;
  }
  incompatibleTokens = [
    "Y",
    "R",
    "q",
    "Q",
    "M",
    "w",
    "I",
    "D",
    "i",
    "e",
    "c",
    "t",
    "T"
  ];
}
function vR(e, t, n) {
  const r = ve(e, n?.in), s = ic(r, n) - t;
  return r.setDate(r.getDate() - s * 7), ve(r, n?.in);
}
class xR extends Fe {
  priority = 100;
  parse(t, n, r) {
    switch (n) {
      case "w":
        return Qe(ot.week, t);
      case "wo":
        return r.ordinalNumber(t, { unit: "week" });
      default:
        return rt(n.length, t);
    }
  }
  validate(t, n) {
    return n >= 1 && n <= 53;
  }
  set(t, n, r, s) {
    return xn(vR(t, r, s), s);
  }
  incompatibleTokens = [
    "y",
    "R",
    "u",
    "q",
    "Q",
    "M",
    "L",
    "I",
    "d",
    "D",
    "i",
    "t",
    "T"
  ];
}
function wR(e, t, n) {
  const r = ve(e, n?.in), s = kh(r, n) - t;
  return r.setDate(r.getDate() - s * 7), r;
}
class SR extends Fe {
  priority = 100;
  parse(t, n, r) {
    switch (n) {
      case "I":
        return Qe(ot.week, t);
      case "Io":
        return r.ordinalNumber(t, { unit: "week" });
      default:
        return rt(n.length, t);
    }
  }
  validate(t, n) {
    return n >= 1 && n <= 53;
  }
  set(t, n, r) {
    return Br(wR(t, r));
  }
  incompatibleTokens = [
    "y",
    "Y",
    "u",
    "q",
    "Q",
    "M",
    "L",
    "w",
    "d",
    "D",
    "e",
    "c",
    "t",
    "T"
  ];
}
const ER = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], OR = [
  31,
  29,
  31,
  30,
  31,
  30,
  31,
  31,
  30,
  31,
  30,
  31
];
class CR extends Fe {
  priority = 90;
  subPriority = 1;
  parse(t, n, r) {
    switch (n) {
      case "d":
        return Qe(ot.date, t);
      case "do":
        return r.ordinalNumber(t, { unit: "date" });
      default:
        return rt(n.length, t);
    }
  }
  validate(t, n) {
    const r = t.getFullYear(), s = _h(r), i = t.getMonth();
    return s ? n >= 1 && n <= OR[i] : n >= 1 && n <= ER[i];
  }
  set(t, n, r) {
    return t.setDate(r), t.setHours(0, 0, 0, 0), t;
  }
  incompatibleTokens = [
    "Y",
    "R",
    "q",
    "Q",
    "w",
    "I",
    "D",
    "i",
    "e",
    "c",
    "t",
    "T"
  ];
}
class PR extends Fe {
  priority = 90;
  subpriority = 1;
  parse(t, n, r) {
    switch (n) {
      case "D":
      case "DD":
        return Qe(ot.dayOfYear, t);
      case "Do":
        return r.ordinalNumber(t, { unit: "date" });
      default:
        return rt(n.length, t);
    }
  }
  validate(t, n) {
    const r = t.getFullYear();
    return _h(r) ? n >= 1 && n <= 366 : n >= 1 && n <= 365;
  }
  set(t, n, r) {
    return t.setMonth(0, r), t.setHours(0, 0, 0, 0), t;
  }
  incompatibleTokens = [
    "Y",
    "R",
    "q",
    "Q",
    "M",
    "L",
    "w",
    "I",
    "d",
    "E",
    "i",
    "e",
    "c",
    "t",
    "T"
  ];
}
function lc(e, t, n) {
  const r = fr(), s = n?.weekStartsOn ?? n?.locale?.options?.weekStartsOn ?? r.weekStartsOn ?? r.locale?.options?.weekStartsOn ?? 0, i = ve(e, n?.in), a = i.getDay(), c = (t % 7 + 7) % 7, u = 7 - s, d = t < 0 || t > 6 ? t - (a + u) % 7 : (c + u) % 7 - (a + u) % 7;
  return $o(i, d, n);
}
class TR extends Fe {
  priority = 90;
  parse(t, n, r) {
    switch (n) {
      // Tue
      case "E":
      case "EE":
      case "EEE":
        return r.day(t, {
          width: "abbreviated",
          context: "formatting"
        }) || r.day(t, { width: "short", context: "formatting" }) || r.day(t, { width: "narrow", context: "formatting" });
      // T
      case "EEEEE":
        return r.day(t, {
          width: "narrow",
          context: "formatting"
        });
      // Tu
      case "EEEEEE":
        return r.day(t, { width: "short", context: "formatting" }) || r.day(t, { width: "narrow", context: "formatting" });
      // Tuesday
      case "EEEE":
      default:
        return r.day(t, { width: "wide", context: "formatting" }) || r.day(t, {
          width: "abbreviated",
          context: "formatting"
        }) || r.day(t, { width: "short", context: "formatting" }) || r.day(t, { width: "narrow", context: "formatting" });
    }
  }
  validate(t, n) {
    return n >= 0 && n <= 6;
  }
  set(t, n, r, s) {
    return t = lc(t, r, s), t.setHours(0, 0, 0, 0), t;
  }
  incompatibleTokens = ["D", "i", "e", "c", "t", "T"];
}
class RR extends Fe {
  priority = 90;
  parse(t, n, r, s) {
    const i = (a) => {
      const l = Math.floor((a - 1) / 7) * 7;
      return (a + s.weekStartsOn + 6) % 7 + l;
    };
    switch (n) {
      // 3
      case "e":
      case "ee":
        return st(rt(n.length, t), i);
      // 3rd
      case "eo":
        return st(
          r.ordinalNumber(t, {
            unit: "day"
          }),
          i
        );
      // Tue
      case "eee":
        return r.day(t, {
          width: "abbreviated",
          context: "formatting"
        }) || r.day(t, { width: "short", context: "formatting" }) || r.day(t, { width: "narrow", context: "formatting" });
      // T
      case "eeeee":
        return r.day(t, {
          width: "narrow",
          context: "formatting"
        });
      // Tu
      case "eeeeee":
        return r.day(t, { width: "short", context: "formatting" }) || r.day(t, { width: "narrow", context: "formatting" });
      // Tuesday
      case "eeee":
      default:
        return r.day(t, { width: "wide", context: "formatting" }) || r.day(t, {
          width: "abbreviated",
          context: "formatting"
        }) || r.day(t, { width: "short", context: "formatting" }) || r.day(t, { width: "narrow", context: "formatting" });
    }
  }
  validate(t, n) {
    return n >= 0 && n <= 6;
  }
  set(t, n, r, s) {
    return t = lc(t, r, s), t.setHours(0, 0, 0, 0), t;
  }
  incompatibleTokens = [
    "y",
    "R",
    "u",
    "q",
    "Q",
    "M",
    "L",
    "I",
    "d",
    "D",
    "E",
    "i",
    "c",
    "t",
    "T"
  ];
}
class kR extends Fe {
  priority = 90;
  parse(t, n, r, s) {
    const i = (a) => {
      const l = Math.floor((a - 1) / 7) * 7;
      return (a + s.weekStartsOn + 6) % 7 + l;
    };
    switch (n) {
      // 3
      case "c":
      case "cc":
        return st(rt(n.length, t), i);
      // 3rd
      case "co":
        return st(
          r.ordinalNumber(t, {
            unit: "day"
          }),
          i
        );
      // Tue
      case "ccc":
        return r.day(t, {
          width: "abbreviated",
          context: "standalone"
        }) || r.day(t, { width: "short", context: "standalone" }) || r.day(t, { width: "narrow", context: "standalone" });
      // T
      case "ccccc":
        return r.day(t, {
          width: "narrow",
          context: "standalone"
        });
      // Tu
      case "cccccc":
        return r.day(t, { width: "short", context: "standalone" }) || r.day(t, { width: "narrow", context: "standalone" });
      // Tuesday
      case "cccc":
      default:
        return r.day(t, { width: "wide", context: "standalone" }) || r.day(t, {
          width: "abbreviated",
          context: "standalone"
        }) || r.day(t, { width: "short", context: "standalone" }) || r.day(t, { width: "narrow", context: "standalone" });
    }
  }
  validate(t, n) {
    return n >= 0 && n <= 6;
  }
  set(t, n, r, s) {
    return t = lc(t, r, s), t.setHours(0, 0, 0, 0), t;
  }
  incompatibleTokens = [
    "y",
    "R",
    "u",
    "q",
    "Q",
    "M",
    "L",
    "I",
    "d",
    "D",
    "E",
    "i",
    "e",
    "t",
    "T"
  ];
}
function DR(e, t) {
  const n = ve(e, t?.in).getDay();
  return n === 0 ? 7 : n;
}
function MR(e, t, n) {
  const r = ve(e, n?.in), s = DR(r, n), i = t - s;
  return $o(r, i, n);
}
class IR extends Fe {
  priority = 90;
  parse(t, n, r) {
    const s = (i) => i === 0 ? 7 : i;
    switch (n) {
      // 2
      case "i":
      case "ii":
        return rt(n.length, t);
      // 2nd
      case "io":
        return r.ordinalNumber(t, { unit: "day" });
      // Tue
      case "iii":
        return st(
          r.day(t, {
            width: "abbreviated",
            context: "formatting"
          }) || r.day(t, {
            width: "short",
            context: "formatting"
          }) || r.day(t, {
            width: "narrow",
            context: "formatting"
          }),
          s
        );
      // T
      case "iiiii":
        return st(
          r.day(t, {
            width: "narrow",
            context: "formatting"
          }),
          s
        );
      // Tu
      case "iiiiii":
        return st(
          r.day(t, {
            width: "short",
            context: "formatting"
          }) || r.day(t, {
            width: "narrow",
            context: "formatting"
          }),
          s
        );
      // Tuesday
      case "iiii":
      default:
        return st(
          r.day(t, {
            width: "wide",
            context: "formatting"
          }) || r.day(t, {
            width: "abbreviated",
            context: "formatting"
          }) || r.day(t, {
            width: "short",
            context: "formatting"
          }) || r.day(t, {
            width: "narrow",
            context: "formatting"
          }),
          s
        );
    }
  }
  validate(t, n) {
    return n >= 1 && n <= 7;
  }
  set(t, n, r) {
    return t = MR(t, r), t.setHours(0, 0, 0, 0), t;
  }
  incompatibleTokens = [
    "y",
    "Y",
    "u",
    "q",
    "Q",
    "M",
    "L",
    "w",
    "d",
    "D",
    "E",
    "e",
    "c",
    "t",
    "T"
  ];
}
class NR extends Fe {
  priority = 80;
  parse(t, n, r) {
    switch (n) {
      case "a":
      case "aa":
      case "aaa":
        return r.dayPeriod(t, {
          width: "abbreviated",
          context: "formatting"
        }) || r.dayPeriod(t, {
          width: "narrow",
          context: "formatting"
        });
      case "aaaaa":
        return r.dayPeriod(t, {
          width: "narrow",
          context: "formatting"
        });
      case "aaaa":
      default:
        return r.dayPeriod(t, {
          width: "wide",
          context: "formatting"
        }) || r.dayPeriod(t, {
          width: "abbreviated",
          context: "formatting"
        }) || r.dayPeriod(t, {
          width: "narrow",
          context: "formatting"
        });
    }
  }
  set(t, n, r) {
    return t.setHours(ac(r), 0, 0, 0), t;
  }
  incompatibleTokens = ["b", "B", "H", "k", "t", "T"];
}
class AR extends Fe {
  priority = 80;
  parse(t, n, r) {
    switch (n) {
      case "b":
      case "bb":
      case "bbb":
        return r.dayPeriod(t, {
          width: "abbreviated",
          context: "formatting"
        }) || r.dayPeriod(t, {
          width: "narrow",
          context: "formatting"
        });
      case "bbbbb":
        return r.dayPeriod(t, {
          width: "narrow",
          context: "formatting"
        });
      case "bbbb":
      default:
        return r.dayPeriod(t, {
          width: "wide",
          context: "formatting"
        }) || r.dayPeriod(t, {
          width: "abbreviated",
          context: "formatting"
        }) || r.dayPeriod(t, {
          width: "narrow",
          context: "formatting"
        });
    }
  }
  set(t, n, r) {
    return t.setHours(ac(r), 0, 0, 0), t;
  }
  incompatibleTokens = ["a", "B", "H", "k", "t", "T"];
}
class FR extends Fe {
  priority = 80;
  parse(t, n, r) {
    switch (n) {
      case "B":
      case "BB":
      case "BBB":
        return r.dayPeriod(t, {
          width: "abbreviated",
          context: "formatting"
        }) || r.dayPeriod(t, {
          width: "narrow",
          context: "formatting"
        });
      case "BBBBB":
        return r.dayPeriod(t, {
          width: "narrow",
          context: "formatting"
        });
      case "BBBB":
      default:
        return r.dayPeriod(t, {
          width: "wide",
          context: "formatting"
        }) || r.dayPeriod(t, {
          width: "abbreviated",
          context: "formatting"
        }) || r.dayPeriod(t, {
          width: "narrow",
          context: "formatting"
        });
    }
  }
  set(t, n, r) {
    return t.setHours(ac(r), 0, 0, 0), t;
  }
  incompatibleTokens = ["a", "b", "t", "T"];
}
class $R extends Fe {
  priority = 70;
  parse(t, n, r) {
    switch (n) {
      case "h":
        return Qe(ot.hour12h, t);
      case "ho":
        return r.ordinalNumber(t, { unit: "hour" });
      default:
        return rt(n.length, t);
    }
  }
  validate(t, n) {
    return n >= 1 && n <= 12;
  }
  set(t, n, r) {
    const s = t.getHours() >= 12;
    return s && r < 12 ? t.setHours(r + 12, 0, 0, 0) : !s && r === 12 ? t.setHours(0, 0, 0, 0) : t.setHours(r, 0, 0, 0), t;
  }
  incompatibleTokens = ["H", "K", "k", "t", "T"];
}
class jR extends Fe {
  priority = 70;
  parse(t, n, r) {
    switch (n) {
      case "H":
        return Qe(ot.hour23h, t);
      case "Ho":
        return r.ordinalNumber(t, { unit: "hour" });
      default:
        return rt(n.length, t);
    }
  }
  validate(t, n) {
    return n >= 0 && n <= 23;
  }
  set(t, n, r) {
    return t.setHours(r, 0, 0, 0), t;
  }
  incompatibleTokens = ["a", "b", "h", "K", "k", "t", "T"];
}
class _R extends Fe {
  priority = 70;
  parse(t, n, r) {
    switch (n) {
      case "K":
        return Qe(ot.hour11h, t);
      case "Ko":
        return r.ordinalNumber(t, { unit: "hour" });
      default:
        return rt(n.length, t);
    }
  }
  validate(t, n) {
    return n >= 0 && n <= 11;
  }
  set(t, n, r) {
    return t.getHours() >= 12 && r < 12 ? t.setHours(r + 12, 0, 0, 0) : t.setHours(r, 0, 0, 0), t;
  }
  incompatibleTokens = ["h", "H", "k", "t", "T"];
}
class VR extends Fe {
  priority = 70;
  parse(t, n, r) {
    switch (n) {
      case "k":
        return Qe(ot.hour24h, t);
      case "ko":
        return r.ordinalNumber(t, { unit: "hour" });
      default:
        return rt(n.length, t);
    }
  }
  validate(t, n) {
    return n >= 1 && n <= 24;
  }
  set(t, n, r) {
    const s = r <= 24 ? r % 24 : r;
    return t.setHours(s, 0, 0, 0), t;
  }
  incompatibleTokens = ["a", "b", "h", "H", "K", "t", "T"];
}
class LR extends Fe {
  priority = 60;
  parse(t, n, r) {
    switch (n) {
      case "m":
        return Qe(ot.minute, t);
      case "mo":
        return r.ordinalNumber(t, { unit: "minute" });
      default:
        return rt(n.length, t);
    }
  }
  validate(t, n) {
    return n >= 0 && n <= 59;
  }
  set(t, n, r) {
    return t.setMinutes(r, 0, 0), t;
  }
  incompatibleTokens = ["t", "T"];
}
class BR extends Fe {
  priority = 50;
  parse(t, n, r) {
    switch (n) {
      case "s":
        return Qe(ot.second, t);
      case "so":
        return r.ordinalNumber(t, { unit: "second" });
      default:
        return rt(n.length, t);
    }
  }
  validate(t, n) {
    return n >= 0 && n <= 59;
  }
  set(t, n, r) {
    return t.setSeconds(r, 0), t;
  }
  incompatibleTokens = ["t", "T"];
}
class WR extends Fe {
  priority = 30;
  parse(t, n) {
    const r = (s) => Math.trunc(s * Math.pow(10, -n.length + 3));
    return st(rt(n.length, t), r);
  }
  set(t, n, r) {
    return t.setMilliseconds(r), t;
  }
  incompatibleTokens = ["t", "T"];
}
class zR extends Fe {
  priority = 10;
  parse(t, n) {
    switch (n) {
      case "X":
        return tn(
          en.basicOptionalMinutes,
          t
        );
      case "XX":
        return tn(en.basic, t);
      case "XXXX":
        return tn(
          en.basicOptionalSeconds,
          t
        );
      case "XXXXX":
        return tn(
          en.extendedOptionalSeconds,
          t
        );
      case "XXX":
      default:
        return tn(en.extended, t);
    }
  }
  set(t, n, r) {
    return n.timestampIsSet ? t : Ge(
      t,
      t.getTime() - Gs(t) - r
    );
  }
  incompatibleTokens = ["t", "T", "x"];
}
class UR extends Fe {
  priority = 10;
  parse(t, n) {
    switch (n) {
      case "x":
        return tn(
          en.basicOptionalMinutes,
          t
        );
      case "xx":
        return tn(en.basic, t);
      case "xxxx":
        return tn(
          en.basicOptionalSeconds,
          t
        );
      case "xxxxx":
        return tn(
          en.extendedOptionalSeconds,
          t
        );
      case "xxx":
      default:
        return tn(en.extended, t);
    }
  }
  set(t, n, r) {
    return n.timestampIsSet ? t : Ge(
      t,
      t.getTime() - Gs(t) - r
    );
  }
  incompatibleTokens = ["t", "T", "X"];
}
class qR extends Fe {
  priority = 40;
  parse(t) {
    return $h(t);
  }
  set(t, n, r) {
    return [Ge(t, r * 1e3), { timestampIsSet: !0 }];
  }
  incompatibleTokens = "*";
}
class HR extends Fe {
  priority = 20;
  parse(t) {
    return $h(t);
  }
  set(t, n, r) {
    return [Ge(t, r), { timestampIsSet: !0 }];
  }
  incompatibleTokens = "*";
}
const YR = {
  G: new uR(),
  y: new dR(),
  Y: new fR(),
  R: new pR(),
  u: new hR(),
  Q: new mR(),
  q: new yR(),
  M: new gR(),
  L: new bR(),
  w: new xR(),
  I: new SR(),
  d: new CR(),
  D: new PR(),
  E: new TR(),
  e: new RR(),
  c: new kR(),
  i: new IR(),
  a: new NR(),
  b: new AR(),
  B: new FR(),
  h: new $R(),
  H: new jR(),
  K: new _R(),
  k: new VR(),
  m: new LR(),
  s: new BR(),
  S: new WR(),
  X: new zR(),
  x: new UR(),
  t: new qR(),
  T: new HR()
}, KR = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g, GR = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g, XR = /^'([^]*?)'?$/, QR = /''/g, ZR = /\S/, JR = /[a-zA-Z]/;
function ek(e, t, n, r) {
  const s = () => Ge(r?.in || n, NaN), i = oR(), a = r?.locale ?? i.locale ?? oc, l = r?.firstWeekContainsDate ?? r?.locale?.options?.firstWeekContainsDate ?? i.firstWeekContainsDate ?? i.locale?.options?.firstWeekContainsDate ?? 1, c = r?.weekStartsOn ?? r?.locale?.options?.weekStartsOn ?? i.weekStartsOn ?? i.locale?.options?.weekStartsOn ?? 0;
  if (!t)
    return e ? s() : ve(n, r?.in);
  const u = {
    firstWeekContainsDate: l,
    weekStartsOn: c,
    locale: a
  }, d = [new cR(r?.in, n)], f = t.match(GR).map((m) => {
    const b = m[0];
    if (b in _o) {
      const C = _o[b];
      return C(m, a.formatLong);
    }
    return m;
  }).join("").match(KR), y = [];
  for (let m of f) {
    !r?.useAdditionalWeekYearTokens && Ih(m) && Ba(m, t, e), !r?.useAdditionalDayOfYearTokens && Mh(m) && Ba(m, t, e);
    const b = m[0], C = YR[b];
    if (C) {
      const { incompatibleTokens: O } = C;
      if (Array.isArray(O)) {
        const S = y.find(
          (P) => O.includes(P.token) || P.token === b
        );
        if (S)
          throw new RangeError(
            `The format string mustn't contain \`${S.fullToken}\` and \`${m}\` at the same time`
          );
      } else if (C.incompatibleTokens === "*" && y.length > 0)
        throw new RangeError(
          `The format string mustn't contain \`${m}\` and any other token at the same time`
        );
      y.push({ token: b, fullToken: m });
      const w = C.run(
        e,
        m,
        a.match,
        u
      );
      if (!w)
        return s();
      d.push(w.setter), e = w.rest;
    } else {
      if (b.match(JR))
        throw new RangeError(
          "Format string contains an unescaped latin alphabet character `" + b + "`"
        );
      if (m === "''" ? m = "'" : b === "'" && (m = tk(m)), e.indexOf(m) === 0)
        e = e.slice(m.length);
      else
        return s();
    }
  }
  if (e.length > 0 && ZR.test(e))
    return s();
  const g = d.map((m) => m.priority).sort((m, b) => b - m).filter((m, b, C) => C.indexOf(m) === b).map(
    (m) => d.filter((b) => b.priority === m).sort((b, C) => C.subPriority - b.subPriority)
  ).map((m) => m[0]);
  let h = ve(n, r?.in);
  if (isNaN(+h)) return s();
  const p = {};
  for (const m of g) {
    if (!m.validate(h, u))
      return s();
    const b = m.set(h, p, u);
    Array.isArray(b) ? (h = b[0], Object.assign(p, b[1])) : h = b;
  }
  return h;
}
function tk(e) {
  return e.match(XR)[1].replace(QR, "'");
}
function nk(e, t, n) {
  const r = ve(e, n?.in);
  return r.setDate(t), r;
}
function rk(e, t, n) {
  const r = ve(e, n?.in);
  return r.setHours(t), r;
}
function ok(e, t, n) {
  const r = ve(e, n?.in);
  return r.setMinutes(t), r;
}
function sk(e, t, n) {
  const r = ve(e, n?.in), s = r.getFullYear(), i = r.getDate(), a = Ge(e, 0);
  a.setFullYear(s, t, 15), a.setHours(0, 0, 0, 0);
  const l = Ah(a);
  return r.setMonth(t, Math.min(i, l)), r;
}
function ik(e, t, n) {
  const r = ve(e, n?.in);
  return r.setSeconds(t), r;
}
function ak(e, t, n) {
  const r = ve(e, n?.in);
  return r.setMilliseconds(t), r;
}
function lk(e, t, n) {
  const r = ve(e, n?.in);
  return isNaN(+r) ? Ge(e, NaN) : (r.setFullYear(t), r);
}
function ck(e, t) {
  const n = ve(e, t?.in);
  return n.setDate(1), n.setHours(0, 0, 0, 0), n;
}
function uk(e, t) {
  const n = ve(e, t?.in), r = n.getMonth();
  return n.setFullYear(n.getFullYear(), r + 1, 0), n.setHours(23, 59, 59, 999), n;
}
function dk(e, t, n) {
  const r = +ve(e, n?.in), [s, i] = [
    +ve(t.start, n?.in),
    +ve(t.end, n?.in)
  ].sort((a, l) => a - l);
  return r >= s && r <= i;
}
const fk = {
  // Year
  y: {
    sectionType: "year",
    contentType: "digit",
    maxLength: 4
  },
  yy: "year",
  yyy: {
    sectionType: "year",
    contentType: "digit",
    maxLength: 4
  },
  yyyy: "year",
  // Month
  M: {
    sectionType: "month",
    contentType: "digit",
    maxLength: 2
  },
  MM: "month",
  MMMM: {
    sectionType: "month",
    contentType: "letter"
  },
  MMM: {
    sectionType: "month",
    contentType: "letter"
  },
  L: {
    sectionType: "month",
    contentType: "digit",
    maxLength: 2
  },
  LL: "month",
  LLL: {
    sectionType: "month",
    contentType: "letter"
  },
  LLLL: {
    sectionType: "month",
    contentType: "letter"
  },
  // Day of the month
  d: {
    sectionType: "day",
    contentType: "digit",
    maxLength: 2
  },
  dd: "day",
  do: {
    sectionType: "day",
    contentType: "digit-with-letter"
  },
  // Day of the week
  E: {
    sectionType: "weekDay",
    contentType: "letter"
  },
  EE: {
    sectionType: "weekDay",
    contentType: "letter"
  },
  EEE: {
    sectionType: "weekDay",
    contentType: "letter"
  },
  EEEE: {
    sectionType: "weekDay",
    contentType: "letter"
  },
  EEEEE: {
    sectionType: "weekDay",
    contentType: "letter"
  },
  i: {
    sectionType: "weekDay",
    contentType: "digit",
    maxLength: 1
  },
  ii: "weekDay",
  iii: {
    sectionType: "weekDay",
    contentType: "letter"
  },
  iiii: {
    sectionType: "weekDay",
    contentType: "letter"
  },
  // eslint-disable-next-line id-denylist
  e: {
    sectionType: "weekDay",
    contentType: "digit",
    maxLength: 1
  },
  ee: "weekDay",
  eee: {
    sectionType: "weekDay",
    contentType: "letter"
  },
  eeee: {
    sectionType: "weekDay",
    contentType: "letter"
  },
  eeeee: {
    sectionType: "weekDay",
    contentType: "letter"
  },
  eeeeee: {
    sectionType: "weekDay",
    contentType: "letter"
  },
  c: {
    sectionType: "weekDay",
    contentType: "digit",
    maxLength: 1
  },
  cc: "weekDay",
  ccc: {
    sectionType: "weekDay",
    contentType: "letter"
  },
  cccc: {
    sectionType: "weekDay",
    contentType: "letter"
  },
  ccccc: {
    sectionType: "weekDay",
    contentType: "letter"
  },
  cccccc: {
    sectionType: "weekDay",
    contentType: "letter"
  },
  // Meridiem
  a: "meridiem",
  aa: "meridiem",
  aaa: "meridiem",
  // Hours
  H: {
    sectionType: "hours",
    contentType: "digit",
    maxLength: 2
  },
  HH: "hours",
  h: {
    sectionType: "hours",
    contentType: "digit",
    maxLength: 2
  },
  hh: "hours",
  // Minutes
  m: {
    sectionType: "minutes",
    contentType: "digit",
    maxLength: 2
  },
  mm: "minutes",
  // Seconds
  s: {
    sectionType: "seconds",
    contentType: "digit",
    maxLength: 2
  },
  ss: "seconds"
}, pk = {
  year: "yyyy",
  month: "LLLL",
  monthShort: "MMM",
  dayOfMonth: "d",
  dayOfMonthFull: "do",
  weekday: "EEEE",
  weekdayShort: "EEEEEE",
  hours24h: "HH",
  hours12h: "hh",
  meridiem: "aa",
  minutes: "mm",
  seconds: "ss",
  fullDate: "PP",
  keyboardDate: "P",
  shortDate: "MMM d",
  normalDate: "d MMMM",
  normalDateWithWeekday: "EEE, MMM d",
  fullTime12h: "hh:mm aa",
  fullTime24h: "HH:mm",
  keyboardDateTime12h: "P hh:mm aa",
  keyboardDateTime24h: "P HH:mm"
};
class hk {
  isMUIAdapter = !0;
  isTimezoneCompatible = !1;
  formatTokenMap = fk;
  escapedCharacters = {
    start: "'",
    end: "'"
  };
  constructor(t) {
    const {
      locale: n,
      formats: r,
      longFormatters: s,
      lib: i
    } = t;
    this.locale = n, this.formats = j({}, pk, r), this.longFormatters = s, this.lib = i || "date-fns";
  }
  date = (t) => typeof t > "u" ? /* @__PURE__ */ new Date() : t === null ? null : new Date(t);
  getInvalidDate = () => /* @__PURE__ */ new Date("Invalid Date");
  getTimezone = () => "default";
  setTimezone = (t) => t;
  toJsDate = (t) => t;
  getCurrentLocaleCode = () => this.locale.code;
  // Note: date-fns input types are more lenient than this adapter, so we need to expose our more
  // strict signature and delegate to the more lenient signature. Otherwise, we have downstream type errors upon usage.
  is12HourCycleInCurrentLocale = () => /a/.test(this.locale.formatLong.time({
    width: "short"
  }));
  expandFormat = (t) => {
    const n = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
    return t.match(n).map((r) => {
      const s = r[0];
      if (s === "p" || s === "P") {
        const i = this.longFormatters[s];
        return i(r, this.locale.formatLong);
      }
      return r;
    }).join("");
  };
  formatNumber = (t) => t;
  getDayOfWeek = (t) => t.getDay() + 1;
}
class mk extends hk {
  constructor({
    locale: t,
    formats: n
  } = {}) {
    if (process.env.NODE_ENV !== "production") {
      if (typeof $o != "function")
        throw new Error(["MUI: The `date-fns` package v2.x is not compatible with this adapter.", "Please, install v3.x or v4.x of the package or use the `AdapterDateFnsV2` instead."].join(`
`));
      if (!_o)
        throw new Error("MUI: The minimum supported `date-fns` package version compatible with this adapter is `3.2.x`.");
    }
    super({
      locale: t ?? oc,
      formats: n,
      longFormatters: _o
    });
  }
  // TODO: explicit return types can be removed once there is only one date-fns version supported
  parse = (t, n) => t === "" ? null : ek(t, n, /* @__PURE__ */ new Date(), {
    locale: this.locale
  });
  isValid = (t) => t == null ? !1 : Nh(t);
  format = (t, n) => this.formatByString(t, this.formats[n]);
  formatByString = (t, n) => UT(t, n, {
    locale: this.locale
  });
  isEqual = (t, n) => t === null && n === null ? !0 : t === null || n === null ? !1 : JT(t, n);
  isSameYear = (t, n) => tR(t, n);
  isSameMonth = (t, n) => nR(t, n);
  isSameDay = (t, n) => eR(t, n);
  isSameHour = (t, n) => rR(t, n);
  isAfter = (t, n) => la(t, n);
  isAfterYear = (t, n) => la(t, pd(n));
  isAfterDay = (t, n) => la(t, fd(n));
  isBefore = (t, n) => ca(t, n);
  isBeforeYear = (t, n) => ca(t, this.startOfYear(n));
  isBeforeDay = (t, n) => ca(t, this.startOfDay(n));
  isWithinRange = (t, [n, r]) => dk(t, {
    start: n,
    end: r
  });
  startOfYear = (t) => Th(t);
  startOfMonth = (t) => ck(t);
  startOfWeek = (t) => xn(t, {
    locale: this.locale
  });
  startOfDay = (t) => jo(t);
  endOfYear = (t) => pd(t);
  endOfMonth = (t) => uk(t);
  endOfWeek = (t) => XP(t, {
    locale: this.locale
  });
  endOfDay = (t) => fd(t);
  addYears = (t, n) => KP(t, n);
  addMonths = (t, n) => Ph(t, n);
  addWeeks = (t, n) => YP(t, n);
  addDays = (t, n) => $o(t, n);
  addHours = (t, n) => HP(t, n);
  addMinutes = (t, n) => qP(t, n);
  addSeconds = (t, n) => UP(t, n);
  getYear = (t) => ZT(t);
  getMonth = (t) => GT(t);
  getDate = (t) => HT(t);
  getHours = (t) => YT(t);
  getMinutes = (t) => KT(t);
  getSeconds = (t) => XT(t);
  getMilliseconds = (t) => QT(t);
  setYear = (t, n) => lk(t, n);
  setMonth = (t, n) => sk(t, n);
  setDate = (t, n) => nk(t, n);
  setHours = (t, n) => rk(t, n);
  setMinutes = (t, n) => ok(t, n);
  setSeconds = (t, n) => ik(t, n);
  setMilliseconds = (t, n) => ak(t, n);
  getDaysInMonth = (t) => Ah(t);
  getWeekArray = (t) => {
    const n = this.startOfWeek(this.startOfMonth(t)), r = this.endOfWeek(this.endOfMonth(t));
    let s = 0, i = n;
    const a = [];
    for (; this.isBefore(i, r); ) {
      const l = Math.floor(s / 7);
      a[l] = a[l] || [], a[l].push(i), i = this.addDays(i, 1), s += 1;
    }
    return a;
  };
  getWeekNumber = (t) => ic(t, {
    locale: this.locale
  });
  getYearRange = ([t, n]) => {
    const r = this.startOfYear(t), s = this.endOfYear(n), i = [];
    let a = r;
    for (; this.isBefore(a, s); )
      i.push(a), a = this.addYears(a, 1);
    return i;
  };
}
var Ss = { exports: {} }, ua = {};
/**
 * @license React
 * use-sync-external-store-shim.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var vd;
function yk() {
  if (vd) return ua;
  vd = 1;
  var e = yt;
  function t(f, y) {
    return f === y && (f !== 0 || 1 / f === 1 / y) || f !== f && y !== y;
  }
  var n = typeof Object.is == "function" ? Object.is : t, r = e.useState, s = e.useEffect, i = e.useLayoutEffect, a = e.useDebugValue;
  function l(f, y) {
    var g = y(), h = r({ inst: { value: g, getSnapshot: y } }), p = h[0].inst, m = h[1];
    return i(
      function() {
        p.value = g, p.getSnapshot = y, c(p) && m({ inst: p });
      },
      [f, g, y]
    ), s(
      function() {
        return c(p) && m({ inst: p }), f(function() {
          c(p) && m({ inst: p });
        });
      },
      [f]
    ), a(g), g;
  }
  function c(f) {
    var y = f.getSnapshot;
    f = f.value;
    try {
      var g = y();
      return !n(f, g);
    } catch {
      return !0;
    }
  }
  function u(f, y) {
    return y();
  }
  var d = typeof window > "u" || typeof window.document > "u" || typeof window.document.createElement > "u" ? u : l;
  return ua.useSyncExternalStore = e.useSyncExternalStore !== void 0 ? e.useSyncExternalStore : d, ua;
}
var da = {};
/**
 * @license React
 * use-sync-external-store-shim.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var xd;
function gk() {
  return xd || (xd = 1, process.env.NODE_ENV !== "production" && (function() {
    function e(g, h) {
      return g === h && (g !== 0 || 1 / g === 1 / h) || g !== g && h !== h;
    }
    function t(g, h) {
      d || s.startTransition === void 0 || (d = !0, console.error(
        "You are using an outdated, pre-release alpha of React 18 that does not support useSyncExternalStore. The use-sync-external-store shim will not work correctly. Upgrade to a newer pre-release."
      ));
      var p = h();
      if (!f) {
        var m = h();
        i(p, m) || (console.error(
          "The result of getSnapshot should be cached to avoid an infinite loop"
        ), f = !0);
      }
      m = a({
        inst: { value: p, getSnapshot: h }
      });
      var b = m[0].inst, C = m[1];
      return c(
        function() {
          b.value = p, b.getSnapshot = h, n(b) && C({ inst: b });
        },
        [g, p, h]
      ), l(
        function() {
          return n(b) && C({ inst: b }), g(function() {
            n(b) && C({ inst: b });
          });
        },
        [g]
      ), u(p), p;
    }
    function n(g) {
      var h = g.getSnapshot;
      g = g.value;
      try {
        var p = h();
        return !i(g, p);
      } catch {
        return !0;
      }
    }
    function r(g, h) {
      return h();
    }
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());
    var s = yt, i = typeof Object.is == "function" ? Object.is : e, a = s.useState, l = s.useEffect, c = s.useLayoutEffect, u = s.useDebugValue, d = !1, f = !1, y = typeof window > "u" || typeof window.document > "u" || typeof window.document.createElement > "u" ? r : t;
    da.useSyncExternalStore = s.useSyncExternalStore !== void 0 ? s.useSyncExternalStore : y, typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());
  })()), da;
}
var wd;
function bk() {
  return wd || (wd = 1, process.env.NODE_ENV === "production" ? Ss.exports = yk() : Ss.exports = gk()), Ss.exports;
}
var vk = bk();
const Vh = 0, Lh = 1, Bh = 2, Sd = 3;
var Ed = Object.prototype.hasOwnProperty;
function Wa(e, t) {
  var n, r;
  if (e === t) return !0;
  if (e && t && (n = e.constructor) === t.constructor) {
    if (n === Date) return e.getTime() === t.getTime();
    if (n === RegExp) return e.toString() === t.toString();
    if (n === Array) {
      if ((r = e.length) === t.length)
        for (; r-- && Wa(e[r], t[r]); ) ;
      return r === -1;
    }
    if (!n || typeof e == "object") {
      r = 0;
      for (n in e)
        if (Ed.call(e, n) && ++r && !Ed.call(t, n) || !(n in t) || !Wa(e[n], t[n])) return !1;
      return Object.keys(t).length === r;
    }
  }
  return e !== e && t !== t;
}
const mn = /* @__PURE__ */ new WeakMap(), Rn = () => {
}, bt = (
  /*#__NOINLINE__*/
  Rn()
), za = Object, De = (e) => e === bt, nn = (e) => typeof e == "function", $n = (e, t) => ({
  ...e,
  ...t
}), Wh = (e) => nn(e.then), fa = {}, Es = {}, cc = "undefined", is = typeof window != cc, Ua = typeof document != cc, xk = is && "Deno" in window, wk = () => is && typeof window.requestAnimationFrame != cc, zh = (e, t) => {
  const n = mn.get(e);
  return [
    // Getter
    () => !De(t) && e.get(t) || fa,
    // Setter
    (r) => {
      if (!De(t)) {
        const s = e.get(t);
        t in Es || (Es[t] = s), n[5](t, $n(s, r), s || fa);
      }
    },
    // Subscriber
    n[6],
    // Get server cache snapshot
    () => !De(t) && t in Es ? Es[t] : !De(t) && e.get(t) || fa
  ];
};
let qa = !0;
const Sk = () => qa, [Ha, Ya] = is && window.addEventListener ? [
  window.addEventListener.bind(window),
  window.removeEventListener.bind(window)
] : [
  Rn,
  Rn
], Ek = () => {
  const e = Ua && document.visibilityState;
  return De(e) || e !== "hidden";
}, Ok = (e) => (Ua && document.addEventListener("visibilitychange", e), Ha("focus", e), () => {
  Ua && document.removeEventListener("visibilitychange", e), Ya("focus", e);
}), Ck = (e) => {
  const t = () => {
    qa = !0, e();
  }, n = () => {
    qa = !1;
  };
  return Ha("online", t), Ha("offline", n), () => {
    Ya("online", t), Ya("offline", n);
  };
}, Pk = {
  isOnline: Sk,
  isVisible: Ek
}, Tk = {
  initFocus: Ok,
  initReconnect: Ck
}, Od = !yt.useId, Vo = !is || xk, Rk = (e) => wk() ? window.requestAnimationFrame(e) : setTimeout(e, 1), pa = Vo ? ar : Im, ha = typeof navigator < "u" && navigator.connection, Cd = !Vo && ha && ([
  "slow-2g",
  "2g"
].includes(ha.effectiveType) || ha.saveData), Os = /* @__PURE__ */ new WeakMap(), kk = (e) => za.prototype.toString.call(e), ma = (e, t) => e === `[object ${t}]`;
let Dk = 0;
const Ka = (e) => {
  const t = typeof e, n = kk(e), r = ma(n, "Date"), s = ma(n, "RegExp"), i = ma(n, "Object");
  let a, l;
  if (za(e) === e && !r && !s) {
    if (a = Os.get(e), a) return a;
    if (a = ++Dk + "~", Os.set(e, a), Array.isArray(e)) {
      for (a = "@", l = 0; l < e.length; l++)
        a += Ka(e[l]) + ",";
      Os.set(e, a);
    }
    if (i) {
      a = "#";
      const c = za.keys(e).sort();
      for (; !De(l = c.pop()); )
        De(e[l]) || (a += l + ":" + Ka(e[l]) + ",");
      Os.set(e, a);
    }
  } else
    a = r ? e.toJSON() : t == "symbol" ? e.toString() : t == "string" ? JSON.stringify(e) : "" + e;
  return a;
}, uc = (e) => {
  if (nn(e))
    try {
      e = e();
    } catch {
      e = "";
    }
  const t = e;
  return e = typeof e == "string" ? e : (Array.isArray(e) ? e.length : e) ? Ka(e) : "", [
    e,
    t
  ];
};
let Mk = 0;
const Ga = () => ++Mk;
async function Uh(...e) {
  const [t, n, r, s] = e, i = $n({
    populateCache: !0,
    throwOnError: !0
  }, typeof s == "boolean" ? {
    revalidate: s
  } : s || {});
  let a = i.populateCache;
  const l = i.rollbackOnError;
  let c = i.optimisticData;
  const u = (y) => typeof l == "function" ? l(y) : l !== !1, d = i.throwOnError;
  if (nn(n)) {
    const y = n, g = [], h = t.keys();
    for (const p of h)
      // Skip the special useSWRInfinite and useSWRSubscription keys.
      !/^\$(inf|sub)\$/.test(p) && y(t.get(p)._k) && g.push(p);
    return Promise.all(g.map(f));
  }
  return f(n);
  async function f(y) {
    const [g] = uc(y);
    if (!g) return;
    const [h, p] = zh(t, g), [m, b, C, O] = mn.get(t), w = () => {
      const T = m[g];
      return (nn(i.revalidate) ? i.revalidate(h().data, y) : i.revalidate !== !1) && (delete C[g], delete O[g], T && T[0]) ? T[0](Bh).then(() => h().data) : h().data;
    };
    if (e.length < 3)
      return w();
    let S = r, P, M = !1;
    const F = Ga();
    b[g] = [
      F,
      0
    ];
    const A = !De(c), $ = h(), k = $.data, v = $._c, D = De(v) ? k : v;
    if (A && (c = nn(c) ? c(D, k) : c, p({
      data: c,
      _c: D
    })), nn(S))
      try {
        S = S(D);
      } catch (T) {
        P = T, M = !0;
      }
    if (S && Wh(S))
      if (S = await S.catch((T) => {
        P = T, M = !0;
      }), F !== b[g][0]) {
        if (M) throw P;
        return S;
      } else M && A && u(P) && (a = !0, p({
        data: D,
        _c: bt
      }));
    if (a && !M)
      if (nn(a)) {
        const T = a(S, D);
        p({
          data: T,
          error: bt,
          _c: bt
        });
      } else
        p({
          data: S,
          error: bt,
          _c: bt
        });
    if (b[g][1] = Ga(), Promise.resolve(w()).then(() => {
      p({
        _c: bt
      });
    }), M) {
      if (d) throw P;
      return;
    }
    return S;
  }
}
const Pd = (e, t) => {
  for (const n in e)
    e[n][0] && e[n][0](t);
}, Ik = (e, t) => {
  if (!mn.has(e)) {
    const n = $n(Tk, t), r = /* @__PURE__ */ Object.create(null), s = Uh.bind(bt, e);
    let i = Rn;
    const a = /* @__PURE__ */ Object.create(null), l = (d, f) => {
      const y = a[d] || [];
      return a[d] = y, y.push(f), () => y.splice(y.indexOf(f), 1);
    }, c = (d, f, y) => {
      e.set(d, f);
      const g = a[d];
      if (g)
        for (const h of g)
          h(f, y);
    }, u = () => {
      if (!mn.has(e) && (mn.set(e, [
        r,
        /* @__PURE__ */ Object.create(null),
        /* @__PURE__ */ Object.create(null),
        /* @__PURE__ */ Object.create(null),
        s,
        c,
        l
      ]), !Vo)) {
        const d = n.initFocus(setTimeout.bind(bt, Pd.bind(bt, r, Vh))), f = n.initReconnect(setTimeout.bind(bt, Pd.bind(bt, r, Lh)));
        i = () => {
          d && d(), f && f(), mn.delete(e);
        };
      }
    };
    return u(), [
      e,
      s,
      u,
      i
    ];
  }
  return [
    e,
    mn.get(e)[4]
  ];
}, Nk = (e, t, n, r, s) => {
  const i = n.errorRetryCount, a = s.retryCount, l = ~~((Math.random() + 0.5) * (1 << (a < 8 ? a : 8))) * n.errorRetryInterval;
  !De(i) && a > i || setTimeout(r, l, s);
}, Ak = Wa, [qh, Fk] = Ik(/* @__PURE__ */ new Map()), $k = $n(
  {
    // events
    onLoadingSlow: Rn,
    onSuccess: Rn,
    onError: Rn,
    onErrorRetry: Nk,
    onDiscarded: Rn,
    // switches
    revalidateOnFocus: !0,
    revalidateOnReconnect: !0,
    revalidateIfStale: !0,
    shouldRetryOnError: !0,
    // timeouts
    errorRetryInterval: Cd ? 1e4 : 5e3,
    focusThrottleInterval: 5 * 1e3,
    dedupingInterval: 2 * 1e3,
    loadingTimeout: Cd ? 5e3 : 3e3,
    // providers
    compare: Ak,
    isPaused: () => !1,
    cache: qh,
    mutate: Fk,
    fallback: {}
  },
  // use web preset by default
  Pk
), jk = (e, t) => {
  const n = $n(e, t);
  if (t) {
    const { use: r, fallback: s } = e, { use: i, fallback: a } = t;
    r && i && (n.use = r.concat(i)), s && a && (n.fallback = $n(s, a));
  }
  return n;
}, _k = Zd({}), Vk = "$inf$", Hh = is && window.__SWR_DEVTOOLS_USE__, Lk = Hh ? window.__SWR_DEVTOOLS_USE__ : [], Bk = () => {
  Hh && (window.__SWR_DEVTOOLS_REACT__ = yt);
}, Wk = (e) => nn(e[1]) ? [
  e[0],
  e[1],
  e[2] || {}
] : [
  e[0],
  null,
  (e[1] === null ? e[2] : e[1]) || {}
], zk = () => {
  const e = Lo(_k);
  return Jd(() => $n($k, e), [
    e
  ]);
}, Uk = (e) => (t, n, r) => e(t, n && ((...i) => {
  const [a] = uc(t), [, , , l] = mn.get(qh);
  if (a.startsWith(Vk))
    return n(...i);
  const c = l[a];
  return De(c) ? n(...i) : (delete l[a], c);
}), r), qk = Lk.concat(Uk), Hk = (e) => function(...n) {
  const r = zk(), [s, i, a] = Wk(n), l = jk(r, a);
  let c = e;
  const { use: u } = l, d = (u || []).concat(qk);
  for (let f = d.length; f--; )
    c = d[f](c);
  return c(s, i || l.fetcher || null, l);
}, Yk = (e, t, n) => {
  const r = t[e] || (t[e] = []);
  return r.push(n), () => {
    const s = r.indexOf(n);
    s >= 0 && (r[s] = r[r.length - 1], r.pop());
  };
};
Bk();
const ya = yt.use || // This extra generic is to avoid TypeScript mixing up the generic and JSX sytax
// and emitting an error.
// We assume that this is only for the `use(thenable)` case, not `use(context)`.
// https://github.com/facebook/react/blob/aed00dacfb79d17c53218404c52b1c7aa59c4a89/packages/react-server/src/ReactFizzThenable.js#L45
((e) => {
  switch (e.status) {
    case "pending":
      throw e;
    case "fulfilled":
      return e.value;
    case "rejected":
      throw e.reason;
    default:
      throw e.status = "pending", e.then((t) => {
        e.status = "fulfilled", e.value = t;
      }, (t) => {
        e.status = "rejected", e.reason = t;
      }), e;
  }
}), ga = {
  dedupe: !0
}, Td = Promise.resolve(bt), Kk = (e, t, n) => {
  const { cache: r, compare: s, suspense: i, fallbackData: a, revalidateOnMount: l, revalidateIfStale: c, refreshInterval: u, refreshWhenHidden: d, refreshWhenOffline: f, keepPreviousData: y } = n, [g, h, p, m] = mn.get(r), [b, C] = uc(e), O = Wn(!1), w = Wn(!1), S = Wn(b), P = Wn(t), M = Wn(n), F = () => M.current, A = () => F().isVisible() && F().isOnline(), [$, k, v, D] = zh(r, b), T = Wn({}).current, I = De(a) ? De(n.fallback) ? bt : n.fallback[b] : a, N = (ne, Y) => {
    for (const ae in T) {
      const W = ae;
      if (W === "data") {
        if (!s(ne[W], Y[W]) && (!De(ne[W]) || !s(te, Y[W])))
          return !1;
      } else if (Y[W] !== ne[W])
        return !1;
    }
    return !0;
  }, _ = Jd(() => {
    const ne = !b || !t ? !1 : De(l) ? F().isPaused() || i ? !1 : c !== !1 : l, Y = (se) => {
      const ce = $n(se);
      return delete ce._k, ne ? {
        isValidating: !0,
        isLoading: !0,
        ...ce
      } : ce;
    }, ae = $(), W = D(), oe = Y(ae), ye = ae === W ? oe : Y(W);
    let ge = oe;
    return [
      () => {
        const se = Y($());
        return N(se, ge) ? (ge.data = se.data, ge.isLoading = se.isLoading, ge.isValidating = se.isValidating, ge.error = se.error, ge) : (ge = se, se);
      },
      () => ye
    ];
  }, [
    r,
    b
  ]), G = vk.useSyncExternalStore(go(
    (ne) => v(b, (Y, ae) => {
      N(ae, Y) || ne();
    }),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [
      r,
      b
    ]
  ), _[0], _[1]), L = !O.current, V = g[b] && g[b].length > 0, R = G.data, B = De(R) ? I && Wh(I) ? ya(I) : I : R, H = G.error, K = Wn(B), te = y ? De(R) ? De(K.current) ? B : K.current : R : B, ee = V && !De(H) ? !1 : L && !De(l) ? l : F().isPaused() ? !1 : i ? De(B) ? !1 : c : De(B) || c, J = !!(b && t && L && ee), ie = De(G.isValidating) ? J : G.isValidating, re = De(G.isLoading) ? J : G.isLoading, q = go(
    async (ne) => {
      const Y = P.current;
      if (!b || !Y || w.current || F().isPaused())
        return !1;
      let ae, W, oe = !0;
      const ye = ne || {}, ge = !p[b] || !ye.dedupe, se = () => Od ? !w.current && b === S.current && O.current : b === S.current, ce = {
        isValidating: !1,
        isLoading: !1
      }, ue = () => {
        k(ce);
      }, ke = () => {
        const Me = p[b];
        Me && Me[1] === W && delete p[b];
      }, Te = {
        isValidating: !0
      };
      De($().data) && (Te.isLoading = !0);
      try {
        if (ge && (k(Te), n.loadingTimeout && De($().data) && setTimeout(() => {
          oe && se() && F().onLoadingSlow(b, n);
        }, n.loadingTimeout), p[b] = [
          Y(C),
          Ga()
        ]), [ae, W] = p[b], ae = await ae, ge && setTimeout(ke, n.dedupingInterval), !p[b] || p[b][1] !== W)
          return ge && se() && F().onDiscarded(b), !1;
        ce.error = bt;
        const Me = h[b];
        if (!De(Me) && // case 1
        (W <= Me[0] || // case 2
        W <= Me[1] || // case 3
        Me[1] === 0))
          return ue(), ge && se() && F().onDiscarded(b), !1;
        const _e = $().data;
        ce.data = s(_e, ae) ? _e : ae, ge && se() && F().onSuccess(ae, b, n);
      } catch (Me) {
        ke();
        const _e = F(), { shouldRetryOnError: ft } = _e;
        _e.isPaused() || (ce.error = Me, ge && se() && (_e.onError(Me, b, _e), (ft === !0 || nn(ft) && ft(Me)) && (!F().revalidateOnFocus || !F().revalidateOnReconnect || A()) && _e.onErrorRetry(Me, b, _e, (ht) => {
          const Se = g[b];
          Se && Se[0] && Se[0](Sd, ht);
        }, {
          retryCount: (ye.retryCount || 0) + 1,
          dedupe: !0
        })));
      }
      return oe = !1, ue(), !0;
    },
    // `setState` is immutable, and `eventsCallback`, `fnArg`, and
    // `keyValidating` are depending on `key`, so we can exclude them from
    // the deps array.
    //
    // FIXME:
    // `fn` and `config` might be changed during the lifecycle,
    // but they might be changed every render like this.
    // `useSWR('key', () => fetch('/api/'), { suspense: true })`
    // So we omit the values from the deps array
    // even though it might cause unexpected behaviors.
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [
      b,
      r
    ]
  ), X = go(
    // Use callback to make sure `keyRef.current` returns latest result every time
    (...ne) => Uh(r, S.current, ...ne),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    []
  );
  if (pa(() => {
    P.current = t, M.current = n, De(R) || (K.current = R);
  }), pa(() => {
    if (!b) return;
    const ne = q.bind(bt, ga);
    let Y = 0;
    F().revalidateOnFocus && (Y = Date.now() + F().focusThrottleInterval);
    const W = Yk(b, g, (oe, ye = {}) => {
      if (oe == Vh) {
        const ge = Date.now();
        F().revalidateOnFocus && ge > Y && A() && (Y = ge + F().focusThrottleInterval, ne());
      } else if (oe == Lh)
        F().revalidateOnReconnect && A() && ne();
      else {
        if (oe == Bh)
          return q();
        if (oe == Sd)
          return q(ye);
      }
    });
    return w.current = !1, S.current = b, O.current = !0, k({
      _k: C
    }), ee && (p[b] || (De(B) || Vo ? ne() : Rk(ne))), () => {
      w.current = !0, W();
    };
  }, [
    b
  ]), pa(() => {
    let ne;
    function Y() {
      const W = nn(u) ? u($().data) : u;
      W && ne !== -1 && (ne = setTimeout(ae, W));
    }
    function ae() {
      !$().error && (d || F().isVisible()) && (f || F().isOnline()) ? q(ga).then(Y) : Y();
    }
    return Y(), () => {
      ne && (clearTimeout(ne), ne = -1);
    };
  }, [
    u,
    d,
    f,
    b
  ]), Nm(te), i) {
    const ne = b && De(B);
    if (!Od && Vo && ne)
      throw new Error("Fallback data is required when using Suspense in SSR.");
    ne && (P.current = t, M.current = n, w.current = !1);
    const Y = m[b], ae = !De(Y) && ne ? X(Y) : Td;
    if (ya(ae), !De(H) && ne)
      throw H;
    const W = ne ? q(ga) : Td;
    !De(te) && ne && (W.status = "fulfilled", W.value = !0), ya(W);
  }
  return {
    mutate: X,
    get data() {
      return T.data = !0, te;
    },
    get error() {
      return T.error = !0, H;
    },
    get isValidating() {
      return T.isValidating = !0, ie;
    },
    get isLoading() {
      return T.isLoading = !0, re;
    }
  };
}, Gk = Hk(Kk), Xk = {
  // Network & Generic Errors
  "Network Error": "مشكلة في الشبكة، يرجى التحقق من اتصالك بالإنترنت.",
  "Request failed with status code 500": "حدث خطأ في الخادم، يرجى المحاولة مرة أخرى لاحقاً.",
  "Request failed with status code 401": "غير مصرح لك بالقيام بهذه العملية.",
  "Request failed with status code 403": "ليس لديك الصلاحية للوصول إلى هذا المورد.",
  "Request failed with status code 404": "المورد المطلوب غير موجود.",
  "Request failed with status code 400": "طلب غير صالح، يرجى التحقق من البيانات المدخلة.",
  "Request failed with status code 422": "خطأ في التحقق من البيانات المدخلة.",
  "Request failed with status code 409": "تعارض في البيانات، يرجى التحقق والمحاولة مرة أخرى.",
  "Request failed with status code 429": "عدد كبير جداً من الطلبات. يرجى المحاولة لاحقاً.",
  "Timeout exceeded": "انتهت مهلة الاتصال بالخادم، يرجى المحاولة مرة أخرى."
}, Qk = (e = {}) => {
  const t = { ...Xk, ...e };
  return (n) => {
    if (!n) return "حدث خطأ غير متوقع.";
    const r = n.response?.data;
    if (r && r.errors) {
      const a = [];
      for (const l in r.errors)
        for (const c in r.errors[l]) {
          const u = r.errors[l][c];
          a.push(`${c}: ${u.join(", ")}`);
        }
      if (a.length > 0)
        return a.join(" | ");
    }
    const s = r?.error_code === "BUSINESS_LOGIC_ERROR" && r?.message;
    if (s)
      return s;
    const i = n.message;
    return i && t[i] ? t[i] : "حدث خطأ غير متوقع. يرجى المحاولة مرة أخرى.";
  };
}, Yh = Qk(), Zk = (e, t, n = {}) => {
  const { data: r, error: s, isLoading: i, mutate: a } = Gk(e, t, {
    ...n,
    onError: (l) => {
      n.onError && n.onError(l);
    }
  });
  return {
    data: r,
    error: s,
    getTranslatedError: Yh,
    isLoading: i,
    mutate: a
  };
}, kM = (e, { onSuccess: t, onError: n } = {}) => {
  const [r, s] = ut(!1);
  return { handleMutation: async (a) => {
    s(!0);
    try {
      const l = await e(a);
      return t?.(l), l;
    } catch (l) {
      throw n?.(l), l;
    } finally {
      s(!1);
    }
  }, isMutating: r, getTranslatedError: Yh };
}, Jk = (e, t) => {
  const [n, r] = ut(e);
  return ar(() => {
    const s = setTimeout(() => {
      r(e);
    }, t);
    return () => {
      clearTimeout(s);
    };
  }, [e, t]), n;
}, eD = ({ filter: e, value: t, onChange: n }) => {
  const [r, s] = ut(t || ""), i = Jk(r, 500);
  ar(() => {
    (e.type === "text" || e.type === "number" || e.type === "search") && n(e.name, i);
  }, [i, e.type, e.name, n]);
  const a = (l) => {
    e.type !== "text" && e.type !== "number" && e.type !== "search" && n(e.name, l);
  };
  switch (e.type) {
    case "text":
    case "number":
      return /* @__PURE__ */ E.jsx(
        Zn,
        {
          label: e.label,
          type: e.type,
          value: r,
          onChange: (l) => s(l.target.value),
          variant: "outlined",
          fullWidth: !0
        }
      );
    case "search":
      return /* @__PURE__ */ E.jsx(
        Zn,
        {
          label: e.label,
          type: "text",
          value: r,
          onChange: (l) => s(l.target.value),
          variant: "outlined",
          fullWidth: !0,
          InputProps: { endAdornment: /* @__PURE__ */ E.jsx(Jm, { color: "action" }) }
        }
      );
    case "date":
      return /* @__PURE__ */ E.jsx(mi, { dateAdapter: mk, children: /* @__PURE__ */ E.jsx(
        rc,
        {
          label: e.label,
          value: t || null,
          onChange: a,
          renderInput: (l) => /* @__PURE__ */ E.jsx(Zn, { ...l, fullWidth: !0 })
        }
      ) });
    case "select":
      return /* @__PURE__ */ E.jsx(
        Zn,
        {
          select: !0,
          label: e.label,
          value: t || "",
          onChange: (l) => a(l.target.value),
          variant: "outlined",
          fullWidth: !0,
          children: e.options.map((l) => /* @__PURE__ */ E.jsx(Wm, { value: l.value, children: l.label }, l.value))
        }
      );
    case "autocomplete":
      return /* @__PURE__ */ E.jsx(
        ef,
        {
          options: e.options || [],
          getOptionLabel: (l) => l.label || "",
          value: t || null,
          onChange: (l, c) => a(c),
          renderInput: (l) => /* @__PURE__ */ E.jsx(Zn, { ...l, label: e.label })
        }
      );
    case "switch":
      return /* @__PURE__ */ E.jsx(
        tf,
        {
          control: /* @__PURE__ */ E.jsx(nf, { checked: t || !1, onChange: (l) => a(l.target.checked), name: e.name }),
          label: e.label
        }
      );
    default:
      return null;
  }
}, tD = ({ filterOptions: e, filters: t, onFilterChange: n }) => {
  const [r, s] = ut(!0);
  return /* @__PURE__ */ E.jsxs(xt, { sx: { mb: 3 }, children: [
    /* @__PURE__ */ E.jsx(Ir, { onClick: () => s(!r), sx: { mb: 2 }, children: r ? "إخفاء الفلاتر" : "إظهار الفلاتر" }),
    /* @__PURE__ */ E.jsx(Bm, { in: r, children: /* @__PURE__ */ E.jsx(bc, { container: !0, spacing: 2, alignItems: "center", children: e.map((i) => {
      const a = i.type === "search" ? { xs: 12, sm: 12, md: 6, lg: 6 } : { xs: 12, sm: 6, md: 3, lg: 3 };
      return /* @__PURE__ */ E.jsx(bc, { size: a, children: /* @__PURE__ */ E.jsx(
        eD,
        {
          filter: i,
          value: t[i.name],
          onChange: n
        }
      ) }, i.name);
    }) }) })
  ] });
}, nD = ({ resourceName: e, createPath: t, createText: n, linkComponent: r }) => {
  const s = r;
  return /* @__PURE__ */ E.jsxs(Tr, { sx: { p: "0 !important", mb: 2, display: "flex", flexDirection: { xs: "column", sm: "row" }, alignItems: { xs: "flex-start", sm: "center" } }, children: [
    /* @__PURE__ */ E.jsx(In, { variant: "h4", component: "h1", sx: { flexGrow: 1, mb: { xs: 2, sm: 0 } }, children: e }),
    t && /* @__PURE__ */ E.jsx(
      Ir,
      {
        variant: "contained",
        startIcon: /* @__PURE__ */ E.jsx(ey, {}),
        ...s ? { component: s, to: t } : { href: t },
        children: n
      }
    )
  ] });
}, DM = ({
  resourceName: e,
  columns: t,
  api: n,
  createPath: r,
  createText: s = "Create New",
  filterOptions: i = [],
  searchable: a = !1,
  searchPlaceholder: l = "Search...",
  sorting: c = !1,
  showRowNumber: u = !0,
  linkComponent: d,
  renderHeader: f = nD,
  requestAdapter: y = (h) => h,
  responseAdapter: g = (h) => h
}) => {
  const [h, p] = ut(1), [m, b] = ut(10), [C, O] = ut([]), [w, S] = ut({}), P = { page: h, per_page: m, ...w };
  C.length > 0 && (P.sort_by = C[0].field, P.sort_order = C[0].sort);
  const M = y(P), { data: F, isLoading: A, error: $ } = Zk(
    [e, M],
    async () => {
      const D = await n.list(M);
      return g(D);
    },
    { keepPreviousData: !0 }
  ), k = go((D, T) => {
    p(1), S((I) => ({ ...I, [D]: T }));
  }, []), v = [
    ...a ? [{ name: "q", label: l, type: "search" }] : [],
    ...i
  ];
  return /* @__PURE__ */ E.jsxs(xt, { children: [
    f({ resourceName: e, createPath: r, createText: s, linkComponent: d }),
    /* @__PURE__ */ E.jsx(tD, { filterOptions: v, filters: w, onFilterChange: k }),
    /* @__PURE__ */ E.jsx(
      dy,
      {
        rows: F?.items || [],
        columns: t,
        loading: A,
        error: $,
        pagination: !0,
        rowCount: F && F.pagination ? F.pagination.total : 0,
        page: h,
        onPageChange: p,
        perPage: m,
        onPerPageChange: (D) => {
          b(D), p(1);
        },
        sorting: c,
        sortModel: C,
        onSortModelChange: (D) => {
          O(D), p(1);
        },
        showRowNumber: u
      }
    )
  ] });
}, rD = ({ isSubmitting: e, onCancel: t }) => /* @__PURE__ */ E.jsxs(xt, { sx: { mt: 3, display: "flex", gap: 2 }, children: [
  /* @__PURE__ */ E.jsx(
    Ir,
    {
      type: "submit",
      variant: "contained",
      disabled: e,
      children: e ? /* @__PURE__ */ E.jsx(Bo, { size: 24 }) : "Save"
    }
  ),
  t && /* @__PURE__ */ E.jsx(Ir, { variant: "outlined", onClick: t, disabled: e, children: "Cancel" })
] }), MM = ({
  resourceName: e,
  id: t,
  api: n,
  FormComponent: r,
  onSuccess: s = () => {
  },
  onCancel: i,
  responseAdapter: a = (u) => u,
  requestAdapter: l = (u) => u,
  renderActions: c = rD
}) => {
  const [u, d] = ut(null), [f, y] = ut(!1), [g, h] = ut(null), [p, m] = ut(!1), b = t != null;
  ar(() => {
    b && (y(!0), h(null), n.getOne(t).then((w) => d(a(w))).catch((w) => h(w)).finally(() => y(!1)));
  }, [n, t, b, a]);
  const C = async (w) => {
    m(!0), h(null);
    const S = l(w);
    try {
      const P = b ? await n.update(t, S) : await n.create(S);
      s(P.data);
    } catch (P) {
      h(P), m(!1);
    }
  }, O = b ? `Edit ${e}` : `Create ${e}`;
  return f ? /* @__PURE__ */ E.jsx(Bo, {}) : g && !p ? /* @__PURE__ */ E.jsx(Oa, { severity: "error", children: g.message || "Failed to load resource data." }) : /* @__PURE__ */ E.jsxs(xt, { children: [
    /* @__PURE__ */ E.jsx(Tr, { sx: { p: "0 !important", mb: 2 }, children: /* @__PURE__ */ E.jsx(In, { variant: "h4", component: "h1", children: O }) }),
    /* @__PURE__ */ E.jsx(ei, { sx: { p: 3 }, children: (!b || u) && /* @__PURE__ */ E.jsxs(sf, { onSubmit: C, initialValues: u, children: [
      /* @__PURE__ */ E.jsx(r, {}),
      g && p && /* @__PURE__ */ E.jsx(Oa, { severity: "error", sx: { mt: 2 }, children: g.message || "An error occurred during submission." }),
      c({ isSubmitting: p, onCancel: i })
    ] }) })
  ] });
};
var ba, Rd;
function oD() {
  if (Rd) return ba;
  Rd = 1;
  function e(b) {
    this._maxSize = b, this.clear();
  }
  e.prototype.clear = function() {
    this._size = 0, this._values = /* @__PURE__ */ Object.create(null);
  }, e.prototype.get = function(b) {
    return this._values[b];
  }, e.prototype.set = function(b, C) {
    return this._size >= this._maxSize && this.clear(), b in this._values || this._size++, this._values[b] = C;
  };
  var t = /[^.^\]^[]+|(?=\[\]|\.\.)/g, n = /^\d+$/, r = /^\d/, s = /[~`!#$%\^&*+=\-\[\]\\';,/{}|\\":<>\?]/g, i = /^\s*(['"]?)(.*?)(\1)\s*$/, a = 512, l = new e(a), c = new e(a), u = new e(a);
  ba = {
    Cache: e,
    split: f,
    normalizePath: d,
    setter: function(b) {
      var C = d(b);
      return c.get(b) || c.set(b, function(w, S) {
        for (var P = 0, M = C.length, F = w; P < M - 1; ) {
          var A = C[P];
          if (A === "__proto__" || A === "constructor" || A === "prototype")
            return w;
          F = F[C[P++]];
        }
        F[C[P]] = S;
      });
    },
    getter: function(b, C) {
      var O = d(b);
      return u.get(b) || u.set(b, function(S) {
        for (var P = 0, M = O.length; P < M; )
          if (S != null || !C) S = S[O[P++]];
          else return;
        return S;
      });
    },
    join: function(b) {
      return b.reduce(function(C, O) {
        return C + (g(O) || n.test(O) ? "[" + O + "]" : (C ? "." : "") + O);
      }, "");
    },
    forEach: function(b, C, O) {
      y(Array.isArray(b) ? b : f(b), C, O);
    }
  };
  function d(b) {
    return l.get(b) || l.set(
      b,
      f(b).map(function(C) {
        return C.replace(i, "$2");
      })
    );
  }
  function f(b) {
    return b.match(t) || [""];
  }
  function y(b, C, O) {
    var w = b.length, S, P, M, F;
    for (P = 0; P < w; P++)
      S = b[P], S && (m(S) && (S = '"' + S + '"'), F = g(S), M = !F && /^\d+$/.test(S), C.call(O, S, F, M, P, b));
  }
  function g(b) {
    return typeof b == "string" && b && ["'", '"'].indexOf(b.charAt(0)) !== -1;
  }
  function h(b) {
    return b.match(r) && !b.match(n);
  }
  function p(b) {
    return s.test(b);
  }
  function m(b) {
    return !g(b) && (h(b) || p(b));
  }
  return ba;
}
var sr = oD(), va, kd;
function sD() {
  if (kd) return va;
  kd = 1;
  const e = /[A-Z\xc0-\xd6\xd8-\xde]?[a-z\xdf-\xf6\xf8-\xff]+(?:['’](?:d|ll|m|re|s|t|ve))?(?=[\xac\xb1\xd7\xf7\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\xbf\u2000-\u206f \t\x0b\f\xa0\ufeff\n\r\u2028\u2029\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000]|[A-Z\xc0-\xd6\xd8-\xde]|$)|(?:[A-Z\xc0-\xd6\xd8-\xde]|[^\ud800-\udfff\xac\xb1\xd7\xf7\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\xbf\u2000-\u206f \t\x0b\f\xa0\ufeff\n\r\u2028\u2029\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\d+\u2700-\u27bfa-z\xdf-\xf6\xf8-\xffA-Z\xc0-\xd6\xd8-\xde])+(?:['’](?:D|LL|M|RE|S|T|VE))?(?=[\xac\xb1\xd7\xf7\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\xbf\u2000-\u206f \t\x0b\f\xa0\ufeff\n\r\u2028\u2029\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000]|[A-Z\xc0-\xd6\xd8-\xde](?:[a-z\xdf-\xf6\xf8-\xff]|[^\ud800-\udfff\xac\xb1\xd7\xf7\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\xbf\u2000-\u206f \t\x0b\f\xa0\ufeff\n\r\u2028\u2029\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\d+\u2700-\u27bfa-z\xdf-\xf6\xf8-\xffA-Z\xc0-\xd6\xd8-\xde])|$)|[A-Z\xc0-\xd6\xd8-\xde]?(?:[a-z\xdf-\xf6\xf8-\xff]|[^\ud800-\udfff\xac\xb1\xd7\xf7\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\xbf\u2000-\u206f \t\x0b\f\xa0\ufeff\n\r\u2028\u2029\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\d+\u2700-\u27bfa-z\xdf-\xf6\xf8-\xffA-Z\xc0-\xd6\xd8-\xde])+(?:['’](?:d|ll|m|re|s|t|ve))?|[A-Z\xc0-\xd6\xd8-\xde]+(?:['’](?:D|LL|M|RE|S|T|VE))?|\d*(?:1ST|2ND|3RD|(?![123])\dTH)(?=\b|[a-z_])|\d*(?:1st|2nd|3rd|(?![123])\dth)(?=\b|[A-Z_])|\d+|(?:[\u2700-\u27bf]|(?:\ud83c[\udde6-\uddff]){2}|[\ud800-\udbff][\udc00-\udfff])[\ufe0e\ufe0f]?(?:[\u0300-\u036f\ufe20-\ufe2f\u20d0-\u20ff]|\ud83c[\udffb-\udfff])?(?:\u200d(?:[^\ud800-\udfff]|(?:\ud83c[\udde6-\uddff]){2}|[\ud800-\udbff][\udc00-\udfff])[\ufe0e\ufe0f]?(?:[\u0300-\u036f\ufe20-\ufe2f\u20d0-\u20ff]|\ud83c[\udffb-\udfff])?)*/g, t = (d) => d.match(e) || [], n = (d) => d[0].toUpperCase() + d.slice(1), r = (d, f) => t(d).join(f).toLowerCase(), s = (d) => t(d).reduce(
    (f, y) => `${f}${f ? y[0].toUpperCase() + y.slice(1).toLowerCase() : y.toLowerCase()}`,
    ""
  );
  return va = {
    words: t,
    upperFirst: n,
    camelCase: s,
    pascalCase: (d) => n(s(d)),
    snakeCase: (d) => r(d, "_"),
    kebabCase: (d) => r(d, "-"),
    sentenceCase: (d) => n(r(d, " ")),
    titleCase: (d) => t(d).map(n).join(" ")
  }, va;
}
var xa = sD(), Cs = { exports: {} }, Dd;
function iD() {
  if (Dd) return Cs.exports;
  Dd = 1, Cs.exports = function(s) {
    return e(t(s), s);
  }, Cs.exports.array = e;
  function e(s, i) {
    var a = s.length, l = new Array(a), c = {}, u = a, d = n(i), f = r(s);
    for (i.forEach(function(g) {
      if (!f.has(g[0]) || !f.has(g[1]))
        throw new Error("Unknown node. There is an unknown node in the supplied edges.");
    }); u--; )
      c[u] || y(s[u], u, /* @__PURE__ */ new Set());
    return l;
    function y(g, h, p) {
      if (p.has(g)) {
        var m;
        try {
          m = ", node was:" + JSON.stringify(g);
        } catch {
          m = "";
        }
        throw new Error("Cyclic dependency" + m);
      }
      if (!f.has(g))
        throw new Error("Found unknown node. Make sure to provided all involved nodes. Unknown node: " + JSON.stringify(g));
      if (!c[h]) {
        c[h] = !0;
        var b = d.get(g) || /* @__PURE__ */ new Set();
        if (b = Array.from(b), h = b.length) {
          p.add(g);
          do {
            var C = b[--h];
            y(C, f.get(C), p);
          } while (h);
          p.delete(g);
        }
        l[--a] = g;
      }
    }
  }
  function t(s) {
    for (var i = /* @__PURE__ */ new Set(), a = 0, l = s.length; a < l; a++) {
      var c = s[a];
      i.add(c[0]), i.add(c[1]);
    }
    return Array.from(i);
  }
  function n(s) {
    for (var i = /* @__PURE__ */ new Map(), a = 0, l = s.length; a < l; a++) {
      var c = s[a];
      i.has(c[0]) || i.set(c[0], /* @__PURE__ */ new Set()), i.has(c[1]) || i.set(c[1], /* @__PURE__ */ new Set()), i.get(c[0]).add(c[1]);
    }
    return i;
  }
  function r(s) {
    for (var i = /* @__PURE__ */ new Map(), a = 0, l = s.length; a < l; a++)
      i.set(s[a], a);
    return i;
  }
  return Cs.exports;
}
var aD = iD();
const lD = /* @__PURE__ */ of(aD), cD = Object.prototype.toString, uD = Error.prototype.toString, dD = RegExp.prototype.toString, fD = typeof Symbol < "u" ? Symbol.prototype.toString : () => "", pD = /^Symbol\((.*)\)(.*)$/;
function hD(e) {
  return e != +e ? "NaN" : e === 0 && 1 / e < 0 ? "-0" : "" + e;
}
function Md(e, t = !1) {
  if (e == null || e === !0 || e === !1) return "" + e;
  const n = typeof e;
  if (n === "number") return hD(e);
  if (n === "string") return t ? `"${e}"` : e;
  if (n === "function") return "[Function " + (e.name || "anonymous") + "]";
  if (n === "symbol") return fD.call(e).replace(pD, "Symbol($1)");
  const r = cD.call(e).slice(8, -1);
  return r === "Date" ? isNaN(e.getTime()) ? "" + e : e.toISOString(e) : r === "Error" || e instanceof Error ? "[" + uD.call(e) + "]" : r === "RegExp" ? dD.call(e) : null;
}
function Mn(e, t) {
  let n = Md(e, t);
  return n !== null ? n : JSON.stringify(e, function(r, s) {
    let i = Md(this[r], t);
    return i !== null ? i : s;
  }, 2);
}
function Kh(e) {
  return e == null ? [] : [].concat(e);
}
let Gh, Xh, Qh, mD = /\$\{\s*(\w+)\s*\}/g;
Gh = Symbol.toStringTag;
class Id {
  constructor(t, n, r, s) {
    this.name = void 0, this.message = void 0, this.value = void 0, this.path = void 0, this.type = void 0, this.params = void 0, this.errors = void 0, this.inner = void 0, this[Gh] = "Error", this.name = "ValidationError", this.value = n, this.path = r, this.type = s, this.errors = [], this.inner = [], Kh(t).forEach((i) => {
      if (St.isError(i)) {
        this.errors.push(...i.errors);
        const a = i.inner.length ? i.inner : [i];
        this.inner.push(...a);
      } else
        this.errors.push(i);
    }), this.message = this.errors.length > 1 ? `${this.errors.length} errors occurred` : this.errors[0];
  }
}
Xh = Symbol.hasInstance;
Qh = Symbol.toStringTag;
class St extends Error {
  static formatError(t, n) {
    const r = n.label || n.path || "this";
    return n = Object.assign({}, n, {
      path: r,
      originalPath: n.path
    }), typeof t == "string" ? t.replace(mD, (s, i) => Mn(n[i])) : typeof t == "function" ? t(n) : t;
  }
  static isError(t) {
    return t && t.name === "ValidationError";
  }
  constructor(t, n, r, s, i) {
    const a = new Id(t, n, r, s);
    if (i)
      return a;
    super(), this.value = void 0, this.path = void 0, this.type = void 0, this.params = void 0, this.errors = [], this.inner = [], this[Qh] = "Error", this.name = a.name, this.message = a.message, this.type = a.type, this.value = a.value, this.path = a.path, this.errors = a.errors, this.inner = a.inner, Error.captureStackTrace && Error.captureStackTrace(this, St);
  }
  static [Xh](t) {
    return Id[Symbol.hasInstance](t) || super[Symbol.hasInstance](t);
  }
}
let Qt = {
  default: "${path} is invalid",
  required: "${path} is a required field",
  defined: "${path} must be defined",
  notNull: "${path} cannot be null",
  oneOf: "${path} must be one of the following values: ${values}",
  notOneOf: "${path} must not be one of the following values: ${values}",
  notType: ({
    path: e,
    type: t,
    value: n,
    originalValue: r
  }) => {
    const s = r != null && r !== n ? ` (cast from the value \`${Mn(r, !0)}\`).` : ".";
    return t !== "mixed" ? `${e} must be a \`${t}\` type, but the final value was: \`${Mn(n, !0)}\`` + s : `${e} must match the configured type. The validated value was: \`${Mn(n, !0)}\`` + s;
  }
}, Ct = {
  length: "${path} must be exactly ${length} characters",
  min: "${path} must be at least ${min} characters",
  max: "${path} must be at most ${max} characters",
  matches: '${path} must match the following: "${regex}"',
  email: "${path} must be a valid email",
  url: "${path} must be a valid URL",
  uuid: "${path} must be a valid UUID",
  datetime: "${path} must be a valid ISO date-time",
  datetime_precision: "${path} must be a valid ISO date-time with a sub-second precision of exactly ${precision} digits",
  datetime_offset: '${path} must be a valid ISO date-time with UTC "Z" timezone',
  trim: "${path} must be a trimmed string",
  lowercase: "${path} must be a lowercase string",
  uppercase: "${path} must be a upper case string"
}, yD = {
  min: "${path} must be greater than or equal to ${min}",
  max: "${path} must be less than or equal to ${max}",
  lessThan: "${path} must be less than ${less}",
  moreThan: "${path} must be greater than ${more}",
  positive: "${path} must be a positive number",
  negative: "${path} must be a negative number",
  integer: "${path} must be an integer"
}, Xa = {
  min: "${path} field must be later than ${min}",
  max: "${path} field must be at earlier than ${max}"
}, gD = {
  isValue: "${path} field must be ${value}"
}, Is = {
  noUnknown: "${path} field has unspecified keys: ${unknown}",
  exact: "${path} object contains unknown properties: ${properties}"
}, bD = {
  min: "${path} field must have at least ${min} items",
  max: "${path} field must have less than or equal to ${max} items",
  length: "${path} must have ${length} items"
}, vD = {
  notType: (e) => {
    const {
      path: t,
      value: n,
      spec: r
    } = e, s = r.types.length;
    if (Array.isArray(n)) {
      if (n.length < s) return `${t} tuple value has too few items, expected a length of ${s} but got ${n.length} for value: \`${Mn(n, !0)}\``;
      if (n.length > s) return `${t} tuple value has too many items, expected a length of ${s} but got ${n.length} for value: \`${Mn(n, !0)}\``;
    }
    return St.formatError(Qt.notType, e);
  }
};
Object.assign(/* @__PURE__ */ Object.create(null), {
  mixed: Qt,
  string: Ct,
  number: yD,
  date: Xa,
  object: Is,
  array: bD,
  boolean: gD,
  tuple: vD
});
const dc = (e) => e && e.__isYupSchema__;
class Qs {
  static fromOptions(t, n) {
    if (!n.then && !n.otherwise) throw new TypeError("either `then:` or `otherwise:` is required for `when()` conditions");
    let {
      is: r,
      then: s,
      otherwise: i
    } = n, a = typeof r == "function" ? r : (...l) => l.every((c) => c === r);
    return new Qs(t, (l, c) => {
      var u;
      let d = a(...l) ? s : i;
      return (u = d?.(c)) != null ? u : c;
    });
  }
  constructor(t, n) {
    this.fn = void 0, this.refs = t, this.refs = t, this.fn = n;
  }
  resolve(t, n) {
    let r = this.refs.map((i) => (
      // TODO: ? operator here?
      i.getValue(n?.value, n?.parent, n?.context)
    )), s = this.fn(r, t, n);
    if (s === void 0 || // @ts-ignore this can be base
    s === t)
      return t;
    if (!dc(s)) throw new TypeError("conditions must return a schema object");
    return s.resolve(n);
  }
}
const Ps = {
  context: "$",
  value: "."
};
class pr {
  constructor(t, n = {}) {
    if (this.key = void 0, this.isContext = void 0, this.isValue = void 0, this.isSibling = void 0, this.path = void 0, this.getter = void 0, this.map = void 0, typeof t != "string") throw new TypeError("ref must be a string, got: " + t);
    if (this.key = t.trim(), t === "") throw new TypeError("ref must be a non-empty string");
    this.isContext = this.key[0] === Ps.context, this.isValue = this.key[0] === Ps.value, this.isSibling = !this.isContext && !this.isValue;
    let r = this.isContext ? Ps.context : this.isValue ? Ps.value : "";
    this.path = this.key.slice(r.length), this.getter = this.path && sr.getter(this.path, !0), this.map = n.map;
  }
  getValue(t, n, r) {
    let s = this.isContext ? r : this.isValue ? t : n;
    return this.getter && (s = this.getter(s || {})), this.map && (s = this.map(s)), s;
  }
  /**
   *
   * @param {*} value
   * @param {Object} options
   * @param {Object=} options.context
   * @param {Object=} options.parent
   */
  cast(t, n) {
    return this.getValue(t, n?.parent, n?.context);
  }
  resolve() {
    return this;
  }
  describe() {
    return {
      type: "ref",
      key: this.key
    };
  }
  toString() {
    return `Ref(${this.key})`;
  }
  static isRef(t) {
    return t && t.__isYupRef;
  }
}
pr.prototype.__isYupRef = !0;
const tr = (e) => e == null;
function Sr(e) {
  function t({
    value: n,
    path: r = "",
    options: s,
    originalValue: i,
    schema: a
  }, l, c) {
    const {
      name: u,
      test: d,
      params: f,
      message: y,
      skipAbsent: g
    } = e;
    let {
      parent: h,
      context: p,
      abortEarly: m = a.spec.abortEarly,
      disableStackTrace: b = a.spec.disableStackTrace
    } = s;
    const C = {
      value: n,
      parent: h,
      context: p
    };
    function O(k = {}) {
      const v = Zh(Object.assign({
        value: n,
        originalValue: i,
        label: a.spec.label,
        path: k.path || r,
        spec: a.spec,
        disableStackTrace: k.disableStackTrace || b
      }, f, k.params), C), D = new St(St.formatError(k.message || y, v), n, v.path, k.type || u, v.disableStackTrace);
      return D.params = v, D;
    }
    const w = m ? l : c;
    let S = {
      path: r,
      parent: h,
      type: u,
      from: s.from,
      createError: O,
      resolve(k) {
        return Jh(k, C);
      },
      options: s,
      originalValue: i,
      schema: a
    };
    const P = (k) => {
      St.isError(k) ? w(k) : k ? c(null) : w(O());
    }, M = (k) => {
      St.isError(k) ? w(k) : l(k);
    };
    if (g && tr(n))
      return P(!0);
    let A;
    try {
      var $;
      if (A = d.call(S, n, S), typeof (($ = A) == null ? void 0 : $.then) == "function") {
        if (s.sync)
          throw new Error(`Validation test of type: "${S.type}" returned a Promise during a synchronous validate. This test will finish after the validate call has returned`);
        return Promise.resolve(A).then(P, M);
      }
    } catch (k) {
      M(k);
      return;
    }
    P(A);
  }
  return t.OPTIONS = e, t;
}
function Zh(e, t) {
  if (!e) return e;
  for (const n of Object.keys(e))
    e[n] = Jh(e[n], t);
  return e;
}
function Jh(e, t) {
  return pr.isRef(e) ? e.getValue(t.value, t.parent, t.context) : e;
}
function xD(e, t, n, r = n) {
  let s, i, a;
  return t ? (sr.forEach(t, (l, c, u) => {
    let d = c ? l.slice(1, l.length - 1) : l;
    e = e.resolve({
      context: r,
      parent: s,
      value: n
    });
    let f = e.type === "tuple", y = u ? parseInt(d, 10) : 0;
    if (e.innerType || f) {
      if (f && !u) throw new Error(`Yup.reach cannot implicitly index into a tuple type. the path part "${a}" must contain an index to the tuple element, e.g. "${a}[0]"`);
      if (n && y >= n.length)
        throw new Error(`Yup.reach cannot resolve an array item at index: ${l}, in the path: ${t}. because there is no value at that index. `);
      s = n, n = n && n[y], e = f ? e.spec.types[y] : e.innerType;
    }
    if (!u) {
      if (!e.fields || !e.fields[d]) throw new Error(`The schema does not contain the path: ${t}. (failed at: ${a} which is a type: "${e.type}")`);
      s = n, n = n && n[d], e = e.fields[d];
    }
    i = d, a = c ? "[" + l + "]" : "." + l;
  }), {
    schema: e,
    parent: s,
    parentPath: i
  }) : {
    parent: s,
    parentPath: t,
    schema: e
  };
}
class Zs extends Set {
  describe() {
    const t = [];
    for (const n of this.values())
      t.push(pr.isRef(n) ? n.describe() : n);
    return t;
  }
  resolveAll(t) {
    let n = [];
    for (const r of this.values())
      n.push(t(r));
    return n;
  }
  clone() {
    return new Zs(this.values());
  }
  merge(t, n) {
    const r = this.clone();
    return t.forEach((s) => r.add(s)), n.forEach((s) => r.delete(s)), r;
  }
}
function Pr(e, t = /* @__PURE__ */ new Map()) {
  if (dc(e) || !e || typeof e != "object") return e;
  if (t.has(e)) return t.get(e);
  let n;
  if (e instanceof Date)
    n = new Date(e.getTime()), t.set(e, n);
  else if (e instanceof RegExp)
    n = new RegExp(e), t.set(e, n);
  else if (Array.isArray(e)) {
    n = new Array(e.length), t.set(e, n);
    for (let r = 0; r < e.length; r++) n[r] = Pr(e[r], t);
  } else if (e instanceof Map) {
    n = /* @__PURE__ */ new Map(), t.set(e, n);
    for (const [r, s] of e.entries()) n.set(r, Pr(s, t));
  } else if (e instanceof Set) {
    n = /* @__PURE__ */ new Set(), t.set(e, n);
    for (const r of e) n.add(Pr(r, t));
  } else if (e instanceof Object) {
    n = {}, t.set(e, n);
    for (const [r, s] of Object.entries(e)) n[r] = Pr(s, t);
  } else
    throw Error(`Unable to clone ${e}`);
  return n;
}
function wD(e) {
  if (!(e != null && e.length))
    return;
  const t = [];
  let n = "", r = !1, s = !1;
  for (let i = 0; i < e.length; i++) {
    const a = e[i];
    if (a === "[" && !s) {
      n && (t.push(...n.split(".").filter(Boolean)), n = ""), r = !0;
      continue;
    }
    if (a === "]" && !s) {
      n && (/^\d+$/.test(n) ? t.push(n) : t.push(n.replace(/^"|"$/g, "")), n = ""), r = !1;
      continue;
    }
    if (a === '"') {
      s = !s;
      continue;
    }
    if (a === "." && !r && !s) {
      n && (t.push(n), n = "");
      continue;
    }
    n += a;
  }
  return n && t.push(...n.split(".").filter(Boolean)), t;
}
function SD(e, t) {
  const n = t ? `${t}.${e.path}` : e.path;
  return e.errors.map((r) => ({
    message: r,
    path: wD(n)
  }));
}
function em(e, t) {
  var n;
  if (!((n = e.inner) != null && n.length) && e.errors.length)
    return SD(e, t);
  const r = t ? `${t}.${e.path}` : e.path;
  return e.inner.flatMap((s) => em(s, r));
}
class un {
  constructor(t) {
    this.type = void 0, this.deps = [], this.tests = void 0, this.transforms = void 0, this.conditions = [], this._mutate = void 0, this.internalTests = {}, this._whitelist = new Zs(), this._blacklist = new Zs(), this.exclusiveTests = /* @__PURE__ */ Object.create(null), this._typeCheck = void 0, this.spec = void 0, this.tests = [], this.transforms = [], this.withMutation(() => {
      this.typeError(Qt.notType);
    }), this.type = t.type, this._typeCheck = t.check, this.spec = Object.assign({
      strip: !1,
      strict: !1,
      abortEarly: !0,
      recursive: !0,
      disableStackTrace: !1,
      nullable: !1,
      optional: !0,
      coerce: !0
    }, t?.spec), this.withMutation((n) => {
      n.nonNullable();
    });
  }
  // TODO: remove
  get _type() {
    return this.type;
  }
  clone(t) {
    if (this._mutate)
      return t && Object.assign(this.spec, t), this;
    const n = Object.create(Object.getPrototypeOf(this));
    return n.type = this.type, n._typeCheck = this._typeCheck, n._whitelist = this._whitelist.clone(), n._blacklist = this._blacklist.clone(), n.internalTests = Object.assign({}, this.internalTests), n.exclusiveTests = Object.assign({}, this.exclusiveTests), n.deps = [...this.deps], n.conditions = [...this.conditions], n.tests = [...this.tests], n.transforms = [...this.transforms], n.spec = Pr(Object.assign({}, this.spec, t)), n;
  }
  label(t) {
    let n = this.clone();
    return n.spec.label = t, n;
  }
  meta(...t) {
    if (t.length === 0) return this.spec.meta;
    let n = this.clone();
    return n.spec.meta = Object.assign(n.spec.meta || {}, t[0]), n;
  }
  withMutation(t) {
    let n = this._mutate;
    this._mutate = !0;
    let r = t(this);
    return this._mutate = n, r;
  }
  concat(t) {
    if (!t || t === this) return this;
    if (t.type !== this.type && this.type !== "mixed") throw new TypeError(`You cannot \`concat()\` schema's of different types: ${this.type} and ${t.type}`);
    let n = this, r = t.clone();
    const s = Object.assign({}, n.spec, r.spec);
    return r.spec = s, r.internalTests = Object.assign({}, n.internalTests, r.internalTests), r._whitelist = n._whitelist.merge(t._whitelist, t._blacklist), r._blacklist = n._blacklist.merge(t._blacklist, t._whitelist), r.tests = n.tests, r.exclusiveTests = n.exclusiveTests, r.withMutation((i) => {
      t.tests.forEach((a) => {
        i.test(a.OPTIONS);
      });
    }), r.transforms = [...n.transforms, ...r.transforms], r;
  }
  isType(t) {
    return t == null ? !!(this.spec.nullable && t === null || this.spec.optional && t === void 0) : this._typeCheck(t);
  }
  resolve(t) {
    let n = this;
    if (n.conditions.length) {
      let r = n.conditions;
      n = n.clone(), n.conditions = [], n = r.reduce((s, i) => i.resolve(s, t), n), n = n.resolve(t);
    }
    return n;
  }
  resolveOptions(t) {
    var n, r, s, i;
    return Object.assign({}, t, {
      from: t.from || [],
      strict: (n = t.strict) != null ? n : this.spec.strict,
      abortEarly: (r = t.abortEarly) != null ? r : this.spec.abortEarly,
      recursive: (s = t.recursive) != null ? s : this.spec.recursive,
      disableStackTrace: (i = t.disableStackTrace) != null ? i : this.spec.disableStackTrace
    });
  }
  /**
   * Run the configured transform pipeline over an input value.
   */
  cast(t, n = {}) {
    let r = this.resolve(Object.assign({}, n, {
      value: t
      // parent: options.parent,
      // context: options.context,
    })), s = n.assert === "ignore-optionality", i = r._cast(t, n);
    if (n.assert !== !1 && !r.isType(i)) {
      if (s && tr(i))
        return i;
      let a = Mn(t), l = Mn(i);
      throw new TypeError(`The value of ${n.path || "field"} could not be cast to a value that satisfies the schema type: "${r.type}". 

attempted value: ${a} 
` + (l !== a ? `result of cast: ${l}` : ""));
    }
    return i;
  }
  _cast(t, n) {
    let r = t === void 0 ? t : this.transforms.reduce((s, i) => i.call(this, s, t, this, n), t);
    return r === void 0 && (r = this.getDefault(n)), r;
  }
  _validate(t, n = {}, r, s) {
    let {
      path: i,
      originalValue: a = t,
      strict: l = this.spec.strict
    } = n, c = t;
    l || (c = this._cast(c, Object.assign({
      assert: !1
    }, n)));
    let u = [];
    for (let d of Object.values(this.internalTests))
      d && u.push(d);
    this.runTests({
      path: i,
      value: c,
      originalValue: a,
      options: n,
      tests: u
    }, r, (d) => {
      if (d.length)
        return s(d, c);
      this.runTests({
        path: i,
        value: c,
        originalValue: a,
        options: n,
        tests: this.tests
      }, r, s);
    });
  }
  /**
   * Executes a set of validations, either schema, produced Tests or a nested
   * schema validate result.
   */
  runTests(t, n, r) {
    let s = !1, {
      tests: i,
      value: a,
      originalValue: l,
      path: c,
      options: u
    } = t, d = (p) => {
      s || (s = !0, n(p, a));
    }, f = (p) => {
      s || (s = !0, r(p, a));
    }, y = i.length, g = [];
    if (!y) return f([]);
    let h = {
      value: a,
      originalValue: l,
      path: c,
      options: u,
      schema: this
    };
    for (let p = 0; p < i.length; p++) {
      const m = i[p];
      m(h, d, function(C) {
        C && (Array.isArray(C) ? g.push(...C) : g.push(C)), --y <= 0 && f(g);
      });
    }
  }
  asNestedTest({
    key: t,
    index: n,
    parent: r,
    parentPath: s,
    originalParent: i,
    options: a
  }) {
    const l = t ?? n;
    if (l == null)
      throw TypeError("Must include `key` or `index` for nested validations");
    const c = typeof l == "number";
    let u = r[l];
    const d = Object.assign({}, a, {
      // Nested validations fields are always strict:
      //    1. parent isn't strict so the casting will also have cast inner values
      //    2. parent is strict in which case the nested values weren't cast either
      strict: !0,
      parent: r,
      value: u,
      originalValue: i[l],
      // FIXME: tests depend on `index` being passed around deeply,
      //   we should not let the options.key/index bleed through
      key: void 0,
      // index: undefined,
      [c ? "index" : "key"]: l,
      path: c || l.includes(".") ? `${s || ""}[${c ? l : `"${l}"`}]` : (s ? `${s}.` : "") + t
    });
    return (f, y, g) => this.resolve(d)._validate(u, d, y, g);
  }
  validate(t, n) {
    var r;
    let s = this.resolve(Object.assign({}, n, {
      value: t
    })), i = (r = n?.disableStackTrace) != null ? r : s.spec.disableStackTrace;
    return new Promise((a, l) => s._validate(t, n, (c, u) => {
      St.isError(c) && (c.value = u), l(c);
    }, (c, u) => {
      c.length ? l(new St(c, u, void 0, void 0, i)) : a(u);
    }));
  }
  validateSync(t, n) {
    var r;
    let s = this.resolve(Object.assign({}, n, {
      value: t
    })), i, a = (r = n?.disableStackTrace) != null ? r : s.spec.disableStackTrace;
    return s._validate(t, Object.assign({}, n, {
      sync: !0
    }), (l, c) => {
      throw St.isError(l) && (l.value = c), l;
    }, (l, c) => {
      if (l.length) throw new St(l, t, void 0, void 0, a);
      i = c;
    }), i;
  }
  isValid(t, n) {
    return this.validate(t, n).then(() => !0, (r) => {
      if (St.isError(r)) return !1;
      throw r;
    });
  }
  isValidSync(t, n) {
    try {
      return this.validateSync(t, n), !0;
    } catch (r) {
      if (St.isError(r)) return !1;
      throw r;
    }
  }
  _getDefault(t) {
    let n = this.spec.default;
    return n == null ? n : typeof n == "function" ? n.call(this, t) : Pr(n);
  }
  getDefault(t) {
    return this.resolve(t || {})._getDefault(t);
  }
  default(t) {
    return arguments.length === 0 ? this._getDefault() : this.clone({
      default: t
    });
  }
  strict(t = !0) {
    return this.clone({
      strict: t
    });
  }
  nullability(t, n) {
    const r = this.clone({
      nullable: t
    });
    return r.internalTests.nullable = Sr({
      message: n,
      name: "nullable",
      test(s) {
        return s === null ? this.schema.spec.nullable : !0;
      }
    }), r;
  }
  optionality(t, n) {
    const r = this.clone({
      optional: t
    });
    return r.internalTests.optionality = Sr({
      message: n,
      name: "optionality",
      test(s) {
        return s === void 0 ? this.schema.spec.optional : !0;
      }
    }), r;
  }
  optional() {
    return this.optionality(!0);
  }
  defined(t = Qt.defined) {
    return this.optionality(!1, t);
  }
  nullable() {
    return this.nullability(!0);
  }
  nonNullable(t = Qt.notNull) {
    return this.nullability(!1, t);
  }
  required(t = Qt.required) {
    return this.clone().withMutation((n) => n.nonNullable(t).defined(t));
  }
  notRequired() {
    return this.clone().withMutation((t) => t.nullable().optional());
  }
  transform(t) {
    let n = this.clone();
    return n.transforms.push(t), n;
  }
  /**
   * Adds a test function to the schema's queue of tests.
   * tests can be exclusive or non-exclusive.
   *
   * - exclusive tests, will replace any existing tests of the same name.
   * - non-exclusive: can be stacked
   *
   * If a non-exclusive test is added to a schema with an exclusive test of the same name
   * the exclusive test is removed and further tests of the same name will be stacked.
   *
   * If an exclusive test is added to a schema with non-exclusive tests of the same name
   * the previous tests are removed and further tests of the same name will replace each other.
   */
  test(...t) {
    let n;
    if (t.length === 1 ? typeof t[0] == "function" ? n = {
      test: t[0]
    } : n = t[0] : t.length === 2 ? n = {
      name: t[0],
      test: t[1]
    } : n = {
      name: t[0],
      message: t[1],
      test: t[2]
    }, n.message === void 0 && (n.message = Qt.default), typeof n.test != "function") throw new TypeError("`test` is a required parameters");
    let r = this.clone(), s = Sr(n), i = n.exclusive || n.name && r.exclusiveTests[n.name] === !0;
    if (n.exclusive && !n.name)
      throw new TypeError("Exclusive tests must provide a unique `name` identifying the test");
    return n.name && (r.exclusiveTests[n.name] = !!n.exclusive), r.tests = r.tests.filter((a) => !(a.OPTIONS.name === n.name && (i || a.OPTIONS.test === s.OPTIONS.test))), r.tests.push(s), r;
  }
  when(t, n) {
    !Array.isArray(t) && typeof t != "string" && (n = t, t = ".");
    let r = this.clone(), s = Kh(t).map((i) => new pr(i));
    return s.forEach((i) => {
      i.isSibling && r.deps.push(i.key);
    }), r.conditions.push(typeof n == "function" ? new Qs(s, n) : Qs.fromOptions(s, n)), r;
  }
  typeError(t) {
    let n = this.clone();
    return n.internalTests.typeError = Sr({
      message: t,
      name: "typeError",
      skipAbsent: !0,
      test(r) {
        return this.schema._typeCheck(r) ? !0 : this.createError({
          params: {
            type: this.schema.type
          }
        });
      }
    }), n;
  }
  oneOf(t, n = Qt.oneOf) {
    let r = this.clone();
    return t.forEach((s) => {
      r._whitelist.add(s), r._blacklist.delete(s);
    }), r.internalTests.whiteList = Sr({
      message: n,
      name: "oneOf",
      skipAbsent: !0,
      test(s) {
        let i = this.schema._whitelist, a = i.resolveAll(this.resolve);
        return a.includes(s) ? !0 : this.createError({
          params: {
            values: Array.from(i).join(", "),
            resolved: a
          }
        });
      }
    }), r;
  }
  notOneOf(t, n = Qt.notOneOf) {
    let r = this.clone();
    return t.forEach((s) => {
      r._blacklist.add(s), r._whitelist.delete(s);
    }), r.internalTests.blacklist = Sr({
      message: n,
      name: "notOneOf",
      test(s) {
        let i = this.schema._blacklist, a = i.resolveAll(this.resolve);
        return a.includes(s) ? this.createError({
          params: {
            values: Array.from(i).join(", "),
            resolved: a
          }
        }) : !0;
      }
    }), r;
  }
  strip(t = !0) {
    let n = this.clone();
    return n.spec.strip = t, n;
  }
  /**
   * Return a serialized description of the schema including validations, flags, types etc.
   *
   * @param options Provide any needed context for resolving runtime schema alterations (lazy, when conditions, etc).
   */
  describe(t) {
    const n = (t ? this.resolve(t) : this).clone(), {
      label: r,
      meta: s,
      optional: i,
      nullable: a
    } = n.spec;
    return {
      meta: s,
      label: r,
      optional: i,
      nullable: a,
      default: n.getDefault(t),
      type: n.type,
      oneOf: n._whitelist.describe(),
      notOneOf: n._blacklist.describe(),
      tests: n.tests.filter((c, u, d) => d.findIndex((f) => f.OPTIONS.name === c.OPTIONS.name) === u).map((c) => {
        const u = c.OPTIONS.params && t ? Zh(Object.assign({}, c.OPTIONS.params), t) : c.OPTIONS.params;
        return {
          name: c.OPTIONS.name,
          params: u
        };
      })
    };
  }
  get "~standard"() {
    const t = this;
    return {
      version: 1,
      vendor: "yup",
      async validate(r) {
        try {
          return {
            value: await t.validate(r, {
              abortEarly: !1
            })
          };
        } catch (s) {
          if (s instanceof St)
            return {
              issues: em(s)
            };
          throw s;
        }
      }
    };
  }
}
un.prototype.__isYupSchema__ = !0;
for (const e of ["validate", "validateSync"]) un.prototype[`${e}At`] = function(t, n, r = {}) {
  const {
    parent: s,
    parentPath: i,
    schema: a
  } = xD(this, t, n, r.context);
  return a[e](s && s[i], Object.assign({}, r, {
    parent: s,
    path: t
  }));
};
for (const e of ["equals", "is"]) un.prototype[e] = un.prototype.oneOf;
for (const e of ["not", "nope"]) un.prototype[e] = un.prototype.notOneOf;
const ED = /^(\d{4}|[+-]\d{6})(?:-?(\d{2})(?:-?(\d{2}))?)?(?:[ T]?(\d{2}):?(\d{2})(?::?(\d{2})(?:[,.](\d{1,}))?)?(?:(Z)|([+-])(\d{2})(?::?(\d{2}))?)?)?$/;
function OD(e) {
  const t = Qa(e);
  if (!t) return Date.parse ? Date.parse(e) : Number.NaN;
  if (t.z === void 0 && t.plusMinus === void 0)
    return new Date(t.year, t.month, t.day, t.hour, t.minute, t.second, t.millisecond).valueOf();
  let n = 0;
  return t.z !== "Z" && t.plusMinus !== void 0 && (n = t.hourOffset * 60 + t.minuteOffset, t.plusMinus === "+" && (n = 0 - n)), Date.UTC(t.year, t.month, t.day, t.hour, t.minute + n, t.second, t.millisecond);
}
function Qa(e) {
  var t, n;
  const r = ED.exec(e);
  return r ? {
    year: hn(r[1]),
    month: hn(r[2], 1) - 1,
    day: hn(r[3], 1),
    hour: hn(r[4]),
    minute: hn(r[5]),
    second: hn(r[6]),
    millisecond: r[7] ? (
      // allow arbitrary sub-second precision beyond milliseconds
      hn(r[7].substring(0, 3))
    ) : 0,
    precision: (t = (n = r[7]) == null ? void 0 : n.length) != null ? t : void 0,
    z: r[8] || void 0,
    plusMinus: r[9] || void 0,
    hourOffset: hn(r[10]),
    minuteOffset: hn(r[11])
  } : null;
}
function hn(e, t = 0) {
  return Number(e) || t;
}
let CD = (
  // eslint-disable-next-line
  /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/
), PD = (
  // eslint-disable-next-line
  /^((https?|ftp):)?\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i
), TD = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i, RD = "^\\d{4}-\\d{2}-\\d{2}", kD = "\\d{2}:\\d{2}:\\d{2}", DD = "(([+-]\\d{2}(:?\\d{2})?)|Z)", MD = new RegExp(`${RD}T${kD}(\\.\\d+)?${DD}$`), ID = (e) => tr(e) || e === e.trim(), ND = {}.toString();
function Ns() {
  return new tm();
}
class tm extends un {
  constructor() {
    super({
      type: "string",
      check(t) {
        return t instanceof String && (t = t.valueOf()), typeof t == "string";
      }
    }), this.withMutation(() => {
      this.transform((t, n) => {
        if (!this.spec.coerce || this.isType(t) || Array.isArray(t)) return t;
        const r = t != null && t.toString ? t.toString() : t;
        return r === ND ? t : r;
      });
    });
  }
  required(t) {
    return super.required(t).withMutation((n) => n.test({
      message: t || Qt.required,
      name: "required",
      skipAbsent: !0,
      test: (r) => !!r.length
    }));
  }
  notRequired() {
    return super.notRequired().withMutation((t) => (t.tests = t.tests.filter((n) => n.OPTIONS.name !== "required"), t));
  }
  length(t, n = Ct.length) {
    return this.test({
      message: n,
      name: "length",
      exclusive: !0,
      params: {
        length: t
      },
      skipAbsent: !0,
      test(r) {
        return r.length === this.resolve(t);
      }
    });
  }
  min(t, n = Ct.min) {
    return this.test({
      message: n,
      name: "min",
      exclusive: !0,
      params: {
        min: t
      },
      skipAbsent: !0,
      test(r) {
        return r.length >= this.resolve(t);
      }
    });
  }
  max(t, n = Ct.max) {
    return this.test({
      name: "max",
      exclusive: !0,
      message: n,
      params: {
        max: t
      },
      skipAbsent: !0,
      test(r) {
        return r.length <= this.resolve(t);
      }
    });
  }
  matches(t, n) {
    let r = !1, s, i;
    return n && (typeof n == "object" ? {
      excludeEmptyString: r = !1,
      message: s,
      name: i
    } = n : s = n), this.test({
      name: i || "matches",
      message: s || Ct.matches,
      params: {
        regex: t
      },
      skipAbsent: !0,
      test: (a) => a === "" && r || a.search(t) !== -1
    });
  }
  email(t = Ct.email) {
    return this.matches(CD, {
      name: "email",
      message: t,
      excludeEmptyString: !0
    });
  }
  url(t = Ct.url) {
    return this.matches(PD, {
      name: "url",
      message: t,
      excludeEmptyString: !0
    });
  }
  uuid(t = Ct.uuid) {
    return this.matches(TD, {
      name: "uuid",
      message: t,
      excludeEmptyString: !1
    });
  }
  datetime(t) {
    let n = "", r, s;
    return t && (typeof t == "object" ? {
      message: n = "",
      allowOffset: r = !1,
      precision: s = void 0
    } = t : n = t), this.matches(MD, {
      name: "datetime",
      message: n || Ct.datetime,
      excludeEmptyString: !0
    }).test({
      name: "datetime_offset",
      message: n || Ct.datetime_offset,
      params: {
        allowOffset: r
      },
      skipAbsent: !0,
      test: (i) => {
        if (!i || r) return !0;
        const a = Qa(i);
        return a ? !!a.z : !1;
      }
    }).test({
      name: "datetime_precision",
      message: n || Ct.datetime_precision,
      params: {
        precision: s
      },
      skipAbsent: !0,
      test: (i) => {
        if (!i || s == null) return !0;
        const a = Qa(i);
        return a ? a.precision === s : !1;
      }
    });
  }
  //-- transforms --
  ensure() {
    return this.default("").transform((t) => t === null ? "" : t);
  }
  trim(t = Ct.trim) {
    return this.transform((n) => n != null ? n.trim() : n).test({
      message: t,
      name: "trim",
      test: ID
    });
  }
  lowercase(t = Ct.lowercase) {
    return this.transform((n) => tr(n) ? n : n.toLowerCase()).test({
      message: t,
      name: "string_case",
      exclusive: !0,
      skipAbsent: !0,
      test: (n) => tr(n) || n === n.toLowerCase()
    });
  }
  uppercase(t = Ct.uppercase) {
    return this.transform((n) => tr(n) ? n : n.toUpperCase()).test({
      message: t,
      name: "string_case",
      exclusive: !0,
      skipAbsent: !0,
      test: (n) => tr(n) || n === n.toUpperCase()
    });
  }
}
Ns.prototype = tm.prototype;
let AD = /* @__PURE__ */ new Date(""), FD = (e) => Object.prototype.toString.call(e) === "[object Date]";
class fc extends un {
  constructor() {
    super({
      type: "date",
      check(t) {
        return FD(t) && !isNaN(t.getTime());
      }
    }), this.withMutation(() => {
      this.transform((t, n) => !this.spec.coerce || this.isType(t) || t === null ? t : (t = OD(t), isNaN(t) ? fc.INVALID_DATE : new Date(t)));
    });
  }
  prepareParam(t, n) {
    let r;
    if (pr.isRef(t))
      r = t;
    else {
      let s = this.cast(t);
      if (!this._typeCheck(s)) throw new TypeError(`\`${n}\` must be a Date or a value that can be \`cast()\` to a Date`);
      r = s;
    }
    return r;
  }
  min(t, n = Xa.min) {
    let r = this.prepareParam(t, "min");
    return this.test({
      message: n,
      name: "min",
      exclusive: !0,
      params: {
        min: t
      },
      skipAbsent: !0,
      test(s) {
        return s >= this.resolve(r);
      }
    });
  }
  max(t, n = Xa.max) {
    let r = this.prepareParam(t, "max");
    return this.test({
      message: n,
      name: "max",
      exclusive: !0,
      params: {
        max: t
      },
      skipAbsent: !0,
      test(s) {
        return s <= this.resolve(r);
      }
    });
  }
}
fc.INVALID_DATE = AD;
function $D(e, t = []) {
  let n = [], r = /* @__PURE__ */ new Set(), s = new Set(t.map(([a, l]) => `${a}-${l}`));
  function i(a, l) {
    let c = sr.split(a)[0];
    r.add(c), s.has(`${l}-${c}`) || n.push([l, c]);
  }
  for (const a of Object.keys(e)) {
    let l = e[a];
    r.add(a), pr.isRef(l) && l.isSibling ? i(l.path, a) : dc(l) && "deps" in l && l.deps.forEach((c) => i(c, a));
  }
  return lD.array(Array.from(r), n).reverse();
}
function Nd(e, t) {
  let n = 1 / 0;
  return e.some((r, s) => {
    var i;
    if ((i = t.path) != null && i.includes(r))
      return n = s, !0;
  }), n;
}
function nm(e) {
  return (t, n) => Nd(e, t) - Nd(e, n);
}
const jD = (e, t, n) => {
  if (typeof e != "string")
    return e;
  let r = e;
  try {
    r = JSON.parse(e);
  } catch {
  }
  return n.isType(r) ? r : e;
};
function As(e) {
  if ("fields" in e) {
    const t = {};
    for (const [n, r] of Object.entries(e.fields))
      t[n] = As(r);
    return e.setFields(t);
  }
  if (e.type === "array") {
    const t = e.optional();
    return t.innerType && (t.innerType = As(t.innerType)), t;
  }
  return e.type === "tuple" ? e.optional().clone({
    types: e.spec.types.map(As)
  }) : "optional" in e ? e.optional() : e;
}
const _D = (e, t) => {
  const n = [...sr.normalizePath(t)];
  if (n.length === 1) return n[0] in e;
  let r = n.pop(), s = sr.getter(sr.join(n), !0)(e);
  return !!(s && r in s);
};
let Ad = (e) => Object.prototype.toString.call(e) === "[object Object]";
function Fd(e, t) {
  let n = Object.keys(e.fields);
  return Object.keys(t).filter((r) => n.indexOf(r) === -1);
}
const VD = nm([]);
function rm(e) {
  return new om(e);
}
class om extends un {
  constructor(t) {
    super({
      type: "object",
      check(n) {
        return Ad(n) || typeof n == "function";
      }
    }), this.fields = /* @__PURE__ */ Object.create(null), this._sortErrors = VD, this._nodes = [], this._excludedEdges = [], this.withMutation(() => {
      t && this.shape(t);
    });
  }
  _cast(t, n = {}) {
    var r;
    let s = super._cast(t, n);
    if (s === void 0) return this.getDefault(n);
    if (!this._typeCheck(s)) return s;
    let i = this.fields, a = (r = n.stripUnknown) != null ? r : this.spec.noUnknown, l = [].concat(this._nodes, Object.keys(s).filter((f) => !this._nodes.includes(f))), c = {}, u = Object.assign({}, n, {
      parent: c,
      __validating: n.__validating || !1
    }), d = !1;
    for (const f of l) {
      let y = i[f], g = f in s, h = s[f];
      if (y) {
        let p;
        u.path = (n.path ? `${n.path}.` : "") + f, y = y.resolve({
          value: h,
          context: n.context,
          parent: c
        });
        let m = y instanceof un ? y.spec : void 0, b = m?.strict;
        if (m != null && m.strip) {
          d = d || f in s;
          continue;
        }
        p = !n.__validating || !b ? y.cast(h, u) : h, p !== void 0 && (c[f] = p);
      } else g && !a && (c[f] = h);
      (g !== f in c || c[f] !== h) && (d = !0);
    }
    return d ? c : s;
  }
  _validate(t, n = {}, r, s) {
    let {
      from: i = [],
      originalValue: a = t,
      recursive: l = this.spec.recursive
    } = n;
    n.from = [{
      schema: this,
      value: a
    }, ...i], n.__validating = !0, n.originalValue = a, super._validate(t, n, r, (c, u) => {
      if (!l || !Ad(u)) {
        s(c, u);
        return;
      }
      a = a || u;
      let d = [];
      for (let f of this._nodes) {
        let y = this.fields[f];
        !y || pr.isRef(y) || d.push(y.asNestedTest({
          options: n,
          key: f,
          parent: u,
          parentPath: n.path,
          originalParent: a
        }));
      }
      this.runTests({
        tests: d,
        value: u,
        originalValue: a,
        options: n
      }, r, (f) => {
        s(f.sort(this._sortErrors).concat(c), u);
      });
    });
  }
  clone(t) {
    const n = super.clone(t);
    return n.fields = Object.assign({}, this.fields), n._nodes = this._nodes, n._excludedEdges = this._excludedEdges, n._sortErrors = this._sortErrors, n;
  }
  concat(t) {
    let n = super.concat(t), r = n.fields;
    for (let [s, i] of Object.entries(this.fields)) {
      const a = r[s];
      r[s] = a === void 0 ? i : a;
    }
    return n.withMutation((s) => (
      // XXX: excludes here is wrong
      s.setFields(r, [...this._excludedEdges, ...t._excludedEdges])
    ));
  }
  _getDefault(t) {
    if ("default" in this.spec)
      return super._getDefault(t);
    if (!this._nodes.length)
      return;
    let n = {};
    return this._nodes.forEach((r) => {
      var s;
      const i = this.fields[r];
      let a = t;
      (s = a) != null && s.value && (a = Object.assign({}, a, {
        parent: a.value,
        value: a.value[r]
      })), n[r] = i && "getDefault" in i ? i.getDefault(a) : void 0;
    }), n;
  }
  setFields(t, n) {
    let r = this.clone();
    return r.fields = t, r._nodes = $D(t, n), r._sortErrors = nm(Object.keys(t)), n && (r._excludedEdges = n), r;
  }
  shape(t, n = []) {
    return this.clone().withMutation((r) => {
      let s = r._excludedEdges;
      return n.length && (Array.isArray(n[0]) || (n = [n]), s = [...r._excludedEdges, ...n]), r.setFields(Object.assign(r.fields, t), s);
    });
  }
  partial() {
    const t = {};
    for (const [n, r] of Object.entries(this.fields))
      t[n] = "optional" in r && r.optional instanceof Function ? r.optional() : r;
    return this.setFields(t);
  }
  deepPartial() {
    return As(this);
  }
  pick(t) {
    const n = {};
    for (const r of t)
      this.fields[r] && (n[r] = this.fields[r]);
    return this.setFields(n, this._excludedEdges.filter(([r, s]) => t.includes(r) && t.includes(s)));
  }
  omit(t) {
    const n = [];
    for (const r of Object.keys(this.fields))
      t.includes(r) || n.push(r);
    return this.pick(n);
  }
  from(t, n, r) {
    let s = sr.getter(t, !0);
    return this.transform((i) => {
      if (!i) return i;
      let a = i;
      return _D(i, t) && (a = Object.assign({}, i), r || delete a[t], a[n] = s(i)), a;
    });
  }
  /** Parse an input JSON string to an object */
  json() {
    return this.transform(jD);
  }
  /**
   * Similar to `noUnknown` but only validates that an object is the right shape without stripping the unknown keys
   */
  exact(t) {
    return this.test({
      name: "exact",
      exclusive: !0,
      message: t || Is.exact,
      test(n) {
        if (n == null) return !0;
        const r = Fd(this.schema, n);
        return r.length === 0 || this.createError({
          params: {
            properties: r.join(", ")
          }
        });
      }
    });
  }
  stripUnknown() {
    return this.clone({
      noUnknown: !0
    });
  }
  noUnknown(t = !0, n = Is.noUnknown) {
    typeof t != "boolean" && (n = t, t = !0);
    let r = this.test({
      name: "noUnknown",
      exclusive: !0,
      message: n,
      test(s) {
        if (s == null) return !0;
        const i = Fd(this.schema, s);
        return !t || i.length === 0 || this.createError({
          params: {
            unknown: i.join(", ")
          }
        });
      }
    });
    return r.spec.noUnknown = t, r;
  }
  unknown(t = !0, n = Is.noUnknown) {
    return this.noUnknown(!t, n);
  }
  transformKeys(t) {
    return this.transform((n) => {
      if (!n) return n;
      const r = {};
      for (const s of Object.keys(n)) r[t(s)] = n[s];
      return r;
    });
  }
  camelCase() {
    return this.transformKeys(xa.camelCase);
  }
  snakeCase() {
    return this.transformKeys(xa.snakeCase);
  }
  constantCase() {
    return this.transformKeys((t) => xa.snakeCase(t).toUpperCase());
  }
  describe(t) {
    const n = (t ? this.resolve(t) : this).clone(), r = super.describe(t);
    r.fields = {};
    for (const [i, a] of Object.entries(n.fields)) {
      var s;
      let l = t;
      (s = l) != null && s.value && (l = Object.assign({}, l, {
        parent: l.value,
        value: l.value[i]
      })), r.fields[i] = a.describe(l);
    }
    return r;
  }
}
rm.prototype = om.prototype;
const LD = ({ isSubmitting: e }) => /* @__PURE__ */ E.jsx(
  Ir,
  {
    type: "submit",
    fullWidth: !0,
    variant: "contained",
    sx: { mt: 3, mb: 2 },
    disabled: e,
    children: e ? /* @__PURE__ */ E.jsx(Bo, { size: 24 }) : "Sign In"
  }
), BD = (e, t) => rm({
  [e.name]: Ns().required(`${e.label} is required`).test(
    "is-email-if-required",
    "Enter a valid email",
    (n) => e.name === "email" ? Ns().email().isValidSync(n) : !0
  ),
  // Add password validation only if the field is present
  ...t && {
    [t.name]: Ns().required(`${t.label} is required`)
  }
}), IM = ({
  onSubmit: e,
  isSubmitting: t = !1,
  error: n,
  logo: r,
  title: s = "Sign in to your account",
  loginField: i = { name: "email", label: "Email Address", autoComplete: "email" },
  passwordField: a = { name: "password", label: "Password", autoComplete: "current-password" },
  validationSchema: l,
  renderActions: c = LD
}) => {
  const u = l || BD(i, a);
  return /* @__PURE__ */ E.jsx(zm, { component: "main", maxWidth: "xs", children: /* @__PURE__ */ E.jsxs(
    ei,
    {
      elevation: 3,
      sx: {
        marginTop: 8,
        padding: 4,
        display: "flex",
        flexDirection: "column",
        alignItems: "center"
      },
      children: [
        r && /* @__PURE__ */ E.jsx(xt, { mb: 2, children: r }),
        /* @__PURE__ */ E.jsx(In, { component: "h1", variant: "h5", children: s }),
        n && /* @__PURE__ */ E.jsx(Oa, { severity: "error", sx: { width: "100%", mt: 2 }, children: n.message }),
        /* @__PURE__ */ E.jsx(xt, { sx: { mt: 1, width: "100%" }, children: /* @__PURE__ */ E.jsxs(
          sf,
          {
            onSubmit: e,
            validationSchema: u,
            noValidate: !0,
            children: [
              /* @__PURE__ */ E.jsx(
                Ec,
                {
                  margin: "normal",
                  required: !0,
                  fullWidth: !0,
                  id: i.name,
                  label: i.label,
                  name: i.name,
                  autoComplete: i.autoComplete,
                  autoFocus: !0
                }
              ),
              a && /* @__PURE__ */ E.jsx(
                Ec,
                {
                  margin: "normal",
                  required: !0,
                  fullWidth: !0,
                  id: a.name,
                  label: a.label,
                  name: a.name,
                  type: "password",
                  autoComplete: a.autoComplete
                }
              ),
              c({ isSubmitting: t })
            ]
          }
        ) })
      ]
    }
  ) });
}, Er = 240, NM = ({
  navItems: e = [],
  title: t = "Dashboard",
  drawerHeader: n,
  headerActions: r,
  children: s
}) => {
  const [i, a] = ut(!1), l = () => {
    a(!i);
  }, c = /* @__PURE__ */ E.jsxs(xt, { children: [
    n ? /* @__PURE__ */ E.jsx(Tr, { sx: { justifyContent: "center" }, children: n }) : null,
    /* @__PURE__ */ E.jsx(Um, { children: e.map((u, d) => {
      const f = u.component || "a", y = f !== "a" ? { to: u.path } : { href: u.path };
      return /* @__PURE__ */ E.jsx(qm, { disablePadding: !0, children: /* @__PURE__ */ E.jsxs(Hm, { component: f, ...y, children: [
        u.icon && /* @__PURE__ */ E.jsx(Ym, { children: u.icon }),
        /* @__PURE__ */ E.jsx(Km, { primary: u.text })
      ] }) }, d);
    }) })
  ] });
  return /* @__PURE__ */ E.jsxs(xt, { sx: { display: "flex" }, children: [
    /* @__PURE__ */ E.jsx(Gm, {}),
    /* @__PURE__ */ E.jsx(
      Xm,
      {
        position: "fixed",
        sx: {
          width: { sm: `calc(100% - ${Er}px)` },
          ml: { sm: `${Er}px` }
        },
        children: /* @__PURE__ */ E.jsxs(Tr, { children: [
          /* @__PURE__ */ E.jsx(
            Qm,
            {
              color: "primary",
              "aria-label": "open drawer",
              edge: "start",
              onClick: l,
              sx: { mr: 2, display: { sm: "none" } },
              children: /* @__PURE__ */ E.jsx(ty, {})
            }
          ),
          /* @__PURE__ */ E.jsx(In, { variant: "h6", noWrap: !0, color: "primary", component: "div", sx: { flexGrow: 1 }, children: t }),
          r
        ] })
      }
    ),
    /* @__PURE__ */ E.jsxs(
      xt,
      {
        component: "nav",
        sx: { width: { sm: Er }, flexShrink: { sm: 0 } },
        "aria-label": "mailbox folders",
        children: [
          /* @__PURE__ */ E.jsx(
            vc,
            {
              variant: "temporary",
              open: i,
              onClose: l,
              ModalProps: {
                keepMounted: !0
                // Better open performance on mobile.
              },
              sx: {
                display: { xs: "block", sm: "none" },
                "& .MuiDrawer-paper": { boxSizing: "border-box", width: Er }
              },
              children: c
            }
          ),
          /* @__PURE__ */ E.jsx(
            vc,
            {
              variant: "permanent",
              sx: {
                display: { xs: "none", sm: "block" },
                "& .MuiDrawer-paper": { boxSizing: "border-box", width: Er }
              },
              open: !0,
              children: c
            }
          )
        ]
      }
    ),
    /* @__PURE__ */ E.jsxs(
      xt,
      {
        component: "main",
        sx: {
          flexGrow: 1,
          p: 3,
          width: { xs: "100%", sm: `calc(100% - ${Er}px)` },
          minHeight: "100vh",
          backgroundColor: (u) => u.palette.grey[100]
        },
        children: [
          /* @__PURE__ */ E.jsx(Tr, {}),
          s
        ]
      }
    )
  ] });
};
function sm(e, t) {
  return function() {
    return e.apply(t, arguments);
  };
}
const { toString: WD } = Object.prototype, { getPrototypeOf: pc } = Object, { iterator: Li, toStringTag: im } = Symbol, Bi = /* @__PURE__ */ ((e) => (t) => {
  const n = WD.call(t);
  return e[n] || (e[n] = n.slice(8, -1).toLowerCase());
})(/* @__PURE__ */ Object.create(null)), Ht = (e) => (e = e.toLowerCase(), (t) => Bi(t) === e), Wi = (e) => (t) => typeof t === e, { isArray: Hr } = Array, Wr = Wi("undefined");
function as(e) {
  return e !== null && !Wr(e) && e.constructor !== null && !Wr(e.constructor) && Rt(e.constructor.isBuffer) && e.constructor.isBuffer(e);
}
const am = Ht("ArrayBuffer");
function zD(e) {
  let t;
  return typeof ArrayBuffer < "u" && ArrayBuffer.isView ? t = ArrayBuffer.isView(e) : t = e && e.buffer && am(e.buffer), t;
}
const UD = Wi("string"), Rt = Wi("function"), lm = Wi("number"), ls = (e) => e !== null && typeof e == "object", qD = (e) => e === !0 || e === !1, Fs = (e) => {
  if (Bi(e) !== "object")
    return !1;
  const t = pc(e);
  return (t === null || t === Object.prototype || Object.getPrototypeOf(t) === null) && !(im in e) && !(Li in e);
}, HD = (e) => {
  if (!ls(e) || as(e))
    return !1;
  try {
    return Object.keys(e).length === 0 && Object.getPrototypeOf(e) === Object.prototype;
  } catch {
    return !1;
  }
}, YD = Ht("Date"), KD = Ht("File"), GD = Ht("Blob"), XD = Ht("FileList"), QD = (e) => ls(e) && Rt(e.pipe), ZD = (e) => {
  let t;
  return e && (typeof FormData == "function" && e instanceof FormData || Rt(e.append) && ((t = Bi(e)) === "formdata" || // detect form-data instance
  t === "object" && Rt(e.toString) && e.toString() === "[object FormData]"));
}, JD = Ht("URLSearchParams"), [e1, t1, n1, r1] = ["ReadableStream", "Request", "Response", "Headers"].map(Ht), o1 = (e) => e.trim ? e.trim() : e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
function cs(e, t, { allOwnKeys: n = !1 } = {}) {
  if (e === null || typeof e > "u")
    return;
  let r, s;
  if (typeof e != "object" && (e = [e]), Hr(e))
    for (r = 0, s = e.length; r < s; r++)
      t.call(null, e[r], r, e);
  else {
    if (as(e))
      return;
    const i = n ? Object.getOwnPropertyNames(e) : Object.keys(e), a = i.length;
    let l;
    for (r = 0; r < a; r++)
      l = i[r], t.call(null, e[l], l, e);
  }
}
function cm(e, t) {
  if (as(e))
    return null;
  t = t.toLowerCase();
  const n = Object.keys(e);
  let r = n.length, s;
  for (; r-- > 0; )
    if (s = n[r], t === s.toLowerCase())
      return s;
  return null;
}
const nr = typeof globalThis < "u" ? globalThis : typeof self < "u" ? self : typeof window < "u" ? window : global, um = (e) => !Wr(e) && e !== nr;
function Za() {
  const { caseless: e, skipUndefined: t } = um(this) && this || {}, n = {}, r = (s, i) => {
    const a = e && cm(n, i) || i;
    Fs(n[a]) && Fs(s) ? n[a] = Za(n[a], s) : Fs(s) ? n[a] = Za({}, s) : Hr(s) ? n[a] = s.slice() : (!t || !Wr(s)) && (n[a] = s);
  };
  for (let s = 0, i = arguments.length; s < i; s++)
    arguments[s] && cs(arguments[s], r);
  return n;
}
const s1 = (e, t, n, { allOwnKeys: r } = {}) => (cs(t, (s, i) => {
  n && Rt(s) ? e[i] = sm(s, n) : e[i] = s;
}, { allOwnKeys: r }), e), i1 = (e) => (e.charCodeAt(0) === 65279 && (e = e.slice(1)), e), a1 = (e, t, n, r) => {
  e.prototype = Object.create(t.prototype, r), e.prototype.constructor = e, Object.defineProperty(e, "super", {
    value: t.prototype
  }), n && Object.assign(e.prototype, n);
}, l1 = (e, t, n, r) => {
  let s, i, a;
  const l = {};
  if (t = t || {}, e == null) return t;
  do {
    for (s = Object.getOwnPropertyNames(e), i = s.length; i-- > 0; )
      a = s[i], (!r || r(a, e, t)) && !l[a] && (t[a] = e[a], l[a] = !0);
    e = n !== !1 && pc(e);
  } while (e && (!n || n(e, t)) && e !== Object.prototype);
  return t;
}, c1 = (e, t, n) => {
  e = String(e), (n === void 0 || n > e.length) && (n = e.length), n -= t.length;
  const r = e.indexOf(t, n);
  return r !== -1 && r === n;
}, u1 = (e) => {
  if (!e) return null;
  if (Hr(e)) return e;
  let t = e.length;
  if (!lm(t)) return null;
  const n = new Array(t);
  for (; t-- > 0; )
    n[t] = e[t];
  return n;
}, d1 = /* @__PURE__ */ ((e) => (t) => e && t instanceof e)(typeof Uint8Array < "u" && pc(Uint8Array)), f1 = (e, t) => {
  const r = (e && e[Li]).call(e);
  let s;
  for (; (s = r.next()) && !s.done; ) {
    const i = s.value;
    t.call(e, i[0], i[1]);
  }
}, p1 = (e, t) => {
  let n;
  const r = [];
  for (; (n = e.exec(t)) !== null; )
    r.push(n);
  return r;
}, h1 = Ht("HTMLFormElement"), m1 = (e) => e.toLowerCase().replace(
  /[-_\s]([a-z\d])(\w*)/g,
  function(n, r, s) {
    return r.toUpperCase() + s;
  }
), $d = (({ hasOwnProperty: e }) => (t, n) => e.call(t, n))(Object.prototype), y1 = Ht("RegExp"), dm = (e, t) => {
  const n = Object.getOwnPropertyDescriptors(e), r = {};
  cs(n, (s, i) => {
    let a;
    (a = t(s, i, e)) !== !1 && (r[i] = a || s);
  }), Object.defineProperties(e, r);
}, g1 = (e) => {
  dm(e, (t, n) => {
    if (Rt(e) && ["arguments", "caller", "callee"].indexOf(n) !== -1)
      return !1;
    const r = e[n];
    if (Rt(r)) {
      if (t.enumerable = !1, "writable" in t) {
        t.writable = !1;
        return;
      }
      t.set || (t.set = () => {
        throw Error("Can not rewrite read-only method '" + n + "'");
      });
    }
  });
}, b1 = (e, t) => {
  const n = {}, r = (s) => {
    s.forEach((i) => {
      n[i] = !0;
    });
  };
  return Hr(e) ? r(e) : r(String(e).split(t)), n;
}, v1 = () => {
}, x1 = (e, t) => e != null && Number.isFinite(e = +e) ? e : t;
function w1(e) {
  return !!(e && Rt(e.append) && e[im] === "FormData" && e[Li]);
}
const S1 = (e) => {
  const t = new Array(10), n = (r, s) => {
    if (ls(r)) {
      if (t.indexOf(r) >= 0)
        return;
      if (as(r))
        return r;
      if (!("toJSON" in r)) {
        t[s] = r;
        const i = Hr(r) ? [] : {};
        return cs(r, (a, l) => {
          const c = n(a, s + 1);
          !Wr(c) && (i[l] = c);
        }), t[s] = void 0, i;
      }
    }
    return r;
  };
  return n(e, 0);
}, E1 = Ht("AsyncFunction"), O1 = (e) => e && (ls(e) || Rt(e)) && Rt(e.then) && Rt(e.catch), fm = ((e, t) => e ? setImmediate : t ? ((n, r) => (nr.addEventListener("message", ({ source: s, data: i }) => {
  s === nr && i === n && r.length && r.shift()();
}, !1), (s) => {
  r.push(s), nr.postMessage(n, "*");
}))(`axios@${Math.random()}`, []) : (n) => setTimeout(n))(
  typeof setImmediate == "function",
  Rt(nr.postMessage)
), C1 = typeof queueMicrotask < "u" ? queueMicrotask.bind(nr) : typeof process < "u" && process.nextTick || fm, P1 = (e) => e != null && Rt(e[Li]), U = {
  isArray: Hr,
  isArrayBuffer: am,
  isBuffer: as,
  isFormData: ZD,
  isArrayBufferView: zD,
  isString: UD,
  isNumber: lm,
  isBoolean: qD,
  isObject: ls,
  isPlainObject: Fs,
  isEmptyObject: HD,
  isReadableStream: e1,
  isRequest: t1,
  isResponse: n1,
  isHeaders: r1,
  isUndefined: Wr,
  isDate: YD,
  isFile: KD,
  isBlob: GD,
  isRegExp: y1,
  isFunction: Rt,
  isStream: QD,
  isURLSearchParams: JD,
  isTypedArray: d1,
  isFileList: XD,
  forEach: cs,
  merge: Za,
  extend: s1,
  trim: o1,
  stripBOM: i1,
  inherits: a1,
  toFlatObject: l1,
  kindOf: Bi,
  kindOfTest: Ht,
  endsWith: c1,
  toArray: u1,
  forEachEntry: f1,
  matchAll: p1,
  isHTMLForm: h1,
  hasOwnProperty: $d,
  hasOwnProp: $d,
  // an alias to avoid ESLint no-prototype-builtins detection
  reduceDescriptors: dm,
  freezeMethods: g1,
  toObjectSet: b1,
  toCamelCase: m1,
  noop: v1,
  toFiniteNumber: x1,
  findKey: cm,
  global: nr,
  isContextDefined: um,
  isSpecCompliantForm: w1,
  toJSONObject: S1,
  isAsyncFn: E1,
  isThenable: O1,
  setImmediate: fm,
  asap: C1,
  isIterable: P1
};
function Ce(e, t, n, r, s) {
  Error.call(this), Error.captureStackTrace ? Error.captureStackTrace(this, this.constructor) : this.stack = new Error().stack, this.message = e, this.name = "AxiosError", t && (this.code = t), n && (this.config = n), r && (this.request = r), s && (this.response = s, this.status = s.status ? s.status : null);
}
U.inherits(Ce, Error, {
  toJSON: function() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: U.toJSONObject(this.config),
      code: this.code,
      status: this.status
    };
  }
});
const pm = Ce.prototype, hm = {};
[
  "ERR_BAD_OPTION_VALUE",
  "ERR_BAD_OPTION",
  "ECONNABORTED",
  "ETIMEDOUT",
  "ERR_NETWORK",
  "ERR_FR_TOO_MANY_REDIRECTS",
  "ERR_DEPRECATED",
  "ERR_BAD_RESPONSE",
  "ERR_BAD_REQUEST",
  "ERR_CANCELED",
  "ERR_NOT_SUPPORT",
  "ERR_INVALID_URL"
  // eslint-disable-next-line func-names
].forEach((e) => {
  hm[e] = { value: e };
});
Object.defineProperties(Ce, hm);
Object.defineProperty(pm, "isAxiosError", { value: !0 });
Ce.from = (e, t, n, r, s, i) => {
  const a = Object.create(pm);
  U.toFlatObject(e, a, function(d) {
    return d !== Error.prototype;
  }, (u) => u !== "isAxiosError");
  const l = e && e.message ? e.message : "Error", c = t == null && e ? e.code : t;
  return Ce.call(a, l, c, n, r, s), e && a.cause == null && Object.defineProperty(a, "cause", { value: e, configurable: !0 }), a.name = e && e.name || "Error", i && Object.assign(a, i), a;
};
const T1 = null;
function Ja(e) {
  return U.isPlainObject(e) || U.isArray(e);
}
function mm(e) {
  return U.endsWith(e, "[]") ? e.slice(0, -2) : e;
}
function jd(e, t, n) {
  return e ? e.concat(t).map(function(s, i) {
    return s = mm(s), !n && i ? "[" + s + "]" : s;
  }).join(n ? "." : "") : t;
}
function R1(e) {
  return U.isArray(e) && !e.some(Ja);
}
const k1 = U.toFlatObject(U, {}, null, function(t) {
  return /^is[A-Z]/.test(t);
});
function zi(e, t, n) {
  if (!U.isObject(e))
    throw new TypeError("target must be an object");
  t = t || new FormData(), n = U.toFlatObject(n, {
    metaTokens: !0,
    dots: !1,
    indexes: !1
  }, !1, function(p, m) {
    return !U.isUndefined(m[p]);
  });
  const r = n.metaTokens, s = n.visitor || d, i = n.dots, a = n.indexes, c = (n.Blob || typeof Blob < "u" && Blob) && U.isSpecCompliantForm(t);
  if (!U.isFunction(s))
    throw new TypeError("visitor must be a function");
  function u(h) {
    if (h === null) return "";
    if (U.isDate(h))
      return h.toISOString();
    if (U.isBoolean(h))
      return h.toString();
    if (!c && U.isBlob(h))
      throw new Ce("Blob is not supported. Use a Buffer instead.");
    return U.isArrayBuffer(h) || U.isTypedArray(h) ? c && typeof Blob == "function" ? new Blob([h]) : Buffer.from(h) : h;
  }
  function d(h, p, m) {
    let b = h;
    if (h && !m && typeof h == "object") {
      if (U.endsWith(p, "{}"))
        p = r ? p : p.slice(0, -2), h = JSON.stringify(h);
      else if (U.isArray(h) && R1(h) || (U.isFileList(h) || U.endsWith(p, "[]")) && (b = U.toArray(h)))
        return p = mm(p), b.forEach(function(O, w) {
          !(U.isUndefined(O) || O === null) && t.append(
            // eslint-disable-next-line no-nested-ternary
            a === !0 ? jd([p], w, i) : a === null ? p : p + "[]",
            u(O)
          );
        }), !1;
    }
    return Ja(h) ? !0 : (t.append(jd(m, p, i), u(h)), !1);
  }
  const f = [], y = Object.assign(k1, {
    defaultVisitor: d,
    convertValue: u,
    isVisitable: Ja
  });
  function g(h, p) {
    if (!U.isUndefined(h)) {
      if (f.indexOf(h) !== -1)
        throw Error("Circular reference detected in " + p.join("."));
      f.push(h), U.forEach(h, function(b, C) {
        (!(U.isUndefined(b) || b === null) && s.call(
          t,
          b,
          U.isString(C) ? C.trim() : C,
          p,
          y
        )) === !0 && g(b, p ? p.concat(C) : [C]);
      }), f.pop();
    }
  }
  if (!U.isObject(e))
    throw new TypeError("data must be an object");
  return g(e), t;
}
function _d(e) {
  const t = {
    "!": "%21",
    "'": "%27",
    "(": "%28",
    ")": "%29",
    "~": "%7E",
    "%20": "+",
    "%00": "\0"
  };
  return encodeURIComponent(e).replace(/[!'()~]|%20|%00/g, function(r) {
    return t[r];
  });
}
function hc(e, t) {
  this._pairs = [], e && zi(e, this, t);
}
const ym = hc.prototype;
ym.append = function(t, n) {
  this._pairs.push([t, n]);
};
ym.toString = function(t) {
  const n = t ? function(r) {
    return t.call(this, r, _d);
  } : _d;
  return this._pairs.map(function(s) {
    return n(s[0]) + "=" + n(s[1]);
  }, "").join("&");
};
function D1(e) {
  return encodeURIComponent(e).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+");
}
function gm(e, t, n) {
  if (!t)
    return e;
  const r = n && n.encode || D1;
  U.isFunction(n) && (n = {
    serialize: n
  });
  const s = n && n.serialize;
  let i;
  if (s ? i = s(t, n) : i = U.isURLSearchParams(t) ? t.toString() : new hc(t, n).toString(r), i) {
    const a = e.indexOf("#");
    a !== -1 && (e = e.slice(0, a)), e += (e.indexOf("?") === -1 ? "?" : "&") + i;
  }
  return e;
}
class Vd {
  constructor() {
    this.handlers = [];
  }
  /**
   * Add a new interceptor to the stack
   *
   * @param {Function} fulfilled The function to handle `then` for a `Promise`
   * @param {Function} rejected The function to handle `reject` for a `Promise`
   *
   * @return {Number} An ID used to remove interceptor later
   */
  use(t, n, r) {
    return this.handlers.push({
      fulfilled: t,
      rejected: n,
      synchronous: r ? r.synchronous : !1,
      runWhen: r ? r.runWhen : null
    }), this.handlers.length - 1;
  }
  /**
   * Remove an interceptor from the stack
   *
   * @param {Number} id The ID that was returned by `use`
   *
   * @returns {void}
   */
  eject(t) {
    this.handlers[t] && (this.handlers[t] = null);
  }
  /**
   * Clear all interceptors from the stack
   *
   * @returns {void}
   */
  clear() {
    this.handlers && (this.handlers = []);
  }
  /**
   * Iterate over all the registered interceptors
   *
   * This method is particularly useful for skipping over any
   * interceptors that may have become `null` calling `eject`.
   *
   * @param {Function} fn The function to call for each interceptor
   *
   * @returns {void}
   */
  forEach(t) {
    U.forEach(this.handlers, function(r) {
      r !== null && t(r);
    });
  }
}
const bm = {
  silentJSONParsing: !0,
  forcedJSONParsing: !0,
  clarifyTimeoutError: !1
}, M1 = typeof URLSearchParams < "u" ? URLSearchParams : hc, I1 = typeof FormData < "u" ? FormData : null, N1 = typeof Blob < "u" ? Blob : null, A1 = {
  isBrowser: !0,
  classes: {
    URLSearchParams: M1,
    FormData: I1,
    Blob: N1
  },
  protocols: ["http", "https", "file", "blob", "url", "data"]
}, mc = typeof window < "u" && typeof document < "u", el = typeof navigator == "object" && navigator || void 0, F1 = mc && (!el || ["ReactNative", "NativeScript", "NS"].indexOf(el.product) < 0), $1 = typeof WorkerGlobalScope < "u" && // eslint-disable-next-line no-undef
self instanceof WorkerGlobalScope && typeof self.importScripts == "function", j1 = mc && window.location.href || "http://localhost", _1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  hasBrowserEnv: mc,
  hasStandardBrowserEnv: F1,
  hasStandardBrowserWebWorkerEnv: $1,
  navigator: el,
  origin: j1
}, Symbol.toStringTag, { value: "Module" })), vt = {
  ..._1,
  ...A1
};
function V1(e, t) {
  return zi(e, new vt.classes.URLSearchParams(), {
    visitor: function(n, r, s, i) {
      return vt.isNode && U.isBuffer(n) ? (this.append(r, n.toString("base64")), !1) : i.defaultVisitor.apply(this, arguments);
    },
    ...t
  });
}
function L1(e) {
  return U.matchAll(/\w+|\[(\w*)]/g, e).map((t) => t[0] === "[]" ? "" : t[1] || t[0]);
}
function B1(e) {
  const t = {}, n = Object.keys(e);
  let r;
  const s = n.length;
  let i;
  for (r = 0; r < s; r++)
    i = n[r], t[i] = e[i];
  return t;
}
function vm(e) {
  function t(n, r, s, i) {
    let a = n[i++];
    if (a === "__proto__") return !0;
    const l = Number.isFinite(+a), c = i >= n.length;
    return a = !a && U.isArray(s) ? s.length : a, c ? (U.hasOwnProp(s, a) ? s[a] = [s[a], r] : s[a] = r, !l) : ((!s[a] || !U.isObject(s[a])) && (s[a] = []), t(n, r, s[a], i) && U.isArray(s[a]) && (s[a] = B1(s[a])), !l);
  }
  if (U.isFormData(e) && U.isFunction(e.entries)) {
    const n = {};
    return U.forEachEntry(e, (r, s) => {
      t(L1(r), s, n, 0);
    }), n;
  }
  return null;
}
function W1(e, t, n) {
  if (U.isString(e))
    try {
      return (t || JSON.parse)(e), U.trim(e);
    } catch (r) {
      if (r.name !== "SyntaxError")
        throw r;
    }
  return (n || JSON.stringify)(e);
}
const us = {
  transitional: bm,
  adapter: ["xhr", "http", "fetch"],
  transformRequest: [function(t, n) {
    const r = n.getContentType() || "", s = r.indexOf("application/json") > -1, i = U.isObject(t);
    if (i && U.isHTMLForm(t) && (t = new FormData(t)), U.isFormData(t))
      return s ? JSON.stringify(vm(t)) : t;
    if (U.isArrayBuffer(t) || U.isBuffer(t) || U.isStream(t) || U.isFile(t) || U.isBlob(t) || U.isReadableStream(t))
      return t;
    if (U.isArrayBufferView(t))
      return t.buffer;
    if (U.isURLSearchParams(t))
      return n.setContentType("application/x-www-form-urlencoded;charset=utf-8", !1), t.toString();
    let l;
    if (i) {
      if (r.indexOf("application/x-www-form-urlencoded") > -1)
        return V1(t, this.formSerializer).toString();
      if ((l = U.isFileList(t)) || r.indexOf("multipart/form-data") > -1) {
        const c = this.env && this.env.FormData;
        return zi(
          l ? { "files[]": t } : t,
          c && new c(),
          this.formSerializer
        );
      }
    }
    return i || s ? (n.setContentType("application/json", !1), W1(t)) : t;
  }],
  transformResponse: [function(t) {
    const n = this.transitional || us.transitional, r = n && n.forcedJSONParsing, s = this.responseType === "json";
    if (U.isResponse(t) || U.isReadableStream(t))
      return t;
    if (t && U.isString(t) && (r && !this.responseType || s)) {
      const a = !(n && n.silentJSONParsing) && s;
      try {
        return JSON.parse(t, this.parseReviver);
      } catch (l) {
        if (a)
          throw l.name === "SyntaxError" ? Ce.from(l, Ce.ERR_BAD_RESPONSE, this, null, this.response) : l;
      }
    }
    return t;
  }],
  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,
  xsrfCookieName: "XSRF-TOKEN",
  xsrfHeaderName: "X-XSRF-TOKEN",
  maxContentLength: -1,
  maxBodyLength: -1,
  env: {
    FormData: vt.classes.FormData,
    Blob: vt.classes.Blob
  },
  validateStatus: function(t) {
    return t >= 200 && t < 300;
  },
  headers: {
    common: {
      Accept: "application/json, text/plain, */*",
      "Content-Type": void 0
    }
  }
};
U.forEach(["delete", "get", "head", "post", "put", "patch"], (e) => {
  us.headers[e] = {};
});
const z1 = U.toObjectSet([
  "age",
  "authorization",
  "content-length",
  "content-type",
  "etag",
  "expires",
  "from",
  "host",
  "if-modified-since",
  "if-unmodified-since",
  "last-modified",
  "location",
  "max-forwards",
  "proxy-authorization",
  "referer",
  "retry-after",
  "user-agent"
]), U1 = (e) => {
  const t = {};
  let n, r, s;
  return e && e.split(`
`).forEach(function(a) {
    s = a.indexOf(":"), n = a.substring(0, s).trim().toLowerCase(), r = a.substring(s + 1).trim(), !(!n || t[n] && z1[n]) && (n === "set-cookie" ? t[n] ? t[n].push(r) : t[n] = [r] : t[n] = t[n] ? t[n] + ", " + r : r);
  }), t;
}, Ld = Symbol("internals");
function fo(e) {
  return e && String(e).trim().toLowerCase();
}
function $s(e) {
  return e === !1 || e == null ? e : U.isArray(e) ? e.map($s) : String(e);
}
function q1(e) {
  const t = /* @__PURE__ */ Object.create(null), n = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
  let r;
  for (; r = n.exec(e); )
    t[r[1]] = r[2];
  return t;
}
const H1 = (e) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(e.trim());
function wa(e, t, n, r, s) {
  if (U.isFunction(r))
    return r.call(this, t, n);
  if (s && (t = n), !!U.isString(t)) {
    if (U.isString(r))
      return t.indexOf(r) !== -1;
    if (U.isRegExp(r))
      return r.test(t);
  }
}
function Y1(e) {
  return e.trim().toLowerCase().replace(/([a-z\d])(\w*)/g, (t, n, r) => n.toUpperCase() + r);
}
function K1(e, t) {
  const n = U.toCamelCase(" " + t);
  ["get", "set", "has"].forEach((r) => {
    Object.defineProperty(e, r + n, {
      value: function(s, i, a) {
        return this[r].call(this, t, s, i, a);
      },
      configurable: !0
    });
  });
}
let kt = class {
  constructor(t) {
    t && this.set(t);
  }
  set(t, n, r) {
    const s = this;
    function i(l, c, u) {
      const d = fo(c);
      if (!d)
        throw new Error("header name must be a non-empty string");
      const f = U.findKey(s, d);
      (!f || s[f] === void 0 || u === !0 || u === void 0 && s[f] !== !1) && (s[f || c] = $s(l));
    }
    const a = (l, c) => U.forEach(l, (u, d) => i(u, d, c));
    if (U.isPlainObject(t) || t instanceof this.constructor)
      a(t, n);
    else if (U.isString(t) && (t = t.trim()) && !H1(t))
      a(U1(t), n);
    else if (U.isObject(t) && U.isIterable(t)) {
      let l = {}, c, u;
      for (const d of t) {
        if (!U.isArray(d))
          throw TypeError("Object iterator must return a key-value pair");
        l[u = d[0]] = (c = l[u]) ? U.isArray(c) ? [...c, d[1]] : [c, d[1]] : d[1];
      }
      a(l, n);
    } else
      t != null && i(n, t, r);
    return this;
  }
  get(t, n) {
    if (t = fo(t), t) {
      const r = U.findKey(this, t);
      if (r) {
        const s = this[r];
        if (!n)
          return s;
        if (n === !0)
          return q1(s);
        if (U.isFunction(n))
          return n.call(this, s, r);
        if (U.isRegExp(n))
          return n.exec(s);
        throw new TypeError("parser must be boolean|regexp|function");
      }
    }
  }
  has(t, n) {
    if (t = fo(t), t) {
      const r = U.findKey(this, t);
      return !!(r && this[r] !== void 0 && (!n || wa(this, this[r], r, n)));
    }
    return !1;
  }
  delete(t, n) {
    const r = this;
    let s = !1;
    function i(a) {
      if (a = fo(a), a) {
        const l = U.findKey(r, a);
        l && (!n || wa(r, r[l], l, n)) && (delete r[l], s = !0);
      }
    }
    return U.isArray(t) ? t.forEach(i) : i(t), s;
  }
  clear(t) {
    const n = Object.keys(this);
    let r = n.length, s = !1;
    for (; r--; ) {
      const i = n[r];
      (!t || wa(this, this[i], i, t, !0)) && (delete this[i], s = !0);
    }
    return s;
  }
  normalize(t) {
    const n = this, r = {};
    return U.forEach(this, (s, i) => {
      const a = U.findKey(r, i);
      if (a) {
        n[a] = $s(s), delete n[i];
        return;
      }
      const l = t ? Y1(i) : String(i).trim();
      l !== i && delete n[i], n[l] = $s(s), r[l] = !0;
    }), this;
  }
  concat(...t) {
    return this.constructor.concat(this, ...t);
  }
  toJSON(t) {
    const n = /* @__PURE__ */ Object.create(null);
    return U.forEach(this, (r, s) => {
      r != null && r !== !1 && (n[s] = t && U.isArray(r) ? r.join(", ") : r);
    }), n;
  }
  [Symbol.iterator]() {
    return Object.entries(this.toJSON())[Symbol.iterator]();
  }
  toString() {
    return Object.entries(this.toJSON()).map(([t, n]) => t + ": " + n).join(`
`);
  }
  getSetCookie() {
    return this.get("set-cookie") || [];
  }
  get [Symbol.toStringTag]() {
    return "AxiosHeaders";
  }
  static from(t) {
    return t instanceof this ? t : new this(t);
  }
  static concat(t, ...n) {
    const r = new this(t);
    return n.forEach((s) => r.set(s)), r;
  }
  static accessor(t) {
    const r = (this[Ld] = this[Ld] = {
      accessors: {}
    }).accessors, s = this.prototype;
    function i(a) {
      const l = fo(a);
      r[l] || (K1(s, a), r[l] = !0);
    }
    return U.isArray(t) ? t.forEach(i) : i(t), this;
  }
};
kt.accessor(["Content-Type", "Content-Length", "Accept", "Accept-Encoding", "User-Agent", "Authorization"]);
U.reduceDescriptors(kt.prototype, ({ value: e }, t) => {
  let n = t[0].toUpperCase() + t.slice(1);
  return {
    get: () => e,
    set(r) {
      this[n] = r;
    }
  };
});
U.freezeMethods(kt);
function Sa(e, t) {
  const n = this || us, r = t || n, s = kt.from(r.headers);
  let i = r.data;
  return U.forEach(e, function(l) {
    i = l.call(n, i, s.normalize(), t ? t.status : void 0);
  }), s.normalize(), i;
}
function xm(e) {
  return !!(e && e.__CANCEL__);
}
function Yr(e, t, n) {
  Ce.call(this, e ?? "canceled", Ce.ERR_CANCELED, t, n), this.name = "CanceledError";
}
U.inherits(Yr, Ce, {
  __CANCEL__: !0
});
function wm(e, t, n) {
  const r = n.config.validateStatus;
  !n.status || !r || r(n.status) ? e(n) : t(new Ce(
    "Request failed with status code " + n.status,
    [Ce.ERR_BAD_REQUEST, Ce.ERR_BAD_RESPONSE][Math.floor(n.status / 100) - 4],
    n.config,
    n.request,
    n
  ));
}
function G1(e) {
  const t = /^([-+\w]{1,25})(:?\/\/|:)/.exec(e);
  return t && t[1] || "";
}
function X1(e, t) {
  e = e || 10;
  const n = new Array(e), r = new Array(e);
  let s = 0, i = 0, a;
  return t = t !== void 0 ? t : 1e3, function(c) {
    const u = Date.now(), d = r[i];
    a || (a = u), n[s] = c, r[s] = u;
    let f = i, y = 0;
    for (; f !== s; )
      y += n[f++], f = f % e;
    if (s = (s + 1) % e, s === i && (i = (i + 1) % e), u - a < t)
      return;
    const g = d && u - d;
    return g ? Math.round(y * 1e3 / g) : void 0;
  };
}
function Q1(e, t) {
  let n = 0, r = 1e3 / t, s, i;
  const a = (u, d = Date.now()) => {
    n = d, s = null, i && (clearTimeout(i), i = null), e(...u);
  };
  return [(...u) => {
    const d = Date.now(), f = d - n;
    f >= r ? a(u, d) : (s = u, i || (i = setTimeout(() => {
      i = null, a(s);
    }, r - f)));
  }, () => s && a(s)];
}
const Js = (e, t, n = 3) => {
  let r = 0;
  const s = X1(50, 250);
  return Q1((i) => {
    const a = i.loaded, l = i.lengthComputable ? i.total : void 0, c = a - r, u = s(c), d = a <= l;
    r = a;
    const f = {
      loaded: a,
      total: l,
      progress: l ? a / l : void 0,
      bytes: c,
      rate: u || void 0,
      estimated: u && l && d ? (l - a) / u : void 0,
      event: i,
      lengthComputable: l != null,
      [t ? "download" : "upload"]: !0
    };
    e(f);
  }, n);
}, Bd = (e, t) => {
  const n = e != null;
  return [(r) => t[0]({
    lengthComputable: n,
    total: e,
    loaded: r
  }), t[1]];
}, Wd = (e) => (...t) => U.asap(() => e(...t)), Z1 = vt.hasStandardBrowserEnv ? /* @__PURE__ */ ((e, t) => (n) => (n = new URL(n, vt.origin), e.protocol === n.protocol && e.host === n.host && (t || e.port === n.port)))(
  new URL(vt.origin),
  vt.navigator && /(msie|trident)/i.test(vt.navigator.userAgent)
) : () => !0, J1 = vt.hasStandardBrowserEnv ? (
  // Standard browser envs support document.cookie
  {
    write(e, t, n, r, s, i, a) {
      if (typeof document > "u") return;
      const l = [`${e}=${encodeURIComponent(t)}`];
      U.isNumber(n) && l.push(`expires=${new Date(n).toUTCString()}`), U.isString(r) && l.push(`path=${r}`), U.isString(s) && l.push(`domain=${s}`), i === !0 && l.push("secure"), U.isString(a) && l.push(`SameSite=${a}`), document.cookie = l.join("; ");
    },
    read(e) {
      if (typeof document > "u") return null;
      const t = document.cookie.match(new RegExp("(?:^|; )" + e + "=([^;]*)"));
      return t ? decodeURIComponent(t[1]) : null;
    },
    remove(e) {
      this.write(e, "", Date.now() - 864e5, "/");
    }
  }
) : (
  // Non-standard browser env (web workers, react-native) lack needed support.
  {
    write() {
    },
    read() {
      return null;
    },
    remove() {
    }
  }
);
function eM(e) {
  return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(e);
}
function tM(e, t) {
  return t ? e.replace(/\/?\/$/, "") + "/" + t.replace(/^\/+/, "") : e;
}
function Sm(e, t, n) {
  let r = !eM(t);
  return e && (r || n == !1) ? tM(e, t) : t;
}
const zd = (e) => e instanceof kt ? { ...e } : e;
function dr(e, t) {
  t = t || {};
  const n = {};
  function r(u, d, f, y) {
    return U.isPlainObject(u) && U.isPlainObject(d) ? U.merge.call({ caseless: y }, u, d) : U.isPlainObject(d) ? U.merge({}, d) : U.isArray(d) ? d.slice() : d;
  }
  function s(u, d, f, y) {
    if (U.isUndefined(d)) {
      if (!U.isUndefined(u))
        return r(void 0, u, f, y);
    } else return r(u, d, f, y);
  }
  function i(u, d) {
    if (!U.isUndefined(d))
      return r(void 0, d);
  }
  function a(u, d) {
    if (U.isUndefined(d)) {
      if (!U.isUndefined(u))
        return r(void 0, u);
    } else return r(void 0, d);
  }
  function l(u, d, f) {
    if (f in t)
      return r(u, d);
    if (f in e)
      return r(void 0, u);
  }
  const c = {
    url: i,
    method: i,
    data: i,
    baseURL: a,
    transformRequest: a,
    transformResponse: a,
    paramsSerializer: a,
    timeout: a,
    timeoutMessage: a,
    withCredentials: a,
    withXSRFToken: a,
    adapter: a,
    responseType: a,
    xsrfCookieName: a,
    xsrfHeaderName: a,
    onUploadProgress: a,
    onDownloadProgress: a,
    decompress: a,
    maxContentLength: a,
    maxBodyLength: a,
    beforeRedirect: a,
    transport: a,
    httpAgent: a,
    httpsAgent: a,
    cancelToken: a,
    socketPath: a,
    responseEncoding: a,
    validateStatus: l,
    headers: (u, d, f) => s(zd(u), zd(d), f, !0)
  };
  return U.forEach(Object.keys({ ...e, ...t }), function(d) {
    const f = c[d] || s, y = f(e[d], t[d], d);
    U.isUndefined(y) && f !== l || (n[d] = y);
  }), n;
}
const Em = (e) => {
  const t = dr({}, e);
  let { data: n, withXSRFToken: r, xsrfHeaderName: s, xsrfCookieName: i, headers: a, auth: l } = t;
  if (t.headers = a = kt.from(a), t.url = gm(Sm(t.baseURL, t.url, t.allowAbsoluteUrls), e.params, e.paramsSerializer), l && a.set(
    "Authorization",
    "Basic " + btoa((l.username || "") + ":" + (l.password ? unescape(encodeURIComponent(l.password)) : ""))
  ), U.isFormData(n)) {
    if (vt.hasStandardBrowserEnv || vt.hasStandardBrowserWebWorkerEnv)
      a.setContentType(void 0);
    else if (U.isFunction(n.getHeaders)) {
      const c = n.getHeaders(), u = ["content-type", "content-length"];
      Object.entries(c).forEach(([d, f]) => {
        u.includes(d.toLowerCase()) && a.set(d, f);
      });
    }
  }
  if (vt.hasStandardBrowserEnv && (r && U.isFunction(r) && (r = r(t)), r || r !== !1 && Z1(t.url))) {
    const c = s && i && J1.read(i);
    c && a.set(s, c);
  }
  return t;
}, nM = typeof XMLHttpRequest < "u", rM = nM && function(e) {
  return new Promise(function(n, r) {
    const s = Em(e);
    let i = s.data;
    const a = kt.from(s.headers).normalize();
    let { responseType: l, onUploadProgress: c, onDownloadProgress: u } = s, d, f, y, g, h;
    function p() {
      g && g(), h && h(), s.cancelToken && s.cancelToken.unsubscribe(d), s.signal && s.signal.removeEventListener("abort", d);
    }
    let m = new XMLHttpRequest();
    m.open(s.method.toUpperCase(), s.url, !0), m.timeout = s.timeout;
    function b() {
      if (!m)
        return;
      const O = kt.from(
        "getAllResponseHeaders" in m && m.getAllResponseHeaders()
      ), S = {
        data: !l || l === "text" || l === "json" ? m.responseText : m.response,
        status: m.status,
        statusText: m.statusText,
        headers: O,
        config: e,
        request: m
      };
      wm(function(M) {
        n(M), p();
      }, function(M) {
        r(M), p();
      }, S), m = null;
    }
    "onloadend" in m ? m.onloadend = b : m.onreadystatechange = function() {
      !m || m.readyState !== 4 || m.status === 0 && !(m.responseURL && m.responseURL.indexOf("file:") === 0) || setTimeout(b);
    }, m.onabort = function() {
      m && (r(new Ce("Request aborted", Ce.ECONNABORTED, e, m)), m = null);
    }, m.onerror = function(w) {
      const S = w && w.message ? w.message : "Network Error", P = new Ce(S, Ce.ERR_NETWORK, e, m);
      P.event = w || null, r(P), m = null;
    }, m.ontimeout = function() {
      let w = s.timeout ? "timeout of " + s.timeout + "ms exceeded" : "timeout exceeded";
      const S = s.transitional || bm;
      s.timeoutErrorMessage && (w = s.timeoutErrorMessage), r(new Ce(
        w,
        S.clarifyTimeoutError ? Ce.ETIMEDOUT : Ce.ECONNABORTED,
        e,
        m
      )), m = null;
    }, i === void 0 && a.setContentType(null), "setRequestHeader" in m && U.forEach(a.toJSON(), function(w, S) {
      m.setRequestHeader(S, w);
    }), U.isUndefined(s.withCredentials) || (m.withCredentials = !!s.withCredentials), l && l !== "json" && (m.responseType = s.responseType), u && ([y, h] = Js(u, !0), m.addEventListener("progress", y)), c && m.upload && ([f, g] = Js(c), m.upload.addEventListener("progress", f), m.upload.addEventListener("loadend", g)), (s.cancelToken || s.signal) && (d = (O) => {
      m && (r(!O || O.type ? new Yr(null, e, m) : O), m.abort(), m = null);
    }, s.cancelToken && s.cancelToken.subscribe(d), s.signal && (s.signal.aborted ? d() : s.signal.addEventListener("abort", d)));
    const C = G1(s.url);
    if (C && vt.protocols.indexOf(C) === -1) {
      r(new Ce("Unsupported protocol " + C + ":", Ce.ERR_BAD_REQUEST, e));
      return;
    }
    m.send(i || null);
  });
}, oM = (e, t) => {
  const { length: n } = e = e ? e.filter(Boolean) : [];
  if (t || n) {
    let r = new AbortController(), s;
    const i = function(u) {
      if (!s) {
        s = !0, l();
        const d = u instanceof Error ? u : this.reason;
        r.abort(d instanceof Ce ? d : new Yr(d instanceof Error ? d.message : d));
      }
    };
    let a = t && setTimeout(() => {
      a = null, i(new Ce(`timeout ${t} of ms exceeded`, Ce.ETIMEDOUT));
    }, t);
    const l = () => {
      e && (a && clearTimeout(a), a = null, e.forEach((u) => {
        u.unsubscribe ? u.unsubscribe(i) : u.removeEventListener("abort", i);
      }), e = null);
    };
    e.forEach((u) => u.addEventListener("abort", i));
    const { signal: c } = r;
    return c.unsubscribe = () => U.asap(l), c;
  }
}, sM = function* (e, t) {
  let n = e.byteLength;
  if (n < t) {
    yield e;
    return;
  }
  let r = 0, s;
  for (; r < n; )
    s = r + t, yield e.slice(r, s), r = s;
}, iM = async function* (e, t) {
  for await (const n of aM(e))
    yield* sM(n, t);
}, aM = async function* (e) {
  if (e[Symbol.asyncIterator]) {
    yield* e;
    return;
  }
  const t = e.getReader();
  try {
    for (; ; ) {
      const { done: n, value: r } = await t.read();
      if (n)
        break;
      yield r;
    }
  } finally {
    await t.cancel();
  }
}, Ud = (e, t, n, r) => {
  const s = iM(e, t);
  let i = 0, a, l = (c) => {
    a || (a = !0, r && r(c));
  };
  return new ReadableStream({
    async pull(c) {
      try {
        const { done: u, value: d } = await s.next();
        if (u) {
          l(), c.close();
          return;
        }
        let f = d.byteLength;
        if (n) {
          let y = i += f;
          n(y);
        }
        c.enqueue(new Uint8Array(d));
      } catch (u) {
        throw l(u), u;
      }
    },
    cancel(c) {
      return l(c), s.return();
    }
  }, {
    highWaterMark: 2
  });
}, qd = 64 * 1024, { isFunction: Ts } = U, lM = (({ Request: e, Response: t }) => ({
  Request: e,
  Response: t
}))(U.global), {
  ReadableStream: Hd,
  TextEncoder: Yd
} = U.global, Kd = (e, ...t) => {
  try {
    return !!e(...t);
  } catch {
    return !1;
  }
}, cM = (e) => {
  e = U.merge.call({
    skipUndefined: !0
  }, lM, e);
  const { fetch: t, Request: n, Response: r } = e, s = t ? Ts(t) : typeof fetch == "function", i = Ts(n), a = Ts(r);
  if (!s)
    return !1;
  const l = s && Ts(Hd), c = s && (typeof Yd == "function" ? /* @__PURE__ */ ((h) => (p) => h.encode(p))(new Yd()) : async (h) => new Uint8Array(await new n(h).arrayBuffer())), u = i && l && Kd(() => {
    let h = !1;
    const p = new n(vt.origin, {
      body: new Hd(),
      method: "POST",
      get duplex() {
        return h = !0, "half";
      }
    }).headers.has("Content-Type");
    return h && !p;
  }), d = a && l && Kd(() => U.isReadableStream(new r("").body)), f = {
    stream: d && ((h) => h.body)
  };
  s && ["text", "arrayBuffer", "blob", "formData", "stream"].forEach((h) => {
    !f[h] && (f[h] = (p, m) => {
      let b = p && p[h];
      if (b)
        return b.call(p);
      throw new Ce(`Response type '${h}' is not supported`, Ce.ERR_NOT_SUPPORT, m);
    });
  });
  const y = async (h) => {
    if (h == null)
      return 0;
    if (U.isBlob(h))
      return h.size;
    if (U.isSpecCompliantForm(h))
      return (await new n(vt.origin, {
        method: "POST",
        body: h
      }).arrayBuffer()).byteLength;
    if (U.isArrayBufferView(h) || U.isArrayBuffer(h))
      return h.byteLength;
    if (U.isURLSearchParams(h) && (h = h + ""), U.isString(h))
      return (await c(h)).byteLength;
  }, g = async (h, p) => {
    const m = U.toFiniteNumber(h.getContentLength());
    return m ?? y(p);
  };
  return async (h) => {
    let {
      url: p,
      method: m,
      data: b,
      signal: C,
      cancelToken: O,
      timeout: w,
      onDownloadProgress: S,
      onUploadProgress: P,
      responseType: M,
      headers: F,
      withCredentials: A = "same-origin",
      fetchOptions: $
    } = Em(h), k = t || fetch;
    M = M ? (M + "").toLowerCase() : "text";
    let v = oM([C, O && O.toAbortSignal()], w), D = null;
    const T = v && v.unsubscribe && (() => {
      v.unsubscribe();
    });
    let I;
    try {
      if (P && u && m !== "get" && m !== "head" && (I = await g(F, b)) !== 0) {
        let R = new n(p, {
          method: "POST",
          body: b,
          duplex: "half"
        }), B;
        if (U.isFormData(b) && (B = R.headers.get("content-type")) && F.setContentType(B), R.body) {
          const [H, K] = Bd(
            I,
            Js(Wd(P))
          );
          b = Ud(R.body, qd, H, K);
        }
      }
      U.isString(A) || (A = A ? "include" : "omit");
      const N = i && "credentials" in n.prototype, _ = {
        ...$,
        signal: v,
        method: m.toUpperCase(),
        headers: F.normalize().toJSON(),
        body: b,
        duplex: "half",
        credentials: N ? A : void 0
      };
      D = i && new n(p, _);
      let G = await (i ? k(D, $) : k(p, _));
      const L = d && (M === "stream" || M === "response");
      if (d && (S || L && T)) {
        const R = {};
        ["status", "statusText", "headers"].forEach((te) => {
          R[te] = G[te];
        });
        const B = U.toFiniteNumber(G.headers.get("content-length")), [H, K] = S && Bd(
          B,
          Js(Wd(S), !0)
        ) || [];
        G = new r(
          Ud(G.body, qd, H, () => {
            K && K(), T && T();
          }),
          R
        );
      }
      M = M || "text";
      let V = await f[U.findKey(f, M) || "text"](G, h);
      return !L && T && T(), await new Promise((R, B) => {
        wm(R, B, {
          data: V,
          headers: kt.from(G.headers),
          status: G.status,
          statusText: G.statusText,
          config: h,
          request: D
        });
      });
    } catch (N) {
      throw T && T(), N && N.name === "TypeError" && /Load failed|fetch/i.test(N.message) ? Object.assign(
        new Ce("Network Error", Ce.ERR_NETWORK, h, D),
        {
          cause: N.cause || N
        }
      ) : Ce.from(N, N && N.code, h, D);
    }
  };
}, uM = /* @__PURE__ */ new Map(), Om = (e) => {
  let t = e && e.env || {};
  const { fetch: n, Request: r, Response: s } = t, i = [
    r,
    s,
    n
  ];
  let a = i.length, l = a, c, u, d = uM;
  for (; l--; )
    c = i[l], u = d.get(c), u === void 0 && d.set(c, u = l ? /* @__PURE__ */ new Map() : cM(t)), d = u;
  return u;
};
Om();
const yc = {
  http: T1,
  xhr: rM,
  fetch: {
    get: Om
  }
};
U.forEach(yc, (e, t) => {
  if (e) {
    try {
      Object.defineProperty(e, "name", { value: t });
    } catch {
    }
    Object.defineProperty(e, "adapterName", { value: t });
  }
});
const Gd = (e) => `- ${e}`, dM = (e) => U.isFunction(e) || e === null || e === !1;
function fM(e, t) {
  e = U.isArray(e) ? e : [e];
  const { length: n } = e;
  let r, s;
  const i = {};
  for (let a = 0; a < n; a++) {
    r = e[a];
    let l;
    if (s = r, !dM(r) && (s = yc[(l = String(r)).toLowerCase()], s === void 0))
      throw new Ce(`Unknown adapter '${l}'`);
    if (s && (U.isFunction(s) || (s = s.get(t))))
      break;
    i[l || "#" + a] = s;
  }
  if (!s) {
    const a = Object.entries(i).map(
      ([c, u]) => `adapter ${c} ` + (u === !1 ? "is not supported by the environment" : "is not available in the build")
    );
    let l = n ? a.length > 1 ? `since :
` + a.map(Gd).join(`
`) : " " + Gd(a[0]) : "as no adapter specified";
    throw new Ce(
      "There is no suitable adapter to dispatch the request " + l,
      "ERR_NOT_SUPPORT"
    );
  }
  return s;
}
const Cm = {
  /**
   * Resolve an adapter from a list of adapter names or functions.
   * @type {Function}
   */
  getAdapter: fM,
  /**
   * Exposes all known adapters
   * @type {Object<string, Function|Object>}
   */
  adapters: yc
};
function Ea(e) {
  if (e.cancelToken && e.cancelToken.throwIfRequested(), e.signal && e.signal.aborted)
    throw new Yr(null, e);
}
function Xd(e) {
  return Ea(e), e.headers = kt.from(e.headers), e.data = Sa.call(
    e,
    e.transformRequest
  ), ["post", "put", "patch"].indexOf(e.method) !== -1 && e.headers.setContentType("application/x-www-form-urlencoded", !1), Cm.getAdapter(e.adapter || us.adapter, e)(e).then(function(r) {
    return Ea(e), r.data = Sa.call(
      e,
      e.transformResponse,
      r
    ), r.headers = kt.from(r.headers), r;
  }, function(r) {
    return xm(r) || (Ea(e), r && r.response && (r.response.data = Sa.call(
      e,
      e.transformResponse,
      r.response
    ), r.response.headers = kt.from(r.response.headers))), Promise.reject(r);
  });
}
const Pm = "1.13.0", Ui = {};
["object", "boolean", "number", "function", "string", "symbol"].forEach((e, t) => {
  Ui[e] = function(r) {
    return typeof r === e || "a" + (t < 1 ? "n " : " ") + e;
  };
});
const Qd = {};
Ui.transitional = function(t, n, r) {
  function s(i, a) {
    return "[Axios v" + Pm + "] Transitional option '" + i + "'" + a + (r ? ". " + r : "");
  }
  return (i, a, l) => {
    if (t === !1)
      throw new Ce(
        s(a, " has been removed" + (n ? " in " + n : "")),
        Ce.ERR_DEPRECATED
      );
    return n && !Qd[a] && (Qd[a] = !0, console.warn(
      s(
        a,
        " has been deprecated since v" + n + " and will be removed in the near future"
      )
    )), t ? t(i, a, l) : !0;
  };
};
Ui.spelling = function(t) {
  return (n, r) => (console.warn(`${r} is likely a misspelling of ${t}`), !0);
};
function pM(e, t, n) {
  if (typeof e != "object")
    throw new Ce("options must be an object", Ce.ERR_BAD_OPTION_VALUE);
  const r = Object.keys(e);
  let s = r.length;
  for (; s-- > 0; ) {
    const i = r[s], a = t[i];
    if (a) {
      const l = e[i], c = l === void 0 || a(l, i, e);
      if (c !== !0)
        throw new Ce("option " + i + " must be " + c, Ce.ERR_BAD_OPTION_VALUE);
      continue;
    }
    if (n !== !0)
      throw new Ce("Unknown option " + i, Ce.ERR_BAD_OPTION);
  }
}
const js = {
  assertOptions: pM,
  validators: Ui
}, Xt = js.validators;
let ir = class {
  constructor(t) {
    this.defaults = t || {}, this.interceptors = {
      request: new Vd(),
      response: new Vd()
    };
  }
  /**
   * Dispatch a request
   *
   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
   * @param {?Object} config
   *
   * @returns {Promise} The Promise to be fulfilled
   */
  async request(t, n) {
    try {
      return await this._request(t, n);
    } catch (r) {
      if (r instanceof Error) {
        let s = {};
        Error.captureStackTrace ? Error.captureStackTrace(s) : s = new Error();
        const i = s.stack ? s.stack.replace(/^.+\n/, "") : "";
        try {
          r.stack ? i && !String(r.stack).endsWith(i.replace(/^.+\n.+\n/, "")) && (r.stack += `
` + i) : r.stack = i;
        } catch {
        }
      }
      throw r;
    }
  }
  _request(t, n) {
    typeof t == "string" ? (n = n || {}, n.url = t) : n = t || {}, n = dr(this.defaults, n);
    const { transitional: r, paramsSerializer: s, headers: i } = n;
    r !== void 0 && js.assertOptions(r, {
      silentJSONParsing: Xt.transitional(Xt.boolean),
      forcedJSONParsing: Xt.transitional(Xt.boolean),
      clarifyTimeoutError: Xt.transitional(Xt.boolean)
    }, !1), s != null && (U.isFunction(s) ? n.paramsSerializer = {
      serialize: s
    } : js.assertOptions(s, {
      encode: Xt.function,
      serialize: Xt.function
    }, !0)), n.allowAbsoluteUrls !== void 0 || (this.defaults.allowAbsoluteUrls !== void 0 ? n.allowAbsoluteUrls = this.defaults.allowAbsoluteUrls : n.allowAbsoluteUrls = !0), js.assertOptions(n, {
      baseUrl: Xt.spelling("baseURL"),
      withXsrfToken: Xt.spelling("withXSRFToken")
    }, !0), n.method = (n.method || this.defaults.method || "get").toLowerCase();
    let a = i && U.merge(
      i.common,
      i[n.method]
    );
    i && U.forEach(
      ["delete", "get", "head", "post", "put", "patch", "common"],
      (h) => {
        delete i[h];
      }
    ), n.headers = kt.concat(a, i);
    const l = [];
    let c = !0;
    this.interceptors.request.forEach(function(p) {
      typeof p.runWhen == "function" && p.runWhen(n) === !1 || (c = c && p.synchronous, l.unshift(p.fulfilled, p.rejected));
    });
    const u = [];
    this.interceptors.response.forEach(function(p) {
      u.push(p.fulfilled, p.rejected);
    });
    let d, f = 0, y;
    if (!c) {
      const h = [Xd.bind(this), void 0];
      for (h.unshift(...l), h.push(...u), y = h.length, d = Promise.resolve(n); f < y; )
        d = d.then(h[f++], h[f++]);
      return d;
    }
    y = l.length;
    let g = n;
    for (; f < y; ) {
      const h = l[f++], p = l[f++];
      try {
        g = h(g);
      } catch (m) {
        p.call(this, m);
        break;
      }
    }
    try {
      d = Xd.call(this, g);
    } catch (h) {
      return Promise.reject(h);
    }
    for (f = 0, y = u.length; f < y; )
      d = d.then(u[f++], u[f++]);
    return d;
  }
  getUri(t) {
    t = dr(this.defaults, t);
    const n = Sm(t.baseURL, t.url, t.allowAbsoluteUrls);
    return gm(n, t.params, t.paramsSerializer);
  }
};
U.forEach(["delete", "get", "head", "options"], function(t) {
  ir.prototype[t] = function(n, r) {
    return this.request(dr(r || {}, {
      method: t,
      url: n,
      data: (r || {}).data
    }));
  };
});
U.forEach(["post", "put", "patch"], function(t) {
  function n(r) {
    return function(i, a, l) {
      return this.request(dr(l || {}, {
        method: t,
        headers: r ? {
          "Content-Type": "multipart/form-data"
        } : {},
        url: i,
        data: a
      }));
    };
  }
  ir.prototype[t] = n(), ir.prototype[t + "Form"] = n(!0);
});
let hM = class Tm {
  constructor(t) {
    if (typeof t != "function")
      throw new TypeError("executor must be a function.");
    let n;
    this.promise = new Promise(function(i) {
      n = i;
    });
    const r = this;
    this.promise.then((s) => {
      if (!r._listeners) return;
      let i = r._listeners.length;
      for (; i-- > 0; )
        r._listeners[i](s);
      r._listeners = null;
    }), this.promise.then = (s) => {
      let i;
      const a = new Promise((l) => {
        r.subscribe(l), i = l;
      }).then(s);
      return a.cancel = function() {
        r.unsubscribe(i);
      }, a;
    }, t(function(i, a, l) {
      r.reason || (r.reason = new Yr(i, a, l), n(r.reason));
    });
  }
  /**
   * Throws a `CanceledError` if cancellation has been requested.
   */
  throwIfRequested() {
    if (this.reason)
      throw this.reason;
  }
  /**
   * Subscribe to the cancel signal
   */
  subscribe(t) {
    if (this.reason) {
      t(this.reason);
      return;
    }
    this._listeners ? this._listeners.push(t) : this._listeners = [t];
  }
  /**
   * Unsubscribe from the cancel signal
   */
  unsubscribe(t) {
    if (!this._listeners)
      return;
    const n = this._listeners.indexOf(t);
    n !== -1 && this._listeners.splice(n, 1);
  }
  toAbortSignal() {
    const t = new AbortController(), n = (r) => {
      t.abort(r);
    };
    return this.subscribe(n), t.signal.unsubscribe = () => this.unsubscribe(n), t.signal;
  }
  /**
   * Returns an object that contains a new `CancelToken` and a function that, when called,
   * cancels the `CancelToken`.
   */
  static source() {
    let t;
    return {
      token: new Tm(function(s) {
        t = s;
      }),
      cancel: t
    };
  }
};
function mM(e) {
  return function(n) {
    return e.apply(null, n);
  };
}
function yM(e) {
  return U.isObject(e) && e.isAxiosError === !0;
}
const tl = {
  Continue: 100,
  SwitchingProtocols: 101,
  Processing: 102,
  EarlyHints: 103,
  Ok: 200,
  Created: 201,
  Accepted: 202,
  NonAuthoritativeInformation: 203,
  NoContent: 204,
  ResetContent: 205,
  PartialContent: 206,
  MultiStatus: 207,
  AlreadyReported: 208,
  ImUsed: 226,
  MultipleChoices: 300,
  MovedPermanently: 301,
  Found: 302,
  SeeOther: 303,
  NotModified: 304,
  UseProxy: 305,
  Unused: 306,
  TemporaryRedirect: 307,
  PermanentRedirect: 308,
  BadRequest: 400,
  Unauthorized: 401,
  PaymentRequired: 402,
  Forbidden: 403,
  NotFound: 404,
  MethodNotAllowed: 405,
  NotAcceptable: 406,
  ProxyAuthenticationRequired: 407,
  RequestTimeout: 408,
  Conflict: 409,
  Gone: 410,
  LengthRequired: 411,
  PreconditionFailed: 412,
  PayloadTooLarge: 413,
  UriTooLong: 414,
  UnsupportedMediaType: 415,
  RangeNotSatisfiable: 416,
  ExpectationFailed: 417,
  ImATeapot: 418,
  MisdirectedRequest: 421,
  UnprocessableEntity: 422,
  Locked: 423,
  FailedDependency: 424,
  TooEarly: 425,
  UpgradeRequired: 426,
  PreconditionRequired: 428,
  TooManyRequests: 429,
  RequestHeaderFieldsTooLarge: 431,
  UnavailableForLegalReasons: 451,
  InternalServerError: 500,
  NotImplemented: 501,
  BadGateway: 502,
  ServiceUnavailable: 503,
  GatewayTimeout: 504,
  HttpVersionNotSupported: 505,
  VariantAlsoNegotiates: 506,
  InsufficientStorage: 507,
  LoopDetected: 508,
  NotExtended: 510,
  NetworkAuthenticationRequired: 511,
  WebServerIsDown: 521,
  ConnectionTimedOut: 522,
  OriginIsUnreachable: 523,
  TimeoutOccurred: 524,
  SslHandshakeFailed: 525,
  InvalidSslCertificate: 526
};
Object.entries(tl).forEach(([e, t]) => {
  tl[t] = e;
});
function Rm(e) {
  const t = new ir(e), n = sm(ir.prototype.request, t);
  return U.extend(n, ir.prototype, t, { allOwnKeys: !0 }), U.extend(n, t, null, { allOwnKeys: !0 }), n.create = function(s) {
    return Rm(dr(e, s));
  }, n;
}
const it = Rm(us);
it.Axios = ir;
it.CanceledError = Yr;
it.CancelToken = hM;
it.isCancel = xm;
it.VERSION = Pm;
it.toFormData = zi;
it.AxiosError = Ce;
it.Cancel = it.CanceledError;
it.all = function(t) {
  return Promise.all(t);
};
it.spread = mM;
it.isAxiosError = yM;
it.mergeConfig = dr;
it.AxiosHeaders = kt;
it.formToJSON = (e) => vm(U.isHTMLForm(e) ? new FormData(e) : e);
it.getAdapter = Cm.getAdapter;
it.HttpStatusCode = tl;
it.default = it;
const {
  Axios: $M,
  AxiosError: jM,
  CanceledError: _M,
  isCancel: VM,
  CancelToken: LM,
  VERSION: BM,
  all: WM,
  Cancel: zM,
  isAxiosError: UM,
  spread: qM,
  toFormData: HM,
  AxiosHeaders: YM,
  HttpStatusCode: KM,
  formToJSON: GM,
  getAdapter: XM,
  mergeConfig: QM
} = it, ZM = (e, { onUnauthorized: t, interceptors: n } = {}) => {
  const r = it.create({ baseURL: e });
  return r.interceptors.response.use(
    (s) => s,
    (s) => (s.response?.status === 401 && t && t(), Promise.reject(s))
  ), n && n.forEach((s) => {
    r.interceptors.response.use(s.success, s.error);
  }), r;
};
export {
  TM as AutocompleteField,
  NM as DashboardLayout,
  dy as DataTable,
  PM as FileUploadField,
  sf as Form,
  zo as FormContext,
  IM as LoginPage,
  MM as ResourceFormPage,
  DM as ResourceListPage,
  CM as StatCard,
  RM as SwitchField,
  Ec as TextField,
  ZM as createApiClient,
  Qk as createErrorTranslator,
  Yh as getTranslatedError,
  Zk as useApi,
  kM as useApiMutation,
  Jk as useDebounce
};
